#ifndef __MKE2FS_H__
#define __MKE2FS_H__

#include "ext2fs/ext2fs.h"

enum {
	WRITE_INODE_TABLES_UNKNOWN = 0,
	WRITE_INODE_TABLES_INIT,
	WRITE_INODE_TABLES_WRITING,
	WRITE_INODE_TABLES_WRITING_DONE,
	WRITE_INODE_TABLES_DONE,
	WRITE_INODE_TABLES_ERROR,
};

enum {
	MKE2FS_INVALID_HANDLE = 1001,
	MKE2FS_FAIL_TO_ALLOCATE_MEMORY,
	MKE2FS_PROFILE_ERROR,
	MKE2FS_UNAME_ERROR,
	MKE2FS_INVALID_BLOCK_SIZE,
	MKE2FS_INVALID_CLUSTER_SIZE,
	MKE2FS_ILLEGAL_BLOCKS_PER_GROUP,
	MKE2FS_BLOCKS_PER_GROUP_NOT_MULTIPLE_OF_8,
	MKE2FS_FLEX_BG_SIZE_NOT_POWER_OF_2,
	MKE2FS_INVALID_INODE_RATIO,
	MKE2FS_INVALID_INODE_SIZE,
	MKE2FS_INVALID_RESERVED_RATIO,
	MKE2FS_FAIL_TO_PARSE_FSTYPE,
	MKE2FS_FAIL_TO_DETERMINE_HW_SECTOR_SIZE,
	MKE2FS_FAIL_TO_DETERMINE_PHY_SECTOR_SIZE,
	MKE2FS_FAIL_TO_DETERMINE_FS_SIZE,
	MKE2FS_BLOCKSIZE_TOO_SMALL,
	MKE2FS_UNSUITABLE_BLOCKSIZE_FOR_32BIT,
	MKE2FS_FS_FEATURE_NOT_SUPPORT,
	MKE2FS_NOT_SUPPORT_SPARSE_SB,
	MKE2FS_NOT_SUPPORT_JOURNAL,
	MKE2FS_EXTENTS_ENABLED_FOR_64BIT_FS_NOLY,
	MKE2FS_CLUSTER_SIZE_SMALLER_THAN_BLOCK_SIZE,
	MKE2FS_UNSUITABLE_CLUSTER_SIZE,
	MKE2FS_NEED_EXTENTS_FEATURE,
	MKE2FS_FEATURES_CANNOT_ENABLED_SIMULTANEOUSLY,
	MKE2FS_NOT_SUPPORT_RESERVED_ONLINE_RESIZE,
	MKE2FS_BLOCK_PER_GROUP_OUT_OF_RANGE,
	MKE2FS_FLEX_BG_FEATURE_NOT_ENABLED,
	MKE2FS_TOO_MANY_INODES,	
	MKE2FS_UNSUITABLE_INODE_CONFIG,	
	MKE2FS_SETUP_TDB_ERROR,
	MKE2FS_FAIL_TO_INITIALIZE_SUPERBLOCK,
	MKE2FS_COULD_NOT_PARSE_UUID,
	MKE2FS_UNKNOWN_OS,
	MKE2FS_EXT2FS_CLOSE_ERROR,
	MKE2FS_FAIL_TO_ALLOCATE_FS_TABLES,
	MKE2FS_FAIL_TO_CONVERT_SUBCLUSTER_BITMAP,
	MKE2FS_RESERVING_BLOCKS_FOR_ONLINE_RESIZE_ERROR,
	MKE2FS_FAIL_TO_OPEN_JOURNAL_DEV,
	MKE2FS_FAIL_TO_ADD_JOURNAL,
	MKE2FS_FAIL_TO_CREATE_JOURNAL,
	MKE2FS_FAIL_TO_INITIALIZE_JOURNAL_SUPERBLOCK,
	MKE2FS_FAIL_TO_ZERO_JOURNAL_DEV,
	MKE2FS_FAIL_TO_WRITE_JOURNAL_SB,
	MKE2FS_ENABLE_MULTIPLE_MOUNT_PROTECTION_ERROR,
	MKE2FS_INVALID_BB_LIST,
	MKE2FS_BAD_PRIMARY_SB_GROUP_DESCRIPTOR,
	MKE2FS_MARK_BAD_BLOCKS_ERROR,
	MKE2FS_COULD_NOT_WRITE_BLOCKS_IN_INODE_TABLES,
	MKE2FS_FAIL_TO_CREATE_ROOT_DIR,
	MKE2FS_FAIL_TO_READ_ROOT_INODE,
	MKE2FS_FAIL_TO_SET_ROOT_INODE_OWNERSHIP,
	MKE2FS_OOM_ERASING_SECTORS,
	MKE2FS_FAIL_TO_OPEN_BB_FILE,
	MKE2FS_FAIL_TO_READ_BB_FILE,
	MKE2FS_EMPTY_STRING,
	MKE2FS_INVALID_FS_OPTIONS,
	MKE2FS_INVALID_MOUNT_OPTIONS,
	MKE2FS_ABORT_CHECK_PROFILE,
	MKE2FS_JOURNAL_BLOCKSIZE_SMALLER_THAN_MINIMUM_BLOCKSIZE,
	MKE2FS_COULD_NOT_DETERMINE_DEV_SIZE,
	MKE2FS_DEVICE_SIZE_REPORT_TO_BE_0,
	MKE2FS_NOT_BLOCK_DEV,
	MKE2FS_FAIL_TO_GET_BLKID_CACHE,
	MKE2FS_CHECK_MOUNT_POINT_FAIL,
};
	

struct extended_opt {
	__u16 stride;
	__u32 stripe_width;
	__u16 desc_size;
	__u16 mmp_update_interval;
	int test_fs;
	int discard;	
};

struct e2fs_cfg {
	double reserved_ratio;
	unsigned long long num_inodes;
	unsigned long flex_bg_size;
	__u32 blocks_per_group;
	__u32 creator_os;
	int blocksize;
	int cluster_size;
	int direct_io;	
	int force;
	int cflag;
	int verbose;
	int quiet;
	int r_opt;
	int super_only;
	int inode_ratio;
	int inode_size;
	int journal_size;
	int noaction;
	char bad_blocks_filename[512];
	char fs_features[256];
	char usage_types[256];
	char mount_dir[64];
	char fs_uuid[64];
	char fs_type[16];
	char volume_label[16];

	struct extended_opt ext_opts;
};

typedef void (*mke2fs_cb_func)(void *pData, int stat, int current, int total);

struct mke2fs_handle {
	//ext2_filsys fs;
	struct e2fs_cfg cfg;
	char device_name[32];
	char *buf;
	void *pData;
	mke2fs_cb_func cb_func;
};

extern int mke2fs(struct mke2fs_handle *handle);

#endif // __MKE2FS_H__

