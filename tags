!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	libmdadm/sha1.h	/^  sha1_uint32 A;$/;"	m	struct:sha1_ctx	access:public
ADD_NEW_DISK	libmdadm/md_u.h	30;"	d
AHCI_PROP	libmdadm/platform-intel.c	345;"	d	file:
ALGORITHM_LEFT_ASYMMETRIC	libmdadm/mdadm.h	1452;"	d
ALGORITHM_LEFT_ASYMMETRIC_6	libmdadm/mdadm.h	1484;"	d
ALGORITHM_LEFT_SYMMETRIC	libmdadm/mdadm.h	1454;"	d
ALGORITHM_LEFT_SYMMETRIC_6	libmdadm/mdadm.h	1486;"	d
ALGORITHM_PARITY_0	libmdadm/mdadm.h	1460;"	d
ALGORITHM_PARITY_0_6	libmdadm/mdadm.h	1488;"	d
ALGORITHM_PARITY_N	libmdadm/mdadm.h	1461;"	d
ALGORITHM_PARITY_N_6	libmdadm/mdadm.h	1489;"	d
ALGORITHM_RIGHT_ASYMMETRIC	libmdadm/mdadm.h	1453;"	d
ALGORITHM_RIGHT_ASYMMETRIC_6	libmdadm/mdadm.h	1485;"	d
ALGORITHM_RIGHT_SYMMETRIC	libmdadm/mdadm.h	1455;"	d
ALGORITHM_RIGHT_SYMMETRIC_6	libmdadm/mdadm.h	1487;"	d
ALGORITHM_ROTATING_N_CONTINUE	libmdadm/mdadm.h	1477;"	d
ALGORITHM_ROTATING_N_RESTART	libmdadm/mdadm.h	1476;"	d
ALGORITHM_ROTATING_ZERO_RESTART	libmdadm/mdadm.h	1475;"	d
APPLY_METADATA_CHANGES	libmdadm/mdadm.h	824;"	d
ARRAY_BUSY	libmdadm/monitor.c	227;"	d	file:
ARRAY_DIRTY	libmdadm/monitor.c	226;"	d	file:
ARRAY_SIZE	libmdadm/mdadm.h	183;"	d
ASSEMBLE	libmdadm/mdadm.h	/^	ASSEMBLE=1,$/;"	e	enum:mode
ASSEMBLE_CONTAINER_CONTENT_FAIL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_CONTAINER_CONTENT_FAIL,$/;"	e	enum:__anon5
ASSEMBLE_DRIVE_IS_ACTIVE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_DRIVE_IS_ACTIVE,$/;"	e	enum:__anon5
ASSEMBLE_FAIL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_FAIL,$/;"	e	enum:__anon5
ASSEMBLE_FAIL_TO_OPEN_BITMAP_FILE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_FAIL_TO_OPEN_BITMAP_FILE,$/;"	e	enum:__anon5
ASSEMBLE_FAIL_TO_SET_ARRAY_INFO	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_FAIL_TO_SET_ARRAY_INFO,$/;"	e	enum:__anon5
ASSEMBLE_FAIL_TO_SET_BITMAP_FILE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_FAIL_TO_SET_BITMAP_FILE,$/;"	e	enum:__anon5
ASSEMBLE_INITIALIZE_DEV_LIST_FAIL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_INITIALIZE_DEV_LIST_FAIL,$/;"	e	enum:__anon5
ASSEMBLE_INVALID_MDFD	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_INVALID_MDFD,$/;"	e	enum:__anon5
ASSEMBLE_INVALID_UUID	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_INVALID_UUID,$/;"	e	enum:__anon5
ASSEMBLE_KERNEL_UNSUPPORT	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_KERNEL_UNSUPPORT,$/;"	e	enum:__anon5
ASSEMBLE_MDDEV_INUSE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_MDDEV_INUSE,$/;"	e	enum:__anon5
ASSEMBLE_MDDEV_UNSET	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_MDDEV_UNSET,$/;"	e	enum:__anon5
ASSEMBLE_MDNUM_ILLEGAL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_MDNUM_ILLEGAL,$/;"	e	enum:__anon5
ASSEMBLE_MD_ALREADY_ACTIVE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_MD_ALREADY_ACTIVE,$/;"	e	enum:__anon5
ASSEMBLE_NEED_BACKUP_FILE	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NEED_BACKUP_FILE,$/;"	e	enum:__anon5
ASSEMBLE_NEGATIVE_DEV_CNT	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NEGATIVE_DEV_CNT,$/;"	e	enum:__anon5
ASSEMBLE_NEGATIVE_NUM_DEVICES	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NEGATIVE_NUM_DEVICES,$/;"	e	enum:__anon5
ASSEMBLE_NO_DEVS_FOR_MD	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NO_DEVS_FOR_MD,$/;"	e	enum:__anon5
ASSEMBLE_NO_IDENTITY_INFO	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NO_IDENTITY_INFO = 401,$/;"	e	enum:__anon5
ASSEMBLE_NO_SUITABLE_DRIVES	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_NO_SUITABLE_DRIVES,$/;"	e	enum:__anon5
ASSEMBLE_OPEN_DEV_FAIL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_OPEN_DEV_FAIL,$/;"	e	enum:__anon5
ASSEMBLE_RAID_DEVS_NOT_ENOUGH	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_RAID_DEVS_NOT_ENOUGH,$/;"	e	enum:__anon5
ASSEMBLE_RAID_DEVS_NOT_EXIST_IN_LIST	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_RAID_DEVS_NOT_EXIST_IN_LIST,$/;"	e	enum:__anon5
ASSEMBLE_REWRITE_SUPERBLOCK_FAIL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_REWRITE_SUPERBLOCK_FAIL,$/;"	e	enum:__anon5
ASSEMBLE_SUPERBLOCK_DISAPPEARED	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_SUPERBLOCK_DISAPPEARED,$/;"	e	enum:__anon5
ASSEMBLE_SUPER_INFO_IS_NULL	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_SUPER_INFO_IS_NULL,$/;"	e	enum:__anon5
ASSEMBLE_UNDEFINED_ERROR	libmdadm/mdadm_errcode.h	/^	ASSEMBLE_UNDEFINED_ERROR,$/;"	e	enum:__anon5
AUTODETECT	libmdadm/mdadm.h	/^	AUTODETECT,$/;"	e	enum:mode
AddDisk	RAIDManager.cpp	/^bool RAIDManager::AddDisk(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
AddDisk	RAIDManager.h	/^	bool AddDisk(const string& dev);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev)
AddDiskSymLink	RAIDManager.cpp	/^bool RAIDManager::AddDiskSymLink(const string& symlink, eDiskType type)$/;"	f	class:RAIDManager	signature:(const string& symlink, eDiskType type)
AddDiskSymLink	RAIDManager.h	/^	bool AddDiskSymLink(const string& symlink, eDiskType type);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink, eDiskType type)
AddMDDisks	RAIDManager.cpp	/^bool RAIDManager::AddMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
AddMDDisks	RAIDManager.h	/^	bool AddMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
AllPersist	libmdadm/mdadm.h	1436;"	d
Array	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
Assemble	libmdadm/Assemble.c	/^int Assemble(struct supertype *st, char *mddev,$/;"	f	signature:(struct supertype *st, char *mddev, struct mddev_ident *ident, struct mddev_dev *devlist, struct context *c)
Assemble	libmdadm/mdadm.h	/^extern int Assemble(struct supertype *st, char *mddev,$/;"	p	signature:(struct supertype *st, char *mddev, struct mddev_ident *ident, struct mddev_dev *devlist, struct context *c)
AssembleRAID	RAIDManager.cpp	/^bool RAIDManager::AssembleRAID(const int uuid[4], string& strMDName)$/;"	f	class:RAIDManager	signature:(const int uuid[4], string& strMDName)
AssembleRAID	RAIDManager.cpp	/^bool RAIDManager::AssembleRAID(vector<string>& vDevList, string& strMDName)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList, string& strMDName)
AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const int& mdnum, string& mddev, const int uuid[4])$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, const int uuid[4])
AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const int& mdnum, string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, vector<string>& vDevList)
AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const string& mddev, const int uuid[4])$/;"	f	class:RAIDManager	signature:(const string& mddev, const int uuid[4])
AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
AssembleRAID	RAIDManager.h	/^	bool AssembleRAID(const int uuid[4], string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(const int uuid[4], string& strMDName)
AssembleRAID	RAIDManager.h	/^	bool AssembleRAID(vector<string>& vDevList, string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(vector<string>& vDevList, string& strMDName)
AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const int& mdnum, string& mddev, const int uuid[4]);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, const int uuid[4])
AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const int& mdnum, string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, vector<string>& vDevList)
AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const string& mddev, const int uuid[4]);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, const int uuid[4])
AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList)
AutoMode	libmdadm/config.c	/^		Homehost, AutoMode, Policy, PartPolicy, LTEnd };$/;"	e	enum:linetype	file:
B	libmdadm/sha1.h	/^  sha1_uint32 B;$/;"	m	struct:sha1_ctx	access:public
BADBLOCKS_FLAG_DIRTY	libmke2fs/ext2fs.h	130;"	d
BBM_LOG_MAX_ENTRIES	libmdadm/super-intel.c	219;"	d	file:
BITMAP_ACTIVE	libmdadm/bitmap.h	/^	BITMAP_ACTIVE = 0x001, \/* the bitmap is in use *\/$/;"	e	enum:bitmap_state
BITMAP_BLOCK_SHIFT	libmdadm/bitmap.h	106;"	d
BITMAP_BLOCK_SIZE	libmdadm/bitmap.h	105;"	d
BITMAP_H	libmdadm/bitmap.h	7;"	d
BITMAP_MAGIC	libmdadm/bitmap.h	137;"	d
BITMAP_MAJOR_HI	libmdadm/bitmap.h	13;"	d
BITMAP_MAJOR_HOSTENDIAN	libmdadm/bitmap.h	14;"	d
BITMAP_MAJOR_LO	libmdadm/bitmap.h	9;"	d
BITMAP_MINOR	libmdadm/bitmap.h	16;"	d
BITMAP_STALE	libmdadm/bitmap.h	/^	BITMAP_STALE  = 0x002  \/* the bitmap file is out of date or had -EIO *\/$/;"	e	enum:bitmap_state
BLKGETSIZE64	libmdadm/mdadm.h	63;"	d
BLKPG	libmdadm/util.c	43;"	d	file:
BLKPG_ADD_PARTITION	libmdadm/util.c	54;"	d	file:
BLKPG_DEL_PARTITION	libmdadm/util.c	55;"	d	file:
BLKPG_DEVNAMELTH	libmdadm/util.c	58;"	d	file:
BLKPG_VOLNAMELTH	libmdadm/util.c	59;"	d	file:
BLOCKSIZE	libmdadm/sha1.c	44;"	d	file:
BLOCK_ABORT	libmke2fs/ext2fs.h	295;"	d
BLOCK_CHANGED	libmke2fs/ext2fs.h	294;"	d
BLOCK_COUNT_DIND	libmke2fs/ext2fs.h	334;"	d
BLOCK_COUNT_IND	libmke2fs/ext2fs.h	333;"	d
BLOCK_COUNT_TIND	libmke2fs/ext2fs.h	335;"	d
BLOCK_COUNT_TRANSLATOR	libmke2fs/ext2fs.h	336;"	d
BLOCK_ERROR	libmke2fs/ext2fs.h	296;"	d
BLOCK_FLAG_APPEND	libmke2fs/ext2fs.h	322;"	d
BLOCK_FLAG_DATA_ONLY	libmke2fs/ext2fs.h	325;"	d
BLOCK_FLAG_DEPTH_TRAVERSE	libmke2fs/ext2fs.h	324;"	d
BLOCK_FLAG_HOLE	libmke2fs/ext2fs.h	323;"	d
BLOCK_FLAG_NO_LARGE	libmke2fs/ext2fs.h	328;"	d
BLOCK_FLAG_READ_ONLY	libmke2fs/ext2fs.h	326;"	d
BMAP_ALLOC	libmke2fs/ext2fs.h	517;"	d
BMAP_RET_UNINIT	libmke2fs/ext2fs.h	523;"	d
BMAP_SET	libmke2fs/ext2fs.h	518;"	d
BMAP_STATS	libmke2fs/ext2fs.h	1184;"	d
BM_SUPER_SIZE	libmdadm/super1.c	103;"	d	file:
BSD_DISKMAGIC	libmke2fs/mke2fs.c	453;"	d	file:
BSD_LABEL_OFFSET	libmke2fs/mke2fs.c	455;"	d	file:
BSD_MAGICDISK	libmke2fs/mke2fs.c	454;"	d	file:
BUILD	libmdadm/mdadm.h	/^	BUILD,$/;"	e	enum:mode
BUILD_BUG_ON	libmdadm/util.c	74;"	d	file:
BUILD_BUG_ON_ZERO	libmdadm/util.c	80;"	d	file:
BYFOUR	libmdadm/crc32.c	64;"	d	file:
BYFOUR	libmdadm/crc32.c	74;"	d	file:
Build	libmdadm/Build.c	/^int Build(char *mddev, struct mddev_dev *devlist,$/;"	f	signature:(char *mddev, struct mddev_dev *devlist, struct shape *s, struct context *c)
Build	libmdadm/mdadm.h	/^extern int Build(char *mddev, struct mddev_dev *devlist,$/;"	p	signature:(char *mddev, struct mddev_dev *devlist, struct shape *s, struct context *c)
C	libmdadm/sha1.h	/^  sha1_uint32 C;$/;"	m	struct:sha1_ctx	access:public
CHECK_MAGIC	libmke2fs/profile.c	141;"	d	file:
CHUNK_BIT_OFFSET	libmdadm/bitmap.h	129;"	d
CHUNK_BLOCK_MASK	libmdadm/bitmap.h	111;"	d
CHUNK_BLOCK_RATIO	libmdadm/bitmap.h	109;"	d
CHUNK_BLOCK_SHIFT	libmdadm/bitmap.h	110;"	d
CH_ARRAY_SIZE	libmdadm/super-intel.c	/^	CH_ARRAY_SIZE,$/;"	e	enum:imsm_reshape_type	file:
CH_MIGRATION	libmdadm/super-intel.c	/^	CH_MIGRATION,$/;"	e	enum:imsm_reshape_type	file:
CH_TAKEOVER	libmdadm/super-intel.c	/^	CH_TAKEOVER,$/;"	e	enum:imsm_reshape_type	file:
CLEAR_ARRAY	libmdadm/md_u.h	29;"	d
CONFFILE	libmdadm/config.c	68;"	d	file:
CONFFILE2	libmdadm/config.c	72;"	d	file:
CONFIGURED_DISK	libmdadm/super-intel.c	101;"	d	file:
CONTAINER_RESHAPE	libmdadm/mdadm.h	202;"	d
COUNTER	libmdadm/bitmap.h	96;"	d
COUNTER_BITS	libmdadm/bitmap.h	86;"	d
COUNTER_BIT_SHIFT	libmdadm/bitmap.h	87;"	d
COUNTER_BYTE_RATIO	libmdadm/bitmap.h	88;"	d
COUNTER_BYTE_SHIFT	libmdadm/bitmap.h	89;"	d
COUNTER_MAX	libmdadm/bitmap.h	93;"	d
CREATE	libmdadm/mdadm.h	/^	CREATE,$/;"	e	enum:mode
CREATE_ABORTED	libmdadm/mdadm_errcode.h	/^	CREATE_ABORTED,$/;"	e	enum:__anon5
CREATE_ADD_NEW_DISK_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_ADD_NEW_DISK_FAIL,$/;"	e	enum:__anon5
CREATE_ADD_TO_SUPER_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_ADD_TO_SUPER_FAIL,$/;"	e	enum:__anon5
CREATE_BITMAP_CHUNK_NOT_SUPPORT	libmdadm/mdadm_errcode.h	/^	CREATE_BITMAP_CHUNK_NOT_SUPPORT,$/;"	e	enum:__anon5
CREATE_BITMAP_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_BITMAP_FAIL,$/;"	e	enum:__anon5
CREATE_BITMAP_NOT_MEANINGFUL	libmdadm/mdadm_errcode.h	/^	CREATE_BITMAP_NOT_MEANINGFUL,$/;"	e	enum:__anon5
CREATE_BITMAP_NOT_SUPPORT	libmdadm/mdadm_errcode.h	/^	CREATE_BITMAP_NOT_SUPPORT,$/;"	e	enum:__anon5
CREATE_DEVS_TOO_LARGE	libmdadm/mdadm_errcode.h	/^	CREATE_DEVS_TOO_LARGE,$/;"	e	enum:__anon5
CREATE_FREE_SPACE_SMALL_THAN_GIVEN	libmdadm/mdadm_errcode.h	/^	CREATE_FREE_SPACE_SMALL_THAN_GIVEN,$/;"	e	enum:__anon5
CREATE_FREE_SUPER_TYPE_OBJ_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_FREE_SUPER_TYPE_OBJ_FAIL,$/;"	e	enum:__anon5
CREATE_GEOMETRY_INVALID	libmdadm/mdadm_errcode.h	/^	CREATE_GEOMETRY_INVALID,$/;"	e	enum:__anon5
CREATE_INIT_SUPER_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_INIT_SUPER_FAIL,$/;"	e	enum:__anon5
CREATE_LIST_DEVS_MORE_THAN_ARRAY_NEEDED	libmdadm/mdadm_errcode.h	/^	CREATE_LIST_DEVS_MORE_THAN_ARRAY_NEEDED,$/;"	e	enum:__anon5
CREATE_MDDEV_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_MDDEV_FAIL,$/;"	e	enum:__anon5
CREATE_MDDEV_INUSE	libmdadm/mdadm_errcode.h	/^	CREATE_MDDEV_INUSE,$/;"	e	enum:__anon5
CREATE_MDDEV_UNSET	libmdadm/mdadm_errcode.h	/^	CREATE_MDDEV_UNSET,$/;"	e	enum:__anon5
CREATE_MDNUM_ILLEGAL	libmdadm/mdadm_errcode.h	/^	CREATE_MDNUM_ILLEGAL,$/;"	e	enum:__anon5
CREATE_MISSING_DEVS_NOT_SUPPORT	libmdadm/mdadm_errcode.h	/^	CREATE_MISSING_DEVS_NOT_SUPPORT,$/;"	e	enum:__anon5
CREATE_NOT_BLOCK_DEVICE	libmdadm/mdadm_errcode.h	/^	CREATE_NOT_BLOCK_DEVICE,$/;"	e	enum:__anon5
CREATE_NO_FREE_SPACE	libmdadm/mdadm_errcode.h	/^	CREATE_NO_FREE_SPACE,$/;"	e	enum:__anon5
CREATE_OPEN_BITMAP_FILE_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_OPEN_BITMAP_FILE_FAIL,$/;"	e	enum:__anon5
CREATE_OPEN_CONTAINER_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_OPEN_CONTAINER_FAIL,$/;"	e	enum:__anon5
CREATE_RAID_ACTIVATION_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_ACTIVATION_FAIL,$/;"	e	enum:__anon5
CREATE_RAID_DEVS_NOT_ENOUGH	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_DEVS_NOT_ENOUGH,$/;"	e	enum:__anon5
CREATE_RAID_DEVS_NOT_EXIST_IN_LIST	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_DEVS_NOT_EXIST_IN_LIST,$/;"	e	enum:__anon5
CREATE_RAID_DEVS_OVER_256	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_DEVS_OVER_256,$/;"	e	enum:__anon5
CREATE_RAID_DEV_CANNOT_OPEN	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_DEV_CANNOT_OPEN,$/;"	e	enum:__anon5
CREATE_RAID_LEVEL_UNKNOWN	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_LEVEL_UNKNOWN,$/;"	e	enum:__anon5
CREATE_RAID_LEVEL_UNSET	libmdadm/mdadm_errcode.h	/^	CREATE_RAID_LEVEL_UNSET = 1,$/;"	e	enum:__anon5
CREATE_REQUIRE_NEWER_VERSION	libmdadm/mdadm_errcode.h	/^	CREATE_REQUIRE_NEWER_VERSION,$/;"	e	enum:__anon5
CREATE_SET_ARRAY_INFO_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_SET_ARRAY_INFO_FAIL,$/;"	e	enum:__anon5
CREATE_SET_BITMAP_FILE_FAIL	libmdadm/mdadm_errcode.h	/^	CREATE_SET_BITMAP_FILE_FAIL,$/;"	e	enum:__anon5
CREATE_SPARE_DEVS_NOT_SUPPORT	libmdadm/mdadm_errcode.h	/^	CREATE_SPARE_DEVS_NOT_SUPPORT,$/;"	e	enum:__anon5
CREATE_TOO_MANY_DEVS	libmdadm/mdadm_errcode.h	/^	CREATE_TOO_MANY_DEVS,$/;"	e	enum:__anon5
CREATE_UNSUITABLE_STYLE	libmdadm/mdadm_errcode.h	/^	CREATE_UNSUITABLE_STYLE, \/\/ This error may mean that partition's system id is not suitable. $/;"	e	enum:__anon5
CREATE_WITHOUT_GIVEN_SIZE_DRIVES	libmdadm/mdadm_errcode.h	/^	CREATE_WITHOUT_GIVEN_SIZE_DRIVES,$/;"	e	enum:__anon5
CheckBlockDevice	test_utils.cpp	/^bool CheckBlockDevice(const string& dev)$/;"	f	signature:(const string& dev)
CheckBlockDevice	test_utils.h	/^extern bool CheckBlockDevice(const string& dev);$/;"	p	signature:(const string& dev)
CheckDirectoryExist	test_utils.cpp	/^bool CheckDirectoryExist(const string& dev)$/;"	f	signature:(const string& dev)
CheckDirectoryExist	test_utils.h	/^extern bool CheckDirectoryExist(const string& dev);$/;"	p	signature:(const string& dev)
CheckFileExist	test_utils.cpp	/^bool CheckFileExist(const string& dev)$/;"	f	signature:(const string& dev)
CheckFileExist	test_utils.h	/^extern bool CheckFileExist(const string& dev);$/;"	p	signature:(const string& dev)
CheckFileSystem	RAIDManager.h	/^	bool CheckFileSystem();$/;"	p	class:RAIDManager	access:public	signature:()
ClearErrors	libmdadm/mdadm.h	1433;"	d
ClearFaults	libmdadm/mdadm.h	1434;"	d
Create	libmdadm/Create.c	/^int Create(struct supertype *st, char *mddev,$/;"	f	signature:(struct supertype *st, char *mddev, char *name, int *uuid, int subdevs, struct mddev_dev *devlist, struct shape *s, struct context *c, unsigned long long data_offset)
Create	libmdadm/mdadm.h	/^extern int Create(struct supertype *st, char *mddev,$/;"	p	signature:(struct supertype *st, char *mddev, char *name, int *uuid, int subdevs, struct mddev_dev *devlist, struct shape *s, struct context *c, unsigned long long data_offset)
CreateBitmap	libmdadm/bitmap.c	/^int CreateBitmap(char *filename, int force, char uuid[16],$/;"	f	signature:(char *filename, int force, char uuid[16], unsigned long chunksize, unsigned long daemon_sleep, unsigned long write_behind, unsigned long long array_size , int major)
CreateBitmap	libmdadm/mdadm.h	/^extern int CreateBitmap(char *filename, int force, char uuid[16],$/;"	p	signature:(char *filename, int force, char uuid[16], unsigned long chunksize, unsigned long daemon_sleep, unsigned long write_behind, unsigned long long array_size, int major)
CreateDefaultFolders	FilesystemManager.cpp	/^bool FilesystemManager::CreateDefaultFolders()$/;"	f	class:FilesystemManager	signature:()
CreateDefaultFolders	FilesystemManager.h	/^	bool CreateDefaultFolders();$/;"	p	class:FilesystemManager	access:public	signature:()
CreateDev	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
CreateRAID	RAIDManager.cpp	/^bool RAIDManager::CreateRAID(vector<string>& vDevList, int level, string& strMDName)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList, int level, string& strMDName)
CreateRAID	RAIDManager.cpp	/^int RAIDManager::CreateRAID(const int& mdnum, string& mddev, vector<string>& vDevList, int level)$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, vector<string>& vDevList, int level)
CreateRAID	RAIDManager.cpp	/^int RAIDManager::CreateRAID(const string& mddev, vector<string>& vDevList, int level)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList, int level)
CreateRAID	RAIDManager.h	/^	bool CreateRAID(vector<string>& vDevList, int level, string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(vector<string>& vDevList, int level, string& strMDName)
CreateRAID	RAIDManager.h	/^	int CreateRAID(const int& mdnum, string& mddev, vector<string>& vDevList, int level);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, vector<string>& vDevList, int level)
CreateRAID	RAIDManager.h	/^	int CreateRAID(const string& mddev, vector<string>& vDevList, int level);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList, int level)
CriticalSection	test_utils.h	/^	CriticalSection()$/;"	f	class:CriticalSection	access:public	signature:()
CriticalSection	test_utils.h	/^class CriticalSection {$/;"	c
CriticalSection::CriticalSection	test_utils.h	/^	CriticalSection()$/;"	f	class:CriticalSection	access:public	signature:()
CriticalSection::Lock	test_utils.h	/^	void Lock() {$/;"	f	class:CriticalSection	access:public	signature:()
CriticalSection::Unlock	test_utils.h	/^	void Unlock() {$/;"	f	class:CriticalSection	access:public	signature:()
CriticalSection::m_iLock	test_utils.h	/^	int m_iLock;$/;"	m	class:CriticalSection	access:private
CriticalSection::~CriticalSection	test_utils.h	/^	~CriticalSection() { m_iLock = 0; }$/;"	f	class:CriticalSection	access:public	signature:()
CriticalSectionLock	test_utils.h	/^	CriticalSectionLock();$/;"	p	class:CriticalSectionLock	access:private	signature:()
CriticalSectionLock	test_utils.h	/^	CriticalSectionLock(CriticalSection *cs)$/;"	f	class:CriticalSectionLock	access:public	signature:(CriticalSection *cs)
CriticalSectionLock	test_utils.h	/^class CriticalSectionLock {$/;"	c
CriticalSectionLock::CriticalSectionLock	test_utils.h	/^	CriticalSectionLock();$/;"	p	class:CriticalSectionLock	access:private	signature:()
CriticalSectionLock::CriticalSectionLock	test_utils.h	/^	CriticalSectionLock(CriticalSection *cs)$/;"	f	class:CriticalSectionLock	access:public	signature:(CriticalSection *cs)
CriticalSectionLock::m_cs	test_utils.h	/^	CriticalSection *m_cs;$/;"	m	class:CriticalSectionLock	access:private
CriticalSectionLock::~CriticalSectionLock	test_utils.h	/^	~CriticalSectionLock() {$/;"	f	class:CriticalSectionLock	access:public	signature:()
D	libmdadm/sha1.h	/^  sha1_uint32 D;$/;"	m	struct:sha1_ctx	access:public
DBLIST_ABORT	libmke2fs/ext2fs.h	150;"	d
DDF_2CONCAT	libmdadm/super-ddf.c	139;"	d	file:
DDF_2MIRRORED	libmdadm/super-ddf.c	138;"	d	file:
DDF_2SPANNED	libmdadm/super-ddf.c	140;"	d	file:
DDF_2STRIPED	libmdadm/super-ddf.c	137;"	d	file:
DDF_Active_in_VD	libmdadm/super-ddf.c	252;"	d	file:
DDF_BBM_LOG_MAGIC	libmdadm/super-ddf.c	152;"	d	file:
DDF_CONCAT	libmdadm/super-ddf.c	114;"	d	file:
DDF_CONTAINER	libmdadm/super-ddf.c	49;"	d	file:
DDF_CONTROLLER_MAGIC	libmdadm/super-ddf.c	144;"	d	file:
DDF_Enforce_Groups	libmdadm/super-ddf.c	295;"	d	file:
DDF_Failed	libmdadm/super-ddf.c	266;"	d	file:
DDF_Forced_PD_GUID	libmdadm/super-ddf.c	251;"	d	file:
DDF_Foreign	libmdadm/super-ddf.c	255;"	d	file:
DDF_GUID_LEN	libmdadm/super-ddf.c	154;"	d	file:
DDF_Global_Spare	libmdadm/super-ddf.c	253;"	d	file:
DDF_HEADER_ANCHOR	libmdadm/super-ddf.c	209;"	d	file:
DDF_HEADER_MAGIC	libmdadm/super-ddf.c	143;"	d	file:
DDF_HEADER_PRIMARY	libmdadm/super-ddf.c	210;"	d	file:
DDF_HEADER_SECONDARY	libmdadm/super-ddf.c	211;"	d	file:
DDF_INVALID_LEVEL	libmdadm/super-ddf.c	590;"	d	file:
DDF_Interface_FC	libmdadm/super-ddf.c	262;"	d	file:
DDF_Interface_SAS	libmdadm/super-ddf.c	260;"	d	file:
DDF_Interface_SATA	libmdadm/super-ddf.c	261;"	d	file:
DDF_Interface_SCSI	libmdadm/super-ddf.c	259;"	d	file:
DDF_Interface_mask	libmdadm/super-ddf.c	258;"	d	file:
DDF_JBOD	libmdadm/super-ddf.c	113;"	d	file:
DDF_Legacy	libmdadm/super-ddf.c	256;"	d	file:
DDF_Missing	libmdadm/super-ddf.c	271;"	d	file:
DDF_NOTFOUND	libmdadm/super-ddf.c	48;"	d	file:
DDF_NO_SECONDARY	libmdadm/super-ddf.c	591;"	d	file:
DDF_Online	libmdadm/super-ddf.c	265;"	d	file:
DDF_Owner_Valid	libmdadm/super-ddf.c	297;"	d	file:
DDF_PHYS_DATA_MAGIC	libmdadm/super-ddf.c	146;"	d	file:
DDF_PHYS_RECORDS_MAGIC	libmdadm/super-ddf.c	145;"	d	file:
DDF_RAID0	libmdadm/super-ddf.c	107;"	d	file:
DDF_RAID0_SIMPLE	libmdadm/super-ddf.c	120;"	d	file:
DDF_RAID1	libmdadm/super-ddf.c	108;"	d	file:
DDF_RAID1E	libmdadm/super-ddf.c	112;"	d	file:
DDF_RAID1E_ADJACENT	libmdadm/super-ddf.c	133;"	d	file:
DDF_RAID1E_OFFSET	libmdadm/super-ddf.c	134;"	d	file:
DDF_RAID1_MULTI	libmdadm/super-ddf.c	122;"	d	file:
DDF_RAID1_SIMPLE	libmdadm/super-ddf.c	121;"	d	file:
DDF_RAID3	libmdadm/super-ddf.c	109;"	d	file:
DDF_RAID3_0	libmdadm/super-ddf.c	123;"	d	file:
DDF_RAID3_N	libmdadm/super-ddf.c	124;"	d	file:
DDF_RAID4	libmdadm/super-ddf.c	110;"	d	file:
DDF_RAID4_0	libmdadm/super-ddf.c	125;"	d	file:
DDF_RAID4_N	libmdadm/super-ddf.c	126;"	d	file:
DDF_RAID5	libmdadm/super-ddf.c	111;"	d	file:
DDF_RAID5E	libmdadm/super-ddf.c	115;"	d	file:
DDF_RAID5EE	libmdadm/super-ddf.c	116;"	d	file:
DDF_RAID5_0_RESTART	libmdadm/super-ddf.c	128;"	d	file:
DDF_RAID5_N_CONTINUE	libmdadm/super-ddf.c	131;"	d	file:
DDF_RAID5_N_RESTART	libmdadm/super-ddf.c	130;"	d	file:
DDF_RAID6	libmdadm/super-ddf.c	117;"	d	file:
DDF_RAID6_0_RESTART	libmdadm/super-ddf.c	129;"	d	file:
DDF_REVISION_0	libmdadm/super-ddf.c	155;"	d	file:
DDF_REVISION_2	libmdadm/super-ddf.c	156;"	d	file:
DDF_ReadErrors	libmdadm/super-ddf.c	270;"	d	file:
DDF_Rebuilding	libmdadm/super-ddf.c	267;"	d	file:
DDF_SAFE_MODE_DELAY	libmdadm/super-ddf.c	/^static const int DDF_SAFE_MODE_DELAY = 4000;$/;"	v	file:
DDF_SMART	libmdadm/super-ddf.c	269;"	d	file:
DDF_SPARE_ASSIGN_MAGIC	libmdadm/super-ddf.c	149;"	d	file:
DDF_Shared	libmdadm/super-ddf.c	294;"	d	file:
DDF_Spare	libmdadm/super-ddf.c	254;"	d	file:
DDF_Transition	libmdadm/super-ddf.c	268;"	d	file:
DDF_UNUSED_BVD	libmdadm/super-ddf.c	993;"	d	file:
DDF_Unicode	libmdadm/super-ddf.c	296;"	d	file:
DDF_VD_CONF_MAGIC	libmdadm/super-ddf.c	148;"	d	file:
DDF_VENDOR_LOG_MAGIC	libmdadm/super-ddf.c	151;"	d	file:
DDF_VIRT_RECORDS_MAGIC	libmdadm/super-ddf.c	147;"	d	file:
DDF_VU_CONF_MAGIC	libmdadm/super-ddf.c	150;"	d	file:
DDF_access_blocked	libmdadm/super-ddf.c	321;"	d	file:
DDF_access_mask	libmdadm/super-ddf.c	318;"	d	file:
DDF_access_ro	libmdadm/super-ddf.c	320;"	d	file:
DDF_access_rw	libmdadm/super-ddf.c	319;"	d	file:
DDF_cache_ifnobatt	libmdadm/super-ddf.c	372;"	d	file:
DDF_cache_radaptive	libmdadm/super-ddf.c	371;"	d	file:
DDF_cache_rallowed	libmdadm/super-ddf.c	374;"	d	file:
DDF_cache_readahead	libmdadm/super-ddf.c	370;"	d	file:
DDF_cache_wadaptive	libmdadm/super-ddf.c	369;"	d	file:
DDF_cache_wallowed	libmdadm/super-ddf.c	373;"	d	file:
DDF_cache_writeback	libmdadm/super-ddf.c	368;"	d	file:
DDF_init_full	libmdadm/super-ddf.c	316;"	d	file:
DDF_init_not	libmdadm/super-ddf.c	313;"	d	file:
DDF_init_quick	libmdadm/super-ddf.c	314;"	d	file:
DDF_initstate_mask	libmdadm/super-ddf.c	312;"	d	file:
DDF_spare_active	libmdadm/super-ddf.c	394;"	d	file:
DDF_spare_affinity	libmdadm/super-ddf.c	395;"	d	file:
DDF_spare_dedicated	libmdadm/super-ddf.c	392;"	d	file:
DDF_spare_revertible	libmdadm/super-ddf.c	393;"	d	file:
DDF_state_degraded	libmdadm/super-ddf.c	302;"	d	file:
DDF_state_deleted	libmdadm/super-ddf.c	303;"	d	file:
DDF_state_failed	libmdadm/super-ddf.c	305;"	d	file:
DDF_state_inconsistent	libmdadm/super-ddf.c	309;"	d	file:
DDF_state_mask	libmdadm/super-ddf.c	300;"	d	file:
DDF_state_missing	libmdadm/super-ddf.c	304;"	d	file:
DDF_state_morphing	libmdadm/super-ddf.c	308;"	d	file:
DDF_state_optimal	libmdadm/super-ddf.c	301;"	d	file:
DDF_state_part_optimal	libmdadm/super-ddf.c	306;"	d	file:
DECADE	libmdadm/super-ddf.c	42;"	d	file:
DEFAULT_BITMAP_CHUNK	libmdadm/mdadm.h	67;"	d
DEFAULT_BITMAP_DELAY	libmdadm/mdadm.h	68;"	d
DEFAULT_CHUNK	libmdadm/mdadm.h	66;"	d
DEFAULT_MAX_WRITE_BEHIND	libmdadm/mdadm.h	69;"	d
DETAIL_MDDEV_CANNOT_GET_DETAIL	libmdadm/mdadm_errcode.h	/^	DETAIL_MDDEV_CANNOT_GET_DETAIL,$/;"	e	enum:__anon5
DETAIL_MDDEV_ILLEGAL	libmdadm/mdadm_errcode.h	/^	DETAIL_MDDEV_ILLEGAL,$/;"	e	enum:__anon5
DETAIL_MDDEV_OPEN_FAIL	libmdadm/mdadm_errcode.h	/^	DETAIL_MDDEV_OPEN_FAIL = 101,$/;"	e	enum:__anon5
DETAIL_MDDEV_REQUIRE_NEWER_DRIVER	libmdadm/mdadm_errcode.h	/^	DETAIL_MDDEV_REQUIRE_NEWER_DRIVER,$/;"	e	enum:__anon5
DEV_BOOTABLE	libmdadm/super-intel.c	169;"	d	file:
DEV_BOOT_DEVICE	libmdadm/super-intel.c	170;"	d	file:
DEV_CLONE_MAN_SYNC	libmdadm/super-intel.c	180;"	d	file:
DEV_CLONE_N_GO	libmdadm/super-intel.c	179;"	d	file:
DEV_CNG_MASTER_DISK_NUM	libmdadm/super-intel.c	181;"	d	file:
DEV_CURRENTLY_HIDDEN	libmdadm/super-intel.c	175;"	d	file:
DEV_HIDDEN_AT_BOOT	libmdadm/super-intel.c	174;"	d	file:
DEV_LAST_SHUTDOWN_DIRTY	libmdadm/super-intel.c	173;"	d	file:
DEV_MAP_STATE_UNINIT	libmdadm/super-intel.c	177;"	d	file:
DEV_NO_AUTO_RECOVERY	libmdadm/super-intel.c	178;"	d	file:
DEV_READ_COALESCING	libmdadm/super-intel.c	171;"	d	file:
DEV_VERIFY_AND_FIX	libmdadm/super-intel.c	176;"	d	file:
DEV_WRITE_COALESCING	libmdadm/super-intel.c	172;"	d	file:
DIRENT_ABORT	libmke2fs/ext2fs.h	424;"	d
DIRENT_CHANGED	libmke2fs/ext2fs.h	423;"	d
DIRENT_DELETED_FILE	libmke2fs/ext2fs.h	437;"	d
DIRENT_DOT_DOT_FILE	libmke2fs/ext2fs.h	435;"	d
DIRENT_DOT_FILE	libmke2fs/ext2fs.h	434;"	d
DIRENT_ERROR	libmke2fs/ext2fs.h	425;"	d
DIRENT_FLAG_INCLUDE_EMPTY	libmke2fs/ext2fs.h	431;"	d
DIRENT_FLAG_INCLUDE_REMOVED	libmke2fs/ext2fs.h	432;"	d
DIRENT_OTHER_FILE	libmke2fs/ext2fs.h	436;"	d
DISCARD_STEP_MB	libmke2fs/mke2fs.c	67;"	d	file:
DISK_ADD	libmdadm/super-intel.c	/^	DISK_ADD$/;"	e	enum:action	file:
DISK_REMOVE	libmdadm/super-intel.c	/^	DISK_REMOVE = 1,$/;"	e	enum:action	file:
DISK_TYPE_ESATA	RAIDManager.h	/^	DISK_TYPE_ESATA,$/;"	e	enum:eDiskType
DISK_TYPE_ISCSI	RAIDManager.h	/^	DISK_TYPE_ISCSI,$/;"	e	enum:eDiskType
DISK_TYPE_NFS	RAIDManager.h	/^	DISK_TYPE_NFS$/;"	e	enum:eDiskType
DISK_TYPE_SATA	RAIDManager.h	/^	DISK_TYPE_SATA,$/;"	e	enum:eDiskType
DISK_TYPE_UNKNOWN	RAIDManager.h	/^	DISK_TYPE_UNKNOWN = -1,$/;"	e	enum:eDiskType
DO1	libmdadm/crc32.c	238;"	d	file:
DO8	libmdadm/crc32.c	239;"	d	file:
DOBIG32	libmdadm/crc32.c	322;"	d	file:
DOBIG4	libmdadm/crc32.c	319;"	d	file:
DOLIT32	libmdadm/crc32.c	282;"	d	file:
DOLIT4	libmdadm/crc32.c	279;"	d	file:
DS_BLOCKED	libmdadm/mdadm.h	249;"	d
DS_FAULTY	libmdadm/mdadm.h	245;"	d
DS_INSYNC	libmdadm/mdadm.h	246;"	d
DS_REMOVE	libmdadm/mdadm.h	250;"	d
DS_SPARE	libmdadm/mdadm.h	248;"	d
DS_UNBLOCK	libmdadm/mdadm.h	251;"	d
DS_WRITE_MOSTLY	libmdadm/mdadm.h	247;"	d
DYNAMIC_CRC_TABLE	libmdadm/crc32.c	45;"	d	file:
DefaultAltConfDir	libmdadm/config.c	/^char DefaultAltConfDir[] = CONFFILE2 ".d";$/;"	v
DefaultAltConfFile	libmdadm/config.c	/^char DefaultAltConfFile[] = CONFFILE2;$/;"	v
DefaultConfDir	libmdadm/config.c	/^char DefaultConfDir[] = CONFFILE ".d";$/;"	v
DefaultConfFile	libmdadm/config.c	/^char DefaultConfFile[] = CONFFILE;$/;"	v
DeleteRAID	RAIDManager.cpp	/^bool RAIDManager::DeleteRAID(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
DeleteRAID	RAIDManager.h	/^	bool DeleteRAID(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
Detail	libmdadm/Detail.c	/^int Detail(char *dev, struct context *c)$/;"	f	signature:(char *dev, struct context *c)
Detail	libmdadm/mdadm.h	/^extern int Detail(char *dev, struct context *c);$/;"	p	signature:(char *dev, struct context *c)
Detail_Platform	libmdadm/Detail.c	/^int Detail_Platform(struct superswitch *ss, int scan, int verbose, int _export, char *controller_path)$/;"	f	signature:(struct superswitch *ss, int scan, int verbose, int _export, char *controller_path)
Detail_Platform	libmdadm/mdadm.h	/^extern int Detail_Platform(struct superswitch *ss, int scan, int verbose, int _export, char *controller_path);$/;"	p	signature:(struct superswitch *ss, int scan, int verbose, int _export, char *controller_path)
Detail_ToArrayDetail	libmdadm/Detail.c	/^int Detail_ToArrayDetail(const char *dev, struct context *c, struct array_detail *ad)$/;"	f	signature:(const char *dev, struct context *c, struct array_detail *ad)
Detail_ToArrayDetail	libmdadm/mdadm.h	/^extern int Detail_ToArrayDetail(const char *dev, struct context *c, struct array_detail *ad);$/;"	p	signature:(const char *dev, struct context *c, struct array_detail *ad)
Devices	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
DoFileSystemRecovery	RAIDManager.h	/^	bool DoFileSystemRecovery();$/;"	p	class:RAIDManager	access:public	signature:()
Dump	FilesystemManager.cpp	/^void FilesystemManager::Dump()$/;"	f	class:FilesystemManager	signature:()
Dump	FilesystemManager.h	/^	void Dump();$/;"	p	class:FilesystemManager	access:public	signature:()
Dump	RAIDManager.cpp	/^void RAIDManager::Dump()$/;"	f	class:RAIDManager	signature:()
Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:RAIDInfo	access:public	signature:()
Dump	RAIDManager.h	/^	void Dump();$/;"	p	class:RAIDManager	access:public	signature:()
Dump_metadata	libmdadm/Dump.c	/^int Dump_metadata(char *dev, char *dir, struct context *c,$/;"	f	signature:(char *dev, char *dir, struct context *c, struct supertype *st)
Dump_metadata	libmdadm/mdadm.h	/^extern int Dump_metadata(char *dev, char *dir, struct context *c,$/;"	p	signature:(char *dev, char *dir, struct context *c, struct supertype *st)
E	libmdadm/sha1.h	/^  sha1_uint32 E;$/;"	m	struct:sha1_ctx	access:public
EFI_GUID	libmdadm/platform-intel.c	336;"	d	file:
EOL	libmke2fs/profile.c	892;"	d	file:
ERROR_TABLE_BASE_prof	libmke2fs/prof_err.h	45;"	d
EXAMINE_MEM_ALLOC_FAIL	libmdadm/mdadm_errcode.h	/^	EXAMINE_MEM_ALLOC_FAIL,$/;"	e	enum:__anon5
EXAMINE_NO_MD_SUPERBLOCK	libmdadm/mdadm_errcode.h	/^	EXAMINE_NO_MD_SUPERBLOCK,$/;"	e	enum:__anon5
EXAMINE_NULL_POINTER	libmdadm/mdadm_errcode.h	/^	EXAMINE_NULL_POINTER$/;"	e	enum:__anon5
EXAMINE_OPEN_DEV_FAIL	libmdadm/mdadm_errcode.h	/^	EXAMINE_OPEN_DEV_FAIL = 601,$/;"	e	enum:__anon5
EXT2FS_ATTR	libmke2fs/ext2fs.h	16;"	d
EXT2FS_ATTR	libmke2fs/ext2fs.h	18;"	d
EXT2FS_B2C	libmke2fs/ext2fs.h	612;"	d
EXT2FS_BMAP64_AUTODIR	libmke2fs/ext2fs.h	289;"	d
EXT2FS_BMAP64_BITARRAY	libmke2fs/ext2fs.h	287;"	d
EXT2FS_BMAP64_RBTREE	libmke2fs/ext2fs.h	288;"	d
EXT2FS_C2B	libmke2fs/ext2fs.h	614;"	d
EXT2FS_CLUSTER_MASK	libmke2fs/ext2fs.h	611;"	d
EXT2FS_CLUSTER_RATIO	libmke2fs/ext2fs.h	610;"	d
EXT2FS_COMPRESSED_BLKADDR	libmke2fs/ext2fs.h	542;"	d
EXT2FS_MARK_ERROR	libmke2fs/ext2fs.h	105;"	d
EXT2FS_MAX_NESTED_LINKS	libmke2fs/ext2fsP.h	14;"	d
EXT2FS_NUM_B2C	libmke2fs/ext2fs.h	616;"	d
EXT2FS_TEST_ERROR	libmke2fs/ext2fs.h	107;"	d
EXT2FS_UNMARK_ERROR	libmke2fs/ext2fs.h	106;"	d
EXT2_CHECK_MAGIC	libmke2fs/ext2fs.h	535;"	d
EXT2_DFL_CHECKINTERVAL	libmke2fs/mke2fs.c	2404;"	d	file:
EXT2_DFL_CHECKINTERVAL	libmke2fs/mke2fs.c	2406;"	d	file:
EXT2_DIRBLOCK_V2_STRUCT	libmke2fs/ext2fs.h	418;"	d
EXT2_EXTENT_CURRENT	libmke2fs/ext2fs.h	367;"	d
EXT2_EXTENT_DELETE_KEEP_EMPTY	libmke2fs/ext2fs.h	392;"	d
EXT2_EXTENT_DOWN	libmke2fs/ext2fs.h	380;"	d
EXT2_EXTENT_DOWN_AND_LAST	libmke2fs/ext2fs.h	381;"	d
EXT2_EXTENT_FIRST_SIB	libmke2fs/ext2fs.h	371;"	d
EXT2_EXTENT_FLAGS_LEAF	libmke2fs/ext2fs.h	350;"	d
EXT2_EXTENT_FLAGS_SECOND_VISIT	libmke2fs/ext2fs.h	352;"	d
EXT2_EXTENT_FLAGS_UNINIT	libmke2fs/ext2fs.h	351;"	d
EXT2_EXTENT_INSERT_AFTER	libmke2fs/ext2fs.h	386;"	d
EXT2_EXTENT_INSERT_NOSPLIT	libmke2fs/ext2fs.h	387;"	d
EXT2_EXTENT_LAST_LEAF	libmke2fs/ext2fs.h	370;"	d
EXT2_EXTENT_LAST_SIB	libmke2fs/ext2fs.h	372;"	d
EXT2_EXTENT_MOVE_MASK	libmke2fs/ext2fs.h	368;"	d
EXT2_EXTENT_NEXT	libmke2fs/ext2fs.h	377;"	d
EXT2_EXTENT_NEXT_LEAF	libmke2fs/ext2fs.h	375;"	d
EXT2_EXTENT_NEXT_SIB	libmke2fs/ext2fs.h	373;"	d
EXT2_EXTENT_PREV	libmke2fs/ext2fs.h	378;"	d
EXT2_EXTENT_PREV_LEAF	libmke2fs/ext2fs.h	376;"	d
EXT2_EXTENT_PREV_SIB	libmke2fs/ext2fs.h	374;"	d
EXT2_EXTENT_ROOT	libmke2fs/ext2fs.h	369;"	d
EXT2_EXTENT_SET_BMAP_UNINIT	libmke2fs/ext2fs.h	397;"	d
EXT2_EXTENT_UP	libmke2fs/ext2fs.h	379;"	d
EXT2_FILE_BUF_DIRTY	libmke2fs/ext2fs.h	161;"	d
EXT2_FILE_BUF_VALID	libmke2fs/ext2fs.h	162;"	d
EXT2_FILE_CREATE	libmke2fs/ext2fs.h	157;"	d
EXT2_FILE_MASK	libmke2fs/ext2fs.h	159;"	d
EXT2_FILE_WRITE	libmke2fs/ext2fs.h	156;"	d
EXT2_FIRST_INODE	libmke2fs/ext2fs.h	113;"	d
EXT2_FLAG_64BITS	libmke2fs/ext2fs.h	190;"	d
EXT2_FLAG_BB_DIRTY	libmke2fs/ext2fs.h	178;"	d
EXT2_FLAG_CHANGED	libmke2fs/ext2fs.h	174;"	d
EXT2_FLAG_DIRECT_IO	libmke2fs/ext2fs.h	192;"	d
EXT2_FLAG_DIRTY	libmke2fs/ext2fs.h	175;"	d
EXT2_FLAG_EXCLUSIVE	libmke2fs/ext2fs.h	187;"	d
EXT2_FLAG_FLUSH_NO_SYNC	libmke2fs/ext2fs.h	629;"	d
EXT2_FLAG_FORCE	libmke2fs/ext2fs.h	183;"	d
EXT2_FLAG_IB_DIRTY	libmke2fs/ext2fs.h	177;"	d
EXT2_FLAG_IMAGE_FILE	libmke2fs/ext2fs.h	186;"	d
EXT2_FLAG_JOURNAL_DEV_OK	libmke2fs/ext2fs.h	185;"	d
EXT2_FLAG_MASTER_SB_ONLY	libmke2fs/ext2fs.h	182;"	d
EXT2_FLAG_NOFREE_ON_ERROR	libmke2fs/ext2fs.h	189;"	d
EXT2_FLAG_PRINT_PROGRESS	libmke2fs/ext2fs.h	191;"	d
EXT2_FLAG_RW	libmke2fs/ext2fs.h	173;"	d
EXT2_FLAG_SKIP_MMP	libmke2fs/ext2fs.h	193;"	d
EXT2_FLAG_SOFTSUPP_FEATURES	libmke2fs/ext2fs.h	188;"	d
EXT2_FLAG_SUPER_ONLY	libmke2fs/ext2fs.h	184;"	d
EXT2_FLAG_SWAP_BYTES	libmke2fs/ext2fs.h	179;"	d
EXT2_FLAG_SWAP_BYTES_READ	libmke2fs/ext2fs.h	180;"	d
EXT2_FLAG_SWAP_BYTES_WRITE	libmke2fs/ext2fs.h	181;"	d
EXT2_FLAG_VALID	libmke2fs/ext2fs.h	176;"	d
EXT2_ICOUNT_OPT_INCREMENT	libmke2fs/ext2fs.h	510;"	d
EXT2_I_SIZE	libmke2fs/ext2fs.h	505;"	d
EXT2_LIB_CURRENT_REV	libmke2fs/ext2fs.h	46;"	d
EXT2_LIB_FEATURE_COMPAT_SUPP	libmke2fs/ext2fs.h	548;"	d
EXT2_LIB_FEATURE_INCOMPAT_SUPP	libmke2fs/ext2fs.h	563;"	d
EXT2_LIB_FEATURE_INCOMPAT_SUPP	libmke2fs/ext2fs.h	573;"	d
EXT2_LIB_FEATURE_RO_COMPAT_SUPP	libmke2fs/ext2fs.h	583;"	d
EXT2_LIB_FEATURE_RO_COMPAT_SUPP	libmke2fs/ext2fs.h	592;"	d
EXT2_LIB_SOFTSUPP_INCOMPAT	libmke2fs/ext2fs.h	605;"	d
EXT2_LIB_SOFTSUPP_RO_COMPAT	libmke2fs/ext2fs.h	606;"	d
EXT2_MF_BUSY	libmke2fs/ext2fs.h	460;"	d
EXT2_MF_ISROOT	libmke2fs/ext2fs.h	457;"	d
EXT2_MF_MOUNTED	libmke2fs/ext2fs.h	456;"	d
EXT2_MF_READONLY	libmke2fs/ext2fs.h	458;"	d
EXT2_MF_SWAP	libmke2fs/ext2fs.h	459;"	d
EXT2_MKJOURNAL_LAZYINIT	libmke2fs/ext2fs.h	205;"	d
EXT2_MKJOURNAL_NO_MNT_CHECK	libmke2fs/ext2fs.h	206;"	d
EXT2_MKJOURNAL_V1_SUPER	libmke2fs/ext2fs.h	204;"	d
EXT2_NEW_INODE_FL	libmke2fs/ext2fs.h	199;"	d
EXT2_QSORT_TYPE	libmke2fs/ext2fs.h	100;"	d
EXT2_QSORT_TYPE	libmke2fs/ext2fs.h	98;"	d
EXT2_SEEK_CUR	libmke2fs/ext2fs.h	167;"	d
EXT2_SEEK_END	libmke2fs/ext2fs.h	168;"	d
EXT2_SEEK_SET	libmke2fs/ext2fs.h	166;"	d
EXT2_SF_BAD_EXTRA_BYTES	libmke2fs/ext2fs.h	449;"	d
EXT2_SF_BAD_INODE_BLK	libmke2fs/ext2fs.h	448;"	d
EXT2_SF_CHK_BADBLOCKS	libmke2fs/ext2fs.h	447;"	d
EXT2_SF_DO_LAZY	libmke2fs/ext2fs.h	451;"	d
EXT2_SF_SKIP_MISSING_ITABLE	libmke2fs/ext2fs.h	450;"	d
Examine	libmdadm/Examine.c	/^int Examine(struct mddev_dev *devlist,$/;"	f	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *forcest)
Examine	libmdadm/mdadm.h	/^extern int Examine(struct mddev_dev *devlist, struct context *c,$/;"	p	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *forcest)
ExamineBadblocks	libmdadm/Examine.c	/^int ExamineBadblocks(char *devname, int brief, struct supertype *forcest)$/;"	f	signature:(char *devname, int brief, struct supertype *forcest)
ExamineBadblocks	libmdadm/mdadm.h	/^extern int ExamineBadblocks(char *devname, int brief, struct supertype *forcest);$/;"	p	signature:(char *devname, int brief, struct supertype *forcest)
ExamineBitmap	libmdadm/bitmap.c	/^int ExamineBitmap(char *filename, int brief, struct supertype *st)$/;"	f	signature:(char *filename, int brief, struct supertype *st)
ExamineBitmap	libmdadm/mdadm.h	/^extern int ExamineBitmap(char *filename, int brief, struct supertype *st);$/;"	p	signature:(char *filename, int brief, struct supertype *st)
Examine_ToResult	libmdadm/Examine.c	/^int Examine_ToResult(struct mddev_dev *devlist,$/;"	f	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *forcest, struct examine_result *result)
Examine_ToResult	libmdadm/mdadm.h	/^extern int Examine_ToResult(struct mddev_dev *devlist,$/;"	p	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *forcest, struct examine_result *result)
F1	libmdadm/sha1.c	276;"	d	file:
F2	libmdadm/sha1.c	277;"	d	file:
F3	libmdadm/sha1.c	278;"	d	file:
F4	libmdadm/sha1.c	279;"	d	file:
FAILED_DISK	libmdadm/super-intel.c	102;"	d	file:
FAILED_SLOTS_DIR	libmdadm/mdadm.h	101;"	d
FAR	libmdadm/crc32.c	51;"	d	file:
FOREIGN	libmdadm/mdadm.h	1325;"	d
FTW	libmdadm/mdadm.h	/^  struct FTW {};$/;"	s
FTW_PHYS	libmdadm/mdadm.h	1108;"	d
FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::FilesystemManager()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::FilesystemManager(const string& dev)$/;"	f	class:FilesystemManager	signature:(const string& dev)
FilesystemManager	FilesystemManager.h	/^	FilesystemManager();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager	FilesystemManager.h	/^	FilesystemManager(const string& dev);$/;"	p	class:FilesystemManager	access:public	signature:(const string& dev)
FilesystemManager	FilesystemManager.h	/^class FilesystemManager: public  AprThreadWorker$/;"	c	inherits:AprThreadWorker,FilesystemManager
FilesystemManager::CreateDefaultFolders	FilesystemManager.cpp	/^bool FilesystemManager::CreateDefaultFolders()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::CreateDefaultFolders	FilesystemManager.h	/^	bool CreateDefaultFolders();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::Dump	FilesystemManager.cpp	/^void FilesystemManager::Dump()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::Dump	FilesystemManager.h	/^	void Dump();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::FilesystemManager()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::FilesystemManager(const string& dev)$/;"	f	class:FilesystemManager	signature:(const string& dev)
FilesystemManager::FilesystemManager	FilesystemManager.h	/^	FilesystemManager();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::FilesystemManager	FilesystemManager.h	/^	FilesystemManager(const string& dev);$/;"	p	class:FilesystemManager	access:public	signature:(const string& dev)
FilesystemManager::Format	FilesystemManager.cpp	/^bool FilesystemManager::Format(bool force)$/;"	f	class:FilesystemManager	signature:(bool force)
FilesystemManager::Format	FilesystemManager.h	/^	bool Format(bool force = true);$/;"	p	class:FilesystemManager	access:public	signature:(bool force = true)
FilesystemManager::GenerateUUIDFile	FilesystemManager.cpp	/^void FilesystemManager::GenerateUUIDFile()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::GenerateUUIDFile	FilesystemManager.h	/^	void GenerateUUIDFile();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::Initialize	FilesystemManager.cpp	/^bool FilesystemManager::Initialize()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::Initialize	FilesystemManager.h	/^	bool Initialize();$/;"	p	class:FilesystemManager	access:private	signature:()
FilesystemManager::InitializeMke2fsHandle	FilesystemManager.cpp	/^void FilesystemManager::InitializeMke2fsHandle()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::InitializeMke2fsHandle	FilesystemManager.h	/^	void InitializeMke2fsHandle();$/;"	p	class:FilesystemManager	access:private	signature:()
FilesystemManager::IsFormated	FilesystemManager.cpp	/^bool FilesystemManager::IsFormated()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::IsFormated	FilesystemManager.h	/^	bool IsFormated();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::IsFormating	FilesystemManager.cpp	/^bool FilesystemManager::IsFormating(int& progress, int& stat)$/;"	f	class:FilesystemManager	signature:(int& progress, int& stat)
FilesystemManager::IsFormating	FilesystemManager.h	/^	bool IsFormating(int& progress, int& stat);$/;"	p	class:FilesystemManager	access:public	signature:(int& progress, int& stat)
FilesystemManager::IsMountPoint	FilesystemManager.cpp	/^bool FilesystemManager::IsMountPoint(const string& path)$/;"	f	class:FilesystemManager	signature:(const string& path)
FilesystemManager::IsMountPoint	FilesystemManager.h	/^	static bool IsMountPoint(const string& path);$/;"	p	class:FilesystemManager	access:public	signature:(const string& path)
FilesystemManager::IsMounted	FilesystemManager.cpp	/^bool FilesystemManager::IsMounted(int& num)$/;"	f	class:FilesystemManager	signature:(int& num)
FilesystemManager::IsMounted	FilesystemManager.cpp	/^bool FilesystemManager::IsMounted(string& strMountPoint)$/;"	f	class:FilesystemManager	signature:(string& strMountPoint)
FilesystemManager::IsMounted	FilesystemManager.h	/^	bool IsMounted(int& num);$/;"	p	class:FilesystemManager	access:public	signature:(int& num)
FilesystemManager::IsMounted	FilesystemManager.h	/^	bool IsMounted(string& strMountPoint);$/;"	p	class:FilesystemManager	access:public	signature:(string& strMountPoint)
FilesystemManager::MakeFilesystemProgress	FilesystemManager.cpp	/^void FilesystemManager::MakeFilesystemProgress(void *pData, int stat,$/;"	f	class:FilesystemManager	signature:(void *pData, int stat, int current, int total)
FilesystemManager::MakeFilesystemProgress	FilesystemManager.h	/^	static void MakeFilesystemProgress(void *pData, int stat,$/;"	p	class:FilesystemManager	access:public	signature:(void *pData, int stat, int current, int total)
FilesystemManager::Mount	FilesystemManager.cpp	/^bool FilesystemManager::Mount(const string& strMountPoint)$/;"	f	class:FilesystemManager	signature:(const string& strMountPoint)
FilesystemManager::Mount	FilesystemManager.h	/^	bool Mount(const string& strMountPoint);$/;"	p	class:FilesystemManager	access:public	signature:(const string& strMountPoint)
FilesystemManager::SetDeviceNode	FilesystemManager.cpp	/^bool FilesystemManager::SetDeviceNode(const string &dev)$/;"	f	class:FilesystemManager	signature:(const string &dev)
FilesystemManager::SetDeviceNode	FilesystemManager.h	/^	bool SetDeviceNode(const string &dev);$/;"	p	class:FilesystemManager	access:public	signature:(const string &dev)
FilesystemManager::SetFormatInfo	FilesystemManager.cpp	/^void FilesystemManager::SetFormatInfo(bool format, int progress, int stat)$/;"	f	class:FilesystemManager	signature:(bool format, int progress, int stat)
FilesystemManager::SetFormatInfo	FilesystemManager.h	/^	void SetFormatInfo(bool format, int progress,$/;"	p	class:FilesystemManager	access:public	signature:(bool format, int progress, int stat)
FilesystemManager::SetMountPoint	FilesystemManager.cpp	/^void FilesystemManager::SetMountPoint(const string &mountpoint)$/;"	f	class:FilesystemManager	signature:(const string &mountpoint)
FilesystemManager::SetMountPoint	FilesystemManager.h	/^	void SetMountPoint(const string &mountpoint);$/;"	p	class:FilesystemManager	access:public	signature:(const string &mountpoint)
FilesystemManager::SetVolumeNum	FilesystemManager.cpp	/^void FilesystemManager::SetVolumeNum(const int &num)$/;"	f	class:FilesystemManager	signature:(const int &num)
FilesystemManager::SetVolumeNum	FilesystemManager.h	/^	void SetVolumeNum(const int &num);$/;"	p	class:FilesystemManager	access:public	signature:(const int &num)
FilesystemManager::ThreadProc	FilesystemManager.cpp	/^void FilesystemManager::ThreadProc()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::ThreadProc	FilesystemManager.h	/^	void ThreadProc();$/;"	p	class:FilesystemManager	access:protected	signature:()
FilesystemManager::Unmount	FilesystemManager.cpp	/^bool FilesystemManager::Unmount()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::Unmount	FilesystemManager.h	/^	bool Unmount();$/;"	p	class:FilesystemManager	access:public	signature:()
FilesystemManager::blkid	FilesystemManager.cpp	/^int FilesystemManager::blkid()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::blkid	FilesystemManager.h	/^	int blkid();$/;"	p	class:FilesystemManager	access:private	signature:()
FilesystemManager::dostat	FilesystemManager.cpp	/^bool FilesystemManager::dostat(const string& path, struct stat *st,$/;"	f	class:FilesystemManager	signature:(const string& path, struct stat *st, int do_lstat, int quiet)
FilesystemManager::dostat	FilesystemManager.h	/^	static bool dostat(const string& path, struct stat *st,$/;"	p	class:FilesystemManager	access:public	signature:(const string& path, struct stat *st, int do_lstat, int quiet)
FilesystemManager::m_bFormat	FilesystemManager.h	/^	bool m_bFormat;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_bMount	FilesystemManager.h	/^	bool m_bMount;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_csFormat	FilesystemManager.h	/^	CriticalSection m_csFormat;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_csMount	FilesystemManager.h	/^	CriticalSection m_csMount;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_iFormatProgress	FilesystemManager.h	/^	int m_iFormatProgress;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_iFormatingState	FilesystemManager.h	/^	int m_iFormatingState;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_iVolumeNum	FilesystemManager.h	/^	int m_iVolumeNum;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_mkfsHandle	FilesystemManager.h	/^	mke2fs_handle m_mkfsHandle;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_strDevNode	FilesystemManager.h	/^	string m_strDevNode;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_strFSType	FilesystemManager.h	/^	string m_strFSType;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_strMountPoint	FilesystemManager.h	/^	string m_strMountPoint;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::m_strUUID	FilesystemManager.h	/^	string m_strUUID;$/;"	m	class:FilesystemManager	access:private
FilesystemManager::~FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::~FilesystemManager()$/;"	f	class:FilesystemManager	signature:()
FilesystemManager::~FilesystemManager	FilesystemManager.h	/^	virtual ~FilesystemManager();$/;"	p	class:FilesystemManager	access:public	signature:()
Format	FilesystemManager.cpp	/^bool FilesystemManager::Format(bool force)$/;"	f	class:FilesystemManager	signature:(bool force)
Format	FilesystemManager.h	/^	bool Format(bool force = true);$/;"	p	class:FilesystemManager	access:public	signature:(bool force = true)
Format	RAIDManager.cpp	/^bool RAIDManager::Format(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
Format	RAIDManager.h	/^	bool Format(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
FreeDevList	RAIDManager.cpp	/^void RAIDManager::FreeDevList(struct mddev_dev* devlist)$/;"	f	class:RAIDManager	signature:(struct mddev_dev* devlist)
FreeDevList	RAIDManager.h	/^	void FreeDevList(struct mddev_dev* devlist);$/;"	p	class:RAIDManager	access:private	signature:(struct mddev_dev* devlist)
FreeMDNum	RAIDManager.cpp	/^void RAIDManager::FreeMDNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
FreeMDNum	RAIDManager.h	/^	void FreeMDNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
FreeVolumeNum	RAIDManager.cpp	/^void RAIDManager::FreeVolumeNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
FreeVolumeNum	RAIDManager.h	/^	void FreeVolumeNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
GCD	libmdadm/lib.c	/^unsigned long GCD(unsigned long a, unsigned long b)$/;"	f	signature:(unsigned long a, unsigned long b)
GCD	libmdadm/mdadm.h	/^extern unsigned long GCD(unsigned long a, unsigned long b);$/;"	p	signature:(unsigned long a, unsigned long b)
GEN_MIGR_AREA_SIZE	libmdadm/super-intel.c	244;"	d	file:
GET_ARRAY_INFO	libmdadm/md_u.h	22;"	d
GET_BITMAP_FILE	libmdadm/md_u.h	26;"	d
GET_BITMAP_LOCATION	libmdadm/mdadm.h	/^	GET_BITMAP_LOCATION = (1 << 10),$/;"	e	enum:sysfs_read_flags
GET_CACHE	libmdadm/mdadm.h	/^	GET_CACHE	= (1 << 4),$/;"	e	enum:sysfs_read_flags
GET_CHUNK	libmdadm/mdadm.h	/^	GET_CHUNK	= (1 << 3),$/;"	e	enum:sysfs_read_flags
GET_COMPONENT	libmdadm/mdadm.h	/^	GET_COMPONENT	= (1 << 2),$/;"	e	enum:sysfs_read_flags
GET_DEGRADED	libmdadm/mdadm.h	/^	GET_DEGRADED	= (1 << 8),$/;"	e	enum:sysfs_read_flags
GET_DEVS	libmdadm/mdadm.h	/^	GET_DEVS	= (1 << 20), \/* gets role, major, minor *\/$/;"	e	enum:sysfs_read_flags
GET_DISKS	libmdadm/mdadm.h	/^	GET_DISKS	= (1 << 7),$/;"	e	enum:sysfs_read_flags
GET_DISK_INFO	libmdadm/md_u.h	23;"	d
GET_ERROR	libmdadm/mdadm.h	/^	GET_ERROR	= (1 << 24),$/;"	e	enum:sysfs_read_flags
GET_LAYOUT	libmdadm/mdadm.h	/^	GET_LAYOUT	= (1 << 1),$/;"	e	enum:sysfs_read_flags
GET_LEVEL	libmdadm/mdadm.h	/^	GET_LEVEL	= (1 << 0),$/;"	e	enum:sysfs_read_flags
GET_MISMATCH	libmdadm/mdadm.h	/^	GET_MISMATCH	= (1 << 5),$/;"	e	enum:sysfs_read_flags
GET_OFFSET	libmdadm/mdadm.h	/^	GET_OFFSET	= (1 << 21),$/;"	e	enum:sysfs_read_flags
GET_SAFEMODE	libmdadm/mdadm.h	/^	GET_SAFEMODE	= (1 << 9),$/;"	e	enum:sysfs_read_flags
GET_SIZE	libmdadm/mdadm.h	/^	GET_SIZE	= (1 << 22),$/;"	e	enum:sysfs_read_flags
GET_STATE	libmdadm/mdadm.h	/^	GET_STATE	= (1 << 23),$/;"	e	enum:sysfs_read_flags
GET_VERSION	libmdadm/mdadm.h	/^	GET_VERSION	= (1 << 6),$/;"	e	enum:sysfs_read_flags
GPT	libmdadm/part.h	/^struct GPT {$/;"	s
GPT::backup_lba	libmdadm/part.h	/^	__u64 backup_lba;$/;"	m	struct:GPT	access:public
GPT::crc	libmdadm/part.h	/^	__u32 crc;$/;"	m	struct:GPT	access:public
GPT::current_lba	libmdadm/part.h	/^	__u64 current_lba;$/;"	m	struct:GPT	access:public
GPT::first_lba	libmdadm/part.h	/^	__u64 first_lba;$/;"	m	struct:GPT	access:public
GPT::guid	libmdadm/part.h	/^	__u8 guid[16];$/;"	m	struct:GPT	access:public
GPT::header_size	libmdadm/part.h	/^	__u32 header_size;$/;"	m	struct:GPT	access:public
GPT::last_lba	libmdadm/part.h	/^	__u64 last_lba;$/;"	m	struct:GPT	access:public
GPT::magic	libmdadm/part.h	/^	__u64 magic;$/;"	m	struct:GPT	access:public
GPT::pad1	libmdadm/part.h	/^	__u32 pad1;$/;"	m	struct:GPT	access:public
GPT::pad2	libmdadm/part.h	/^	__u8 pad2[420];$/;"	m	struct:GPT	access:public
GPT::part_cnt	libmdadm/part.h	/^	__u32 part_cnt;$/;"	m	struct:GPT	access:public
GPT::part_crc	libmdadm/part.h	/^	__u32 part_crc;$/;"	m	struct:GPT	access:public
GPT::part_size	libmdadm/part.h	/^	__u32 part_size;$/;"	m	struct:GPT	access:public
GPT::part_start	libmdadm/part.h	/^	__u64 part_start;$/;"	m	struct:GPT	access:public
GPT::revision	libmdadm/part.h	/^	__u32 revision;$/;"	m	struct:GPT	access:public
GPT_SIGNATURE_MAGIC	libmdadm/part.h	51;"	d
GPT_part_entry	libmdadm/part.h	/^struct GPT_part_entry {$/;"	s
GPT_part_entry::attr_bits	libmdadm/part.h	/^	unsigned char attr_bits[8];$/;"	m	struct:GPT_part_entry	access:public
GPT_part_entry::ending_lba	libmdadm/part.h	/^	__u64 ending_lba;$/;"	m	struct:GPT_part_entry	access:public
GPT_part_entry::name	libmdadm/part.h	/^	unsigned char name[72];$/;"	m	struct:GPT_part_entry	access:public
GPT_part_entry::partition_guid	libmdadm/part.h	/^	unsigned char partition_guid[16];$/;"	m	struct:GPT_part_entry	access:public
GPT_part_entry::starting_lba	libmdadm/part.h	/^	__u64 starting_lba;$/;"	m	struct:GPT_part_entry	access:public
GPT_part_entry::type_guid	libmdadm/part.h	/^	unsigned char type_guid[16];$/;"	m	struct:GPT_part_entry	access:public
GROW	libmdadm/mdadm.h	/^	GROW,$/;"	e	enum:mode
GUID_STR_MAX	libmdadm/platform-intel.c	333;"	d	file:
GenerateMDDevName	RAIDManager.cpp	/^string RAIDManager::GenerateMDDevName(int num)$/;"	f	class:RAIDManager	signature:(int num)
GenerateMDDevName	RAIDManager.h	/^	string GenerateMDDevName(int num);$/;"	p	class:RAIDManager	access:private	signature:(int num)
GenerateUUIDFile	FilesystemManager.cpp	/^void FilesystemManager::GenerateUUIDFile()$/;"	f	class:FilesystemManager	signature:()
GenerateUUIDFile	FilesystemManager.h	/^	void GenerateUUIDFile();$/;"	p	class:FilesystemManager	access:public	signature:()
GenerateVolumeName	RAIDManager.cpp	/^int RAIDManager::GenerateVolumeName(string& name)$/;"	f	class:RAIDManager	signature:(string& name)
GenerateVolumeName	RAIDManager.h	/^	int GenerateVolumeName(string& name);$/;"	p	class:RAIDManager	access:private	signature:(string& name)
GetDeviceNodeBySymLink	RAIDManager.cpp	/^string RAIDManager::GetDeviceNodeBySymLink(const string& symlink)$/;"	f	class:RAIDManager	signature:(const string& symlink)
GetDeviceNodeBySymLink	RAIDManager.h	/^	static string GetDeviceNodeBySymLink(const string& symlink);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink)
GetDisksInfo	RAIDManager.cpp	/^bool RAIDManager::GetDisksInfo(const string& dev, RAIDDiskInfo &info)$/;"	f	class:RAIDManager	signature:(const string& dev, RAIDDiskInfo &info)
GetDisksInfo	RAIDManager.cpp	/^void RAIDManager::GetDisksInfo(vector<RAIDDiskInfo> &list)$/;"	f	class:RAIDManager	signature:(vector<RAIDDiskInfo> &list)
GetDisksInfo	RAIDManager.h	/^	bool GetDisksInfo(const string& dev, RAIDDiskInfo &info);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev, RAIDDiskInfo &info)
GetDisksInfo	RAIDManager.h	/^	void GetDisksInfo(vector<RAIDDiskInfo> &list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDDiskInfo> &list)
GetDisksInfoBySymLink	RAIDManager.h	/^	bool GetDisksInfoBySymLink(const string& link, RAIDDiskInfo &info);$/;"	p	class:RAIDManager	access:public	signature:(const string& link, RAIDDiskInfo &info)
GetDisksInfoBySymLink	RAIDManager.h	/^	bool GetDisksInfoBySymLink(vector<RAIDDiskInfo> &list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDDiskInfo> &list)
GetFileStorageSize	test_utils.cpp	/^off_t GetFileStorageSize(const string& pathname)$/;"	f	signature:(const string& pathname)
GetFileStorageSize	test_utils.h	/^extern off_t GetFileStorageSize(const string& pathname);$/;"	p	signature:(const string& pathname)
GetFileSystemStatus	RAIDManager.h	/^	bool GetFileSystemStatus();$/;"	p	class:RAIDManager	access:public	signature:()
GetFormatProgress	RAIDManager.cpp	/^bool RAIDManager::GetFormatProgress(const string& mddev,$/;"	f	class:RAIDManager	signature:(const string& mddev, int& stat, int& progress)
GetFormatProgress	RAIDManager.h	/^	bool GetFormatProgress(const string& mddev,$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int& stat, int& progress)
GetFreeMDNum	RAIDManager.cpp	/^int RAIDManager::GetFreeMDNum()$/;"	f	class:RAIDManager	signature:()
GetFreeMDNum	RAIDManager.h	/^	int GetFreeMDNum();$/;"	p	class:RAIDManager	access:private	signature:()
GetFreeVolumeNum	RAIDManager.cpp	/^int RAIDManager::GetFreeVolumeNum()$/;"	f	class:RAIDManager	signature:()
GetFreeVolumeNum	RAIDManager.h	/^	int GetFreeVolumeNum();$/;"	p	class:RAIDManager	access:private	signature:()
GetRAIDDetail	RAIDManager.cpp	/^bool RAIDManager::GetRAIDDetail(const string& mddev,$/;"	f	class:RAIDManager	signature:(const string& mddev, array_detail &ad)
GetRAIDDetail	RAIDManager.h	/^	bool GetRAIDDetail(const string& mddev, array_detail &ad);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, array_detail &ad)
GetRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::GetRAIDInfo(const string& mddev, RAIDInfo& info)$/;"	f	class:RAIDManager	signature:(const string& mddev, RAIDInfo& info)
GetRAIDInfo	RAIDManager.cpp	/^void RAIDManager::GetRAIDInfo(vector<RAIDInfo>& list)$/;"	f	class:RAIDManager	signature:(vector<RAIDInfo>& list)
GetRAIDInfo	RAIDManager.h	/^	bool GetRAIDInfo(const string& mddev, RAIDInfo& info);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, RAIDInfo& info)
GetRAIDInfo	RAIDManager.h	/^	void GetRAIDInfo(vector<RAIDInfo>& list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDInfo>& list)
Grow_Add_device	libmdadm/Grow.c	/^int Grow_Add_device(char *devname, int fd, char *newdev)$/;"	f	signature:(char *devname, int fd, char *newdev)
Grow_Add_device	libmdadm/mdadm.h	/^extern int Grow_Add_device(char *devname, int fd, char *newdev);$/;"	p	signature:(char *devname, int fd, char *newdev)
Grow_addbitmap	libmdadm/Grow.c	/^int Grow_addbitmap(char *devname, int fd, struct context *c, struct shape *s)$/;"	f	signature:(char *devname, int fd, struct context *c, struct shape *s)
Grow_addbitmap	libmdadm/mdadm.h	/^extern int Grow_addbitmap(char *devname, int fd,$/;"	p	signature:(char *devname, int fd, struct context *c, struct shape *s)
Grow_continue	libmdadm/Grow.c	/^int Grow_continue(int mdfd, struct supertype *st, struct mdinfo *info,$/;"	f	signature:(int mdfd, struct supertype *st, struct mdinfo *info, char *backup_file, int forked, int freeze_reshape)
Grow_continue	libmdadm/mdadm.h	/^extern int Grow_continue(int mdfd, struct supertype *st,$/;"	p	signature:(int mdfd, struct supertype *st, struct mdinfo *info, char *backup_file, int forked, int freeze_reshape)
Grow_continue_command	libmdadm/Grow.c	/^int Grow_continue_command(char *devname, int fd,$/;"	f	signature:(char *devname, int fd, char *backup_file, int verbose)
Grow_continue_command	libmdadm/mdadm.h	/^extern int Grow_continue_command(char *devname, int fd,$/;"	p	signature:(char *devname, int fd, char *backup_file, int verbose)
Grow_reshape	libmdadm/Grow.c	/^int Grow_reshape(char *devname, int fd,$/;"	f	signature:(char *devname, int fd, struct mddev_dev *devlist, unsigned long long data_offset, struct context *c, struct shape *s)
Grow_reshape	libmdadm/mdadm.h	/^extern int Grow_reshape(char *devname, int fd,$/;"	p	signature:(char *devname, int fd, struct mddev_dev *devlist, unsigned long long data_offset, struct context *c, struct shape *s)
Grow_restart	libmdadm/Grow.c	/^int Grow_restart(struct supertype *st, struct mdinfo *info, int *fdlist, int cnt,$/;"	f	signature:(struct supertype *st, struct mdinfo *info, int *fdlist, int cnt, char *backup_file, int verbose)
Grow_restart	libmdadm/mdadm.h	/^extern int Grow_restart(struct supertype *st, struct mdinfo *info,$/;"	p	signature:(struct supertype *st, struct mdinfo *info, int *fdlist, int cnt, char *backup_file, int verbose)
HAVE_FTW	libmdadm/mdadm.h	1085;"	d
HAVE_FTW	libmdadm/mdadm.h	1093;"	d
HAVE_FTW	libmdadm/mdadm.h	1104;"	d
HAVE_NFTW	libmdadm/mdadm.h	1084;"	d
HAVE_NFTW	libmdadm/mdadm.h	1094;"	d
HAVE_NFTW	libmdadm/mdadm.h	1099;"	d
HAVE_NFTW	libmdadm/mdadm.h	1103;"	d
HAVE_STAT	libmke2fs/profile.c	70;"	d	file:
HAVE_STDINT_H	libmdadm/super-ddf.c	28;"	d	file:
HAVE_STDINT_H	libmdadm/super-intel.c	20;"	d	file:
HAVE_STDINT_H	libmdadm/super0.c	25;"	d	file:
HOLE_BLKADDR	libmke2fs/ext2fs.h	543;"	d
HOT_ADD_DISK	libmdadm/md_u.h	37;"	d
HOT_REMOVE_DISK	libmdadm/md_u.h	31;"	d
HandleADDDISK	unitest/TestingLoop.cpp	/^static void HandleADDDISK (char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(char* content, RAIDManager& raid_mgr)
HandleASSEMBLERAID	unitest/TestingLoop.cpp	/^static void HandleASSEMBLERAID (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
HandleCREATERAID	unitest/TestingLoop.cpp	/^static void HandleCREATERAID (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
HandleDELETERAID	unitest/TestingLoop.cpp	/^static void HandleDELETERAID (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
HandleDONOTHING	unitest/TestingLoop.cpp	/^static void HandleDONOTHING (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
HandleMANAGEMDDISK	unitest/TestingLoop.cpp	/^static void HandleMANAGEMDDISK (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
HandleREMDISK	unitest/TestingLoop.cpp	/^static void HandleREMDISK (char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(char* content, RAIDManager& raid_mgr)
HandleSTOPRAID	unitest/TestingLoop.cpp	/^static void HandleSTOPRAID (const char* content, RAIDManager& raid_mgr)$/;"	f	file:	signature:(const char* content, RAIDManager& raid_mgr)
Homehost	libmdadm/config.c	/^		Homehost, AutoMode, Policy, PartPolicy, LTEnd };$/;"	e	enum:linetype	file:
IEC	libmdadm/mdadm.h	/^	IEC$/;"	e	enum:prefix_standard
IMAGER_FLAG_INODEMAP	libmke2fs/ext2fs.h	528;"	d
IMAGER_FLAG_SPARSEWRITE	libmke2fs/ext2fs.h	529;"	d
IMSM_DEV_FILLERS	libmdadm/super-intel.c	191;"	d	file:
IMSM_DISK_FILLERS	libmdadm/super-intel.c	106;"	d	file:
IMSM_FILLERS	libmdadm/super-intel.c	212;"	d	file:
IMSM_MAX_DEVICES	libmdadm/super-intel.c	95;"	d	file:
IMSM_ORD_REBUILD	libmdadm/super-intel.c	139;"	d	file:
IMSM_OROM_ATTR_2TB	libmdadm/platform-intel.h	80;"	d
IMSM_OROM_ATTR_2TB_DISK	libmdadm/platform-intel.h	79;"	d
IMSM_OROM_ATTR_ChecksumVerify	libmdadm/platform-intel.h	82;"	d
IMSM_OROM_ATTR_PM	libmdadm/platform-intel.h	81;"	d
IMSM_OROM_ATTR_RAID0	libmdadm/platform-intel.h	73;"	d
IMSM_OROM_ATTR_RAID1	libmdadm/platform-intel.h	74;"	d
IMSM_OROM_ATTR_RAID10	libmdadm/platform-intel.h	75;"	d
IMSM_OROM_ATTR_RAID1E	libmdadm/platform-intel.h	76;"	d
IMSM_OROM_ATTR_RAID5	libmdadm/platform-intel.h	77;"	d
IMSM_OROM_ATTR_RAID_CNG	libmdadm/platform-intel.h	78;"	d
IMSM_OROM_CAPABILITIES_DiskCoercion	libmdadm/platform-intel.h	87;"	d
IMSM_OROM_CAPABILITIES_EnterpriseSystem	libmdadm/platform-intel.h	91;"	d
IMSM_OROM_CAPABILITIES_Ext_SATA	libmdadm/platform-intel.h	84;"	d
IMSM_OROM_CAPABILITIES_HDDUnlock	libmdadm/platform-intel.h	89;"	d
IMSM_OROM_CAPABILITIES_HddPassword	libmdadm/platform-intel.h	86;"	d
IMSM_OROM_CAPABILITIES_LEDLoc	libmdadm/platform-intel.h	90;"	d
IMSM_OROM_CAPABILITIES_LargeDramCache	libmdadm/platform-intel.h	93;"	d
IMSM_OROM_CAPABILITIES_ReadPatrol	libmdadm/platform-intel.h	95;"	d
IMSM_OROM_CAPABILITIES_Rohi	libmdadm/platform-intel.h	94;"	d
IMSM_OROM_CAPABILITIES_TurboMemory	libmdadm/platform-intel.h	85;"	d
IMSM_OROM_CAPABILITIES_XorHw	libmdadm/platform-intel.h	96;"	d
IMSM_OROM_CAPABILITIES_Zpodd	libmdadm/platform-intel.h	92;"	d
IMSM_OROM_DISKS_PER_ARRAY	libmdadm/platform-intel.h	61;"	d
IMSM_OROM_RLC_RAID0	libmdadm/platform-intel.h	37;"	d
IMSM_OROM_RLC_RAID1	libmdadm/platform-intel.h	38;"	d
IMSM_OROM_RLC_RAID10	libmdadm/platform-intel.h	39;"	d
IMSM_OROM_RLC_RAID1E	libmdadm/platform-intel.h	40;"	d
IMSM_OROM_RLC_RAID5	libmdadm/platform-intel.h	41;"	d
IMSM_OROM_RLC_RAID_CNG	libmdadm/platform-intel.h	42;"	d
IMSM_OROM_SSS_128kB	libmdadm/platform-intel.h	50;"	d
IMSM_OROM_SSS_16MB	libmdadm/platform-intel.h	57;"	d
IMSM_OROM_SSS_16kB	libmdadm/platform-intel.h	47;"	d
IMSM_OROM_SSS_1MB	libmdadm/platform-intel.h	53;"	d
IMSM_OROM_SSS_256kB	libmdadm/platform-intel.h	51;"	d
IMSM_OROM_SSS_2MB	libmdadm/platform-intel.h	54;"	d
IMSM_OROM_SSS_2kB	libmdadm/platform-intel.h	44;"	d
IMSM_OROM_SSS_32MB	libmdadm/platform-intel.h	58;"	d
IMSM_OROM_SSS_32kB	libmdadm/platform-intel.h	48;"	d
IMSM_OROM_SSS_4MB	libmdadm/platform-intel.h	55;"	d
IMSM_OROM_SSS_4kB	libmdadm/platform-intel.h	45;"	d
IMSM_OROM_SSS_512kB	libmdadm/platform-intel.h	52;"	d
IMSM_OROM_SSS_64MB	libmdadm/platform-intel.h	59;"	d
IMSM_OROM_SSS_64kB	libmdadm/platform-intel.h	49;"	d
IMSM_OROM_SSS_8MB	libmdadm/platform-intel.h	56;"	d
IMSM_OROM_SSS_8kB	libmdadm/platform-intel.h	46;"	d
IMSM_OROM_TOTAL_DISKS	libmdadm/platform-intel.h	63;"	d
IMSM_OROM_VOLUMES_PER_ARRAY	libmdadm/platform-intel.h	65;"	d
IMSM_OROM_VOLUMES_PER_HBA	libmdadm/platform-intel.h	67;"	d
IMSM_RESERVED_SECTORS	libmdadm/super-intel.c	90;"	d	file:
IMSM_T_RAID0	libmdadm/super-intel.c	128;"	d	file:
IMSM_T_RAID1	libmdadm/super-intel.c	129;"	d	file:
IMSM_T_RAID5	libmdadm/super-intel.c	130;"	d	file:
IMSM_T_STATE_DEGRADED	libmdadm/super-intel.c	125;"	d	file:
IMSM_T_STATE_FAILED	libmdadm/super-intel.c	126;"	d	file:
IMSM_T_STATE_NORMAL	libmdadm/super-intel.c	123;"	d	file:
IMSM_T_STATE_UNINITIALIZED	libmdadm/super-intel.c	124;"	d	file:
IMSM_UNKNOWN_OWNER	libmdadm/super-intel.c	393;"	d	file:
INCREMENTAL	libmdadm/mdadm.h	/^	INCREMENTAL,$/;"	e	enum:mode
INCR_ALREADY	libmdadm/mdadm.h	1291;"	d
INCR_NO	libmdadm/mdadm.h	1289;"	d
INCR_UNSAFE	libmdadm/mdadm.h	1290;"	d
INCR_YES	libmdadm/mdadm.h	1292;"	d
INT_MAX	libmdadm/sha1.h	49;"	d
INT_MAX_32_BITS	libmdadm/sha1.h	41;"	d
INVALID_SECTORS	libmdadm/mdadm.h	1519;"	d
Incremental	libmdadm/Incremental.c	/^int Incremental(struct mddev_dev *devlist, struct context *c,$/;"	f	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *st)
Incremental	libmdadm/mdadm.h	/^extern int Incremental(struct mddev_dev *devlist, struct context *c,$/;"	p	signature:(struct mddev_dev *devlist, struct context *c, struct supertype *st)
IncrementalRemove	libmdadm/Incremental.c	/^int IncrementalRemove(char *devname, char *id_path, int verbose)$/;"	f	signature:(char *devname, char *id_path, int verbose)
IncrementalRemove	libmdadm/mdadm.h	/^extern int IncrementalRemove(char *devname, char *path, int verbose);$/;"	p	signature:(char *devname, char *path, int verbose)
IncrementalScan	libmdadm/Incremental.c	/^int IncrementalScan(struct context *c, char *devnm)$/;"	f	signature:(struct context *c, char *devnm)
IncrementalScan	libmdadm/mdadm.h	/^extern int IncrementalScan(struct context *c, char *devnm);$/;"	p	signature:(struct context *c, char *devnm)
Incremental_container	libmdadm/Incremental.c	/^static int Incremental_container(struct supertype *st, char *devname,$/;"	f	file:	signature:(struct supertype *st, char *devname, struct context *c, char *only)
Incremental_container	libmdadm/Incremental.c	/^static int Incremental_container(struct supertype *st, char *devname,$/;"	p	file:	signature:(struct supertype *st, char *devname, struct context *c, char *only)
Initialize	FilesystemManager.cpp	/^bool FilesystemManager::Initialize()$/;"	f	class:FilesystemManager	signature:()
Initialize	FilesystemManager.h	/^	bool Initialize();$/;"	p	class:FilesystemManager	access:private	signature:()
InitializeContext	RAIDManager.cpp	/^void RAIDManager::InitializeContext(struct context& c, int force, int runstop, int verbose)$/;"	f	class:RAIDManager	signature:(struct context& c, int force, int runstop, int verbose)
InitializeContext	RAIDManager.h	/^	void InitializeContext(struct context& c, int force = 1, int runstop = 1, int verbose = 0);$/;"	p	class:RAIDManager	access:private	signature:(struct context& c, int force = 1, int runstop = 1, int verbose = 0)
InitializeContext	RAIDManager.h	/^	void InitializeContext(struct context& c, int force = 1, int runstop = 1, int verbose = 1);$/;"	p	class:RAIDManager	access:private	signature:(struct context& c, int force = 1, int runstop = 1, int verbose = 1)
InitializeDevList	RAIDManager.cpp	/^struct mddev_dev* RAIDManager::InitializeDevList(const string& replace, const string& with)$/;"	f	class:RAIDManager	signature:(const string& replace, const string& with)
InitializeDevList	RAIDManager.cpp	/^struct mddev_dev* RAIDManager::InitializeDevList(vector<string>& devNameList, int disposition)$/;"	f	class:RAIDManager	signature:(vector<string>& devNameList, int disposition)
InitializeDevList	RAIDManager.h	/^	struct mddev_dev* InitializeDevList(const string& replace, const string& with);$/;"	p	class:RAIDManager	access:private	signature:(const string& replace, const string& with)
InitializeDevList	RAIDManager.h	/^	struct mddev_dev* InitializeDevList(vector<string>& devNameList, int disposition = 0);$/;"	p	class:RAIDManager	access:private	signature:(vector<string>& devNameList, int disposition = 0)
InitializeFSManager	RAIDManager.h	/^	bool InitializeFSManager() {$/;"	f	struct:RAIDInfo	access:public	signature:()
InitializeMDDevIdent	RAIDManager.cpp	/^void RAIDManager::InitializeMDDevIdent(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd, char* bitmap_file)$/;"	f	class:RAIDManager	signature:(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd, char* bitmap_file)
InitializeMDDevIdent	RAIDManager.h	/^	void InitializeMDDevIdent(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd = -1, char* bitmap_file = NULL);$/;"	p	class:RAIDManager	access:private	signature:(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd = -1, char* bitmap_file = NULL)
InitializeMke2fsHandle	FilesystemManager.cpp	/^void FilesystemManager::InitializeMke2fsHandle()$/;"	f	class:FilesystemManager	signature:()
InitializeMke2fsHandle	FilesystemManager.h	/^	void InitializeMke2fsHandle();$/;"	p	class:FilesystemManager	access:private	signature:()
InitializeShape	RAIDManager.cpp	/^void RAIDManager::InitializeShape(struct shape& s, int raiddisks, int level, int chunk, int bitmap_chunk, char* bitmap_file)$/;"	f	class:RAIDManager	signature:(struct shape& s, int raiddisks, int level, int chunk, int bitmap_chunk, char* bitmap_file)
InitializeShape	RAIDManager.h	/^	void InitializeShape(struct shape& s, int raiddisks, int level, int chunk = 512, int bitmap_chunk = UnSet, char* bitmap_file = NULL);$/;"	p	class:RAIDManager	access:private	signature:(struct shape& s, int raiddisks, int level, int chunk = 512, int bitmap_chunk = UnSet, char* bitmap_file = NULL)
IsDiskExistInRAIDDiskList	RAIDManager.cpp	/^bool RAIDManager::IsDiskExistInRAIDDiskList(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
IsDiskExistInRAIDDiskList	RAIDManager.cpp	/^bool RAIDManager::IsDiskExistInRAIDDiskList(vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList)
IsDiskExistInRAIDDiskList	RAIDManager.h	/^	bool IsDiskExistInRAIDDiskList(const string& dev);$/;"	p	class:RAIDManager	access:private	signature:(const string& dev)
IsDiskExistInRAIDDiskList	RAIDManager.h	/^	bool IsDiskExistInRAIDDiskList(vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(vector<string>& vDevList)
IsDiskHaveMDSuperBlock	RAIDManager.cpp	/^bool RAIDManager::IsDiskHaveMDSuperBlock(const string& dev, examine_result &result, int &err)$/;"	f	class:RAIDManager	signature:(const string& dev, examine_result &result, int &err)
IsDiskHaveMDSuperBlock	RAIDManager.h	/^	bool IsDiskHaveMDSuperBlock(const string& dev, examine_result &result, int &err);$/;"	p	class:RAIDManager	access:private	signature:(const string& dev, examine_result &result, int &err)
IsFormated	FilesystemManager.cpp	/^bool FilesystemManager::IsFormated()$/;"	f	class:FilesystemManager	signature:()
IsFormated	FilesystemManager.h	/^	bool IsFormated();$/;"	p	class:FilesystemManager	access:public	signature:()
IsFormated	RAIDManager.cpp	/^bool RAIDManager::IsFormated(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
IsFormated	RAIDManager.h	/^	bool IsFormated(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
IsFormating	FilesystemManager.cpp	/^bool FilesystemManager::IsFormating(int& progress, int& stat)$/;"	f	class:FilesystemManager	signature:(int& progress, int& stat)
IsFormating	FilesystemManager.h	/^	bool IsFormating(int& progress, int& stat);$/;"	p	class:FilesystemManager	access:public	signature:(int& progress, int& stat)
IsMDDevInRAIDInfoList	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::IsMDDevInRAIDInfoList(const string &mddev)$/;"	f	class:RAIDManager	signature:(const string &mddev)
IsMDDevInRAIDInfoList	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::IsMDDevInRAIDInfoList(const string &mddev, RAIDInfo& info)$/;"	f	class:RAIDManager	signature:(const string &mddev, RAIDInfo& info)
IsMDDevInRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo>::iterator IsMDDevInRAIDInfoList(const string &mddev);$/;"	p	class:RAIDManager	access:private	signature:(const string &mddev)
IsMDDevInRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo>::iterator IsMDDevInRAIDInfoList(const string &mddev, RAIDInfo& info);$/;"	p	class:RAIDManager	access:private	signature:(const string &mddev, RAIDInfo& info)
IsMountPoint	FilesystemManager.cpp	/^bool FilesystemManager::IsMountPoint(const string& path)$/;"	f	class:FilesystemManager	signature:(const string& path)
IsMountPoint	FilesystemManager.h	/^	static bool IsMountPoint(const string& path);$/;"	p	class:FilesystemManager	access:public	signature:(const string& path)
IsMounted	FilesystemManager.cpp	/^bool FilesystemManager::IsMounted(int& num)$/;"	f	class:FilesystemManager	signature:(int& num)
IsMounted	FilesystemManager.cpp	/^bool FilesystemManager::IsMounted(string& strMountPoint)$/;"	f	class:FilesystemManager	signature:(string& strMountPoint)
IsMounted	FilesystemManager.h	/^	bool IsMounted(int& num);$/;"	p	class:FilesystemManager	access:public	signature:(int& num)
IsMounted	FilesystemManager.h	/^	bool IsMounted(string& strMountPoint);$/;"	p	class:FilesystemManager	access:public	signature:(string& strMountPoint)
IsMounted	RAIDManager.cpp	/^bool RAIDManager::IsMounted(const string& mddev, int &num)$/;"	f	class:RAIDManager	signature:(const string& mddev, int &num)
IsMounted	RAIDManager.h	/^	bool IsMounted(const string& mddev, int &num);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int &num)
IsRAIDAbnormal	RAIDManager.cpp	/^bool RAIDManager::IsRAIDAbnormal(const RAIDInfo &info)$/;"	f	class:RAIDManager	signature:(const RAIDInfo &info)
IsRAIDAbnormal	RAIDManager.h	/^	bool IsRAIDAbnormal(const RAIDInfo &info);$/;"	p	class:RAIDManager	access:private	signature:(const RAIDInfo &info)
IsRAIDStatusChanged	RAIDManager.h	/^	bool IsRAIDStatusChanged(const RAIDInfo& previous) {$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& previous)
JEDEC	libmdadm/mdadm.h	/^	JEDEC,$/;"	e	enum:prefix_standard
K1	libmdadm/sha1.c	270;"	d	file:
K2	libmdadm/sha1.c	271;"	d	file:
K3	libmdadm/sha1.c	272;"	d	file:
K4	libmdadm/sha1.c	273;"	d	file:
KILL_NOT_MD_COMPONENT	libmdadm/mdadm_errcode.h	/^	KILL_NOT_MD_COMPONENT,$/;"	e	enum:__anon5
KILL_OPEN_DEV_FAIL	libmdadm/mdadm_errcode.h	/^	KILL_OPEN_DEV_FAIL = 501,$/;"	e	enum:__anon5
KILL_ZERO_SUPERBLOCK_FAIL	libmdadm/mdadm_errcode.h	/^	KILL_ZERO_SUPERBLOCK_FAIL,$/;"	e	enum:__anon5
Kill	libmdadm/Kill.c	/^int Kill(char *dev, struct supertype *st, int force, int verbose, int noexcl)$/;"	f	signature:(char *dev, struct supertype *st, int force, int verbose, int noexcl)
Kill	libmdadm/mdadm.h	/^extern int Kill(char *dev, struct supertype *st, int force, int verbose, int noexcl);$/;"	p	signature:(char *dev, struct supertype *st, int force, int verbose, int noexcl)
Kill_subarray	libmdadm/Kill.c	/^int Kill_subarray(char *dev, char *subarray, int verbose)$/;"	f	signature:(char *dev, char *subarray, int verbose)
Kill_subarray	libmdadm/mdadm.h	/^extern int Kill_subarray(char *dev, char *subarray, int verbose);$/;"	p	signature:(char *dev, char *subarray, int verbose)
LBA_OFFSET	libmdadm/super-ddf.c	365;"	d	file:
LEVEL_CONTAINER	libmdadm/mdadm.h	1417;"	d
LEVEL_FAULTY	libmdadm/mdadm.h	1414;"	d
LEVEL_LINEAR	libmdadm/mdadm.h	1413;"	d
LEVEL_MULTIPATH	libmdadm/mdadm.h	1412;"	d
LEVEL_NONE	libmdadm/mdadm.h	1421;"	d
LEVEL_UNSUPPORTED	libmdadm/mdadm.h	1418;"	d
LINUX_S_IFBLK	libmke2fs/ext2fs.h	471;"	d
LINUX_S_IFCHR	libmke2fs/ext2fs.h	473;"	d
LINUX_S_IFDIR	libmke2fs/ext2fs.h	472;"	d
LINUX_S_IFIFO	libmke2fs/ext2fs.h	474;"	d
LINUX_S_IFLNK	libmke2fs/ext2fs.h	469;"	d
LINUX_S_IFMT	libmke2fs/ext2fs.h	467;"	d
LINUX_S_IFREG	libmke2fs/ext2fs.h	470;"	d
LINUX_S_IFSOCK	libmke2fs/ext2fs.h	468;"	d
LINUX_S_IRGRP	libmke2fs/ext2fs.h	485;"	d
LINUX_S_IROTH	libmke2fs/ext2fs.h	490;"	d
LINUX_S_IRUSR	libmke2fs/ext2fs.h	480;"	d
LINUX_S_IRWXG	libmke2fs/ext2fs.h	484;"	d
LINUX_S_IRWXO	libmke2fs/ext2fs.h	489;"	d
LINUX_S_IRWXU	libmke2fs/ext2fs.h	479;"	d
LINUX_S_ISBLK	libmke2fs/ext2fs.h	498;"	d
LINUX_S_ISCHR	libmke2fs/ext2fs.h	497;"	d
LINUX_S_ISDIR	libmke2fs/ext2fs.h	496;"	d
LINUX_S_ISFIFO	libmke2fs/ext2fs.h	499;"	d
LINUX_S_ISGID	libmke2fs/ext2fs.h	476;"	d
LINUX_S_ISLNK	libmke2fs/ext2fs.h	494;"	d
LINUX_S_ISREG	libmke2fs/ext2fs.h	495;"	d
LINUX_S_ISSOCK	libmke2fs/ext2fs.h	500;"	d
LINUX_S_ISUID	libmke2fs/ext2fs.h	475;"	d
LINUX_S_ISVTX	libmke2fs/ext2fs.h	477;"	d
LINUX_S_IWGRP	libmke2fs/ext2fs.h	486;"	d
LINUX_S_IWOTH	libmke2fs/ext2fs.h	491;"	d
LINUX_S_IWUSR	libmke2fs/ext2fs.h	481;"	d
LINUX_S_IXGRP	libmke2fs/ext2fs.h	487;"	d
LINUX_S_IXOTH	libmke2fs/ext2fs.h	492;"	d
LINUX_S_IXUSR	libmke2fs/ext2fs.h	482;"	d
LOCAL	libmdadm/mdadm.h	1323;"	d
LOCAL_ANY	libmdadm/mdadm.h	1324;"	d
LOG_LABEL	FilesystemManager.cpp	17;"	d	file:
LOG_LABEL	RAIDManager.cpp	9;"	d	file:
LTEnd	libmdadm/config.c	/^		Homehost, AutoMode, Policy, PartPolicy, LTEnd };$/;"	e	enum:linetype	file:
Lock	test_utils.h	/^	void Lock() {$/;"	f	class:CriticalSection	access:public	signature:()
M	libmdadm/sha1.c	307;"	d	file:
MAJOR	libmke2fs/util.c	89;"	d	file:
MANAGE	libmdadm/mdadm.h	/^	MANAGE,$/;"	e	enum:mode
MANAGE_ADD_ADD_NEW_DEVS_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_ADD_NEW_DEVS_FAIL,$/;"	e	enum:__anon5
MANAGE_ADD_ARRAY_FAILED	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_ARRAY_FAILED,$/;"	e	enum:__anon5
MANAGE_ADD_CANNOT_GET_EXCLUSIVE_ACCESS	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_CANNOT_GET_EXCLUSIVE_ACCESS,$/;"	e	enum:__anon5
MANAGE_ADD_CANNOT_LOAD_ARRAY_METADATA	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_CANNOT_LOAD_ARRAY_METADATA,$/;"	e	enum:__anon5
MANAGE_ADD_DEV_SIZE_NOT_LARGE_ENOUGH	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_DEV_SIZE_NOT_LARGE_ENOUGH,$/;"	e	enum:__anon5
MANAGE_ADD_GET_DEV_SIZE_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_GET_DEV_SIZE_FAIL = 251, $/;"	e	enum:__anon5
MANAGE_ADD_HOT_ADD_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_HOT_ADD_FAIL,$/;"	e	enum:__anon5
MANAGE_ADD_READD_IMPOSSIBLE	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_READD_IMPOSSIBLE,$/;"	e	enum:__anon5
MANAGE_ADD_READ_SYSFS_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_READ_SYSFS_FAIL,$/;"	e	enum:__anon5
MANAGE_ADD_UPDATE_SUPERBLOCK_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_UPDATE_SUPERBLOCK_FAIL,$/;"	e	enum:__anon5
MANAGE_ADD_WASTED_DEV_SIZE	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_WASTED_DEV_SIZE,$/;"	e	enum:__anon5
MANAGE_ADD_WRITE_INIT_SUPERBLOCK_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_ADD_WRITE_INIT_SUPERBLOCK_FAIL,$/;"	e	enum:__anon5
MANAGE_Add	unitest/TestingLoop.cpp	/^	MANAGE_Add = 'a',$/;"	e	enum:__anon2	file:
MANAGE_CANNOT_ADD_DISKS_TO_MEMBER_ARRAY	libmdadm/mdadm_errcode.h	/^	MANAGE_CANNOT_ADD_DISKS_TO_MEMBER_ARRAY,$/;"	e	enum:__anon5
MANAGE_CANNOT_FIND_DEV	libmdadm/mdadm_errcode.h	/^	MANAGE_CANNOT_FIND_DEV,$/;"	e	enum:__anon5
MANAGE_CANNOT_OPEN_DEV	libmdadm/mdadm_errcode.h	/^	MANAGE_CANNOT_OPEN_DEV,$/;"	e	enum:__anon5
MANAGE_CANNOT_REMOVE_DISKS_FROM_MEMBER_ARRAY	libmdadm/mdadm_errcode.h	/^	MANAGE_CANNOT_REMOVE_DISKS_FROM_MEMBER_ARRAY,$/;"	e	enum:__anon5
MANAGE_CASE	unitest/TestingLoop.cpp	39;"	d	file:
MANAGE_DEVICE_BUSY	libmdadm/mdadm_errcode.h	/^	MANAGE_DEVICE_BUSY,$/;"	e	enum:__anon5
MANAGE_GET_ARRAY_INFO_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_GET_ARRAY_INFO_FAIL,$/;"	e	enum:__anon5
MANAGE_MD_IN_USE	libmdadm/mdadm_errcode.h	/^	MANAGE_MD_IN_USE,$/;"	e	enum:__anon5
MANAGE_MarkFaulty	unitest/TestingLoop.cpp	/^	MANAGE_MarkFaulty = 'f',$/;"	e	enum:__anon2	file:
MANAGE_NEED_MEANINGFUL_DISPOSITION	libmdadm/mdadm_errcode.h	/^	MANAGE_NEED_MEANINGFUL_DISPOSITION,$/;"	e	enum:__anon5
MANAGE_NOT_BLOCK_DEV	libmdadm/mdadm_errcode.h	/^	MANAGE_NOT_BLOCK_DEV,$/;"	e	enum:__anon5
MANAGE_NOT_MEANINGFUL_FOR_ARRAY	libmdadm/mdadm_errcode.h	/^	MANAGE_NOT_MEANINGFUL_FOR_ARRAY,$/;"	e	enum:__anon5
MANAGE_NOT_MEANINGFUL_FOR_R10	libmdadm/mdadm_errcode.h	/^	MANAGE_NOT_MEANINGFUL_FOR_R10,$/;"	e	enum:__anon5
MANAGE_NO_MATCHING_DEV	libmdadm/mdadm_errcode.h	/^	MANAGE_NO_MATCHING_DEV,$/;"	e	enum:__anon5
MANAGE_OPEN_SYSFD_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_OPEN_SYSFD_FAIL,$/;"	e	enum:__anon5
MANAGE_REMOVE_CANNOT_GET_EXCLUSIVE_ACCESS	libmdadm/mdadm_errcode.h	/^	MANAGE_REMOVE_CANNOT_GET_EXCLUSIVE_ACCESS = 271,$/;"	e	enum:__anon5
MANAGE_REMOVE_GET_CONTAINER_NAME_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_REMOVE_GET_CONTAINER_NAME_FAIL,$/;"	e	enum:__anon5
MANAGE_REMOVE_HOT_REMOVE_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_REMOVE_HOT_REMOVE_FAIL,$/;"	e	enum:__anon5
MANAGE_REMOVE_IN_USE	libmdadm/mdadm_errcode.h	/^	MANAGE_REMOVE_IN_USE,$/;"	e	enum:__anon5
MANAGE_REMOVE_NOT_MEMBER	libmdadm/mdadm_errcode.h	/^	MANAGE_REMOVE_NOT_MEMBER,$/;"	e	enum:__anon5
MANAGE_REPLACE_CANNOT_FIND_MD_INFO	libmdadm/mdadm_errcode.h	/^	MANAGE_REPLACE_CANNOT_FIND_MD_INFO,$/;"	e	enum:__anon5
MANAGE_REPLACE_DISK_NOT_ACTIVE	libmdadm/mdadm_errcode.h	/^	MANAGE_REPLACE_DISK_NOT_ACTIVE,$/;"	e	enum:__anon5
MANAGE_REPLACE_MD_NOT_FOUND	libmdadm/mdadm_errcode.h	/^	MANAGE_REPLACE_MD_NOT_FOUND,$/;"	e	enum:__anon5
MANAGE_REPLACE_REQUEST_REPLACEMENT_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_REPLACE_REQUEST_REPLACEMENT_FAIL,$/;"	e	enum:__anon5
MANAGE_REPLACE_UNSUPPORTED_METADATA_VER	libmdadm/mdadm_errcode.h	/^	MANAGE_REPLACE_UNSUPPORTED_METADATA_VER = 291,$/;"	e	enum:__anon5
MANAGE_Readd	unitest/TestingLoop.cpp	/^	MANAGE_Readd = 'A',$/;"	e	enum:__anon2	file:
MANAGE_Remove	unitest/TestingLoop.cpp	/^	MANAGE_Remove = 'r',$/;"	e	enum:__anon2	file:
MANAGE_Replace	unitest/TestingLoop.cpp	/^	MANAGE_Replace = 'R',$/;"	e	enum:__anon2	file:
MANAGE_SET_FAULTY_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_SET_FAULTY_FAIL,$/;"	e	enum:__anon5
MANAGE_STOP_CONTAINER_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_STOP_CONTAINER_FAIL,$/;"	e	enum:__anon5
MANAGE_STOP_MD_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_STOP_MD_FAIL = 201,$/;"	e	enum:__anon5
MANAGE_UNSUPPORTED_ARRAY	libmdadm/mdadm_errcode.h	/^	MANAGE_UNSUPPORTED_ARRAY,$/;"	e	enum:__anon5
MANAGE_WITH_ACTIVE_DISK	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_ACTIVE_DISK,$/;"	e	enum:__anon5
MANAGE_WITH_ARG_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_ARG_FAIL,$/;"	e	enum:__anon5
MANAGE_WITH_CANNOT_FOUND_MD_INFO	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_CANNOT_FOUND_MD_INFO = 311,$/;"	e	enum:__anon5
MANAGE_WITH_FAULTY_DISK	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_FAULTY_DISK,$/;"	e	enum:__anon5
MANAGE_WITH_MD_NOT_FOUND	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_MD_NOT_FOUND,$/;"	e	enum:__anon5
MANAGE_WITH_PREFER_REPLACEMENT_FAIL	libmdadm/mdadm_errcode.h	/^	MANAGE_WITH_PREFER_REPLACEMENT_FAIL,$/;"	e	enum:__anon5
MAP_0	libmdadm/super-intel.c	112;"	d	file:
MAP_1	libmdadm/super-intel.c	113;"	d	file:
MAP_DIR	libmdadm/mdadm.h	76;"	d
MAP_DIRNAME	libmdadm/mapfile.c	52;"	d	file:
MAP_FILE	libmdadm/mdadm.h	82;"	d
MAP_LOCK	libmdadm/mapfile.c	51;"	d	file:
MAP_NEW	libmdadm/mapfile.c	50;"	d	file:
MAP_READ	libmdadm/mapfile.c	49;"	d	file:
MAP_X	libmdadm/super-intel.c	114;"	d	file:
MAX_32_NUM	libmke2fs/mke2fs.c	61;"	d	file:
MAX_DEVS	libmdadm/super1.c	104;"	d	file:
MAX_DISKS	libmdadm/mdadm.h	1509;"	d
MAX_DISK_NUM	libmdadm/mdadm_other.h	4;"	d
MAX_RAID_SERIAL_LEN	libmdadm/super-intel.c	42;"	d	file:
MAX_SB_SIZE	libmdadm/super1.c	101;"	d	file:
MAX_SIGNATURE_LENGTH	libmdadm/super-intel.c	41;"	d	file:
MAX_SIZE	libmdadm/mdadm.h	1514;"	d
MBR	libmdadm/part.h	/^struct MBR {$/;"	s
MBR::magic	libmdadm/part.h	/^	__u16 magic;$/;"	m	struct:MBR	access:public
MBR::pad	libmdadm/part.h	/^	__u8 pad[446];$/;"	m	struct:MBR	access:public
MBR::parts	libmdadm/part.h	/^	struct MBR_part_record parts[MBR_PARTITIONS];$/;"	m	struct:MBR	typeref:struct:MBR::MBR_part_record	access:public
MBR_GPT_PARTITION_TYPE	libmdadm/part.h	52;"	d
MBR_PARTITIONS	libmdadm/part.h	30;"	d
MBR_SIGNATURE_MAGIC	libmdadm/part.h	29;"	d
MBR_part_record	libmdadm/part.h	/^struct MBR_part_record {$/;"	s
MBR_part_record::blocks_num	libmdadm/part.h	/^  __u32 blocks_num;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::bootable	libmdadm/part.h	/^  __u8 bootable;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::first_cyl	libmdadm/part.h	/^  __u8 first_cyl;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::first_head	libmdadm/part.h	/^  __u8 first_head;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::first_sect_lba	libmdadm/part.h	/^  __u32 first_sect_lba;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::first_sector	libmdadm/part.h	/^  __u8 first_sector;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::last_cyl	libmdadm/part.h	/^  __u8 last_cyl;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::last_head	libmdadm/part.h	/^  __u8 last_head;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::last_sector	libmdadm/part.h	/^  __u8 last_sector;$/;"	m	struct:MBR_part_record	access:public
MBR_part_record::part_type	libmdadm/part.h	/^  __u8 part_type;$/;"	m	struct:MBR_part_record	access:public
MDMON_DIR	libmdadm/mdadm.h	93;"	d
MD_DISK_ACTIVE	libmdadm/md_p.h	78;"	d
MD_DISK_FAULTY	libmdadm/md_p.h	77;"	d
MD_DISK_REMOVED	libmdadm/md_p.h	80;"	d
MD_DISK_REPLACEMENT	libmdadm/md_p.h	87;"	d
MD_DISK_SYNC	libmdadm/md_p.h	79;"	d
MD_DISK_WRITEMOSTLY	libmdadm/md_p.h	82;"	d
MD_FEATURE_ALL	libmdadm/super1.c	128;"	d	file:
MD_FEATURE_BAD_BLOCKS	libmdadm/super1.c	118;"	d	file:
MD_FEATURE_BITMAP_OFFSET	libmdadm/super1.c	113;"	d	file:
MD_FEATURE_NEW_OFFSET	libmdadm/super1.c	127;"	d	file:
MD_FEATURE_RECOVERY_OFFSET	libmdadm/super1.c	114;"	d	file:
MD_FEATURE_REPLACEMENT	libmdadm/super1.c	119;"	d	file:
MD_FEATURE_RESHAPE_ACTIVE	libmdadm/super1.c	117;"	d	file:
MD_FEATURE_RESHAPE_BACKWARDS	libmdadm/super1.c	123;"	d	file:
MD_MAJOR	libmdadm/mdadm.h	59;"	d
MD_MAJOR	libmdadm/mdmon.h	68;"	d
MD_NEW_SIZE_BLOCKS	libmdadm/md_p.h	49;"	d
MD_NEW_SIZE_SECTORS	libmdadm/md_p.h	48;"	d
MD_RESERVED_BLOCKS	libmdadm/md_p.h	46;"	d
MD_RESERVED_BYTES	libmdadm/md_p.h	44;"	d
MD_RESERVED_SECTORS	libmdadm/md_p.h	45;"	d
MD_SB_BBM_ERRORS	libmdadm/md_p.h	105;"	d
MD_SB_BITMAP_PRESENT	libmdadm/md_p.h	109;"	d
MD_SB_BLOCKS	libmdadm/md_p.h	53;"	d
MD_SB_BLOCK_CONTAINER_RESHAPE	libmdadm/md_p.h	106;"	d
MD_SB_BLOCK_VOLUME	libmdadm/md_p.h	107;"	d
MD_SB_BYTES	libmdadm/md_p.h	51;"	d
MD_SB_CLEAN	libmdadm/md_p.h	103;"	d
MD_SB_DESCRIPTOR_OFFSET	libmdadm/md_p.h	62;"	d
MD_SB_DESCRIPTOR_WORDS	libmdadm/md_p.h	68;"	d
MD_SB_DISKS	libmdadm/md_p.h	69;"	d
MD_SB_DISKS_OFFSET	libmdadm/md_p.h	61;"	d
MD_SB_DISKS_WORDS	libmdadm/md_p.h	70;"	d
MD_SB_EQUAL_WORDS	libmdadm/md_p.h	72;"	d
MD_SB_ERRORS	libmdadm/md_p.h	104;"	d
MD_SB_GENERIC_CONSTANT_WORDS	libmdadm/md_p.h	64;"	d
MD_SB_GENERIC_OFFSET	libmdadm/md_p.h	59;"	d
MD_SB_GENERIC_STATE_WORDS	libmdadm/md_p.h	65;"	d
MD_SB_GENERIC_WORDS	libmdadm/md_p.h	66;"	d
MD_SB_MAGIC	libmdadm/md_p.h	98;"	d
MD_SB_PERSONALITY_OFFSET	libmdadm/md_p.h	60;"	d
MD_SB_PERSONALITY_WORDS	libmdadm/md_p.h	67;"	d
MD_SB_RESERVED_WORDS	libmdadm/md_p.h	71;"	d
MD_SB_SECTORS	libmdadm/md_p.h	54;"	d
MD_SB_WORDS	libmdadm/md_p.h	52;"	d
METADATA	libmdadm/mdadm.h	1326;"	d
MIGR_GEN_MIGR	libmdadm/super-intel.c	152;"	d	file:
MIGR_INIT	libmdadm/super-intel.c	149;"	d	file:
MIGR_REBUILD	libmdadm/super-intel.c	150;"	d	file:
MIGR_REC_BUF_SIZE	libmdadm/super-intel.c	246;"	d	file:
MIGR_REC_POSITION	libmdadm/super-intel.c	247;"	d	file:
MIGR_REPAIR	libmdadm/super-intel.c	154;"	d	file:
MIGR_STATE_CHANGE	libmdadm/super-intel.c	153;"	d	file:
MIGR_VERIFY	libmdadm/super-intel.c	151;"	d	file:
MINOR	libmke2fs/util.c	90;"	d	file:
MISC	libmdadm/mdadm.h	/^	MISC,$/;"	e	enum:mode
MKE2FS_ABORT_CHECK_PROFILE	libmke2fs/mke2fs_err.h	/^	MKE2FS_ABORT_CHECK_PROFILE,$/;"	e	enum:__anon3
MKE2FS_BAD_PRIMARY_SB_GROUP_DESCRIPTOR	libmke2fs/mke2fs_err.h	/^	MKE2FS_BAD_PRIMARY_SB_GROUP_DESCRIPTOR,$/;"	e	enum:__anon3
MKE2FS_BLOCKSIZE_TOO_SMALL	libmke2fs/mke2fs_err.h	/^	MKE2FS_BLOCKSIZE_TOO_SMALL,$/;"	e	enum:__anon3
MKE2FS_BLOCKS_PER_GROUP_NOT_MULTIPLE_OF_8	libmke2fs/mke2fs_err.h	/^	MKE2FS_BLOCKS_PER_GROUP_NOT_MULTIPLE_OF_8,$/;"	e	enum:__anon3
MKE2FS_BLOCK_PER_GROUP_OUT_OF_RANGE	libmke2fs/mke2fs_err.h	/^	MKE2FS_BLOCK_PER_GROUP_OUT_OF_RANGE,$/;"	e	enum:__anon3
MKE2FS_CHECK_MOUNT_POINT_FAIL	libmke2fs/mke2fs_err.h	/^	MKE2FS_CHECK_MOUNT_POINT_FAIL,$/;"	e	enum:__anon3
MKE2FS_CLUSTER_SIZE_SMALLER_THAN_BLOCK_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_CLUSTER_SIZE_SMALLER_THAN_BLOCK_SIZE,$/;"	e	enum:__anon3
MKE2FS_COULD_NOT_DETERMINE_DEV_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_COULD_NOT_DETERMINE_DEV_SIZE,$/;"	e	enum:__anon3
MKE2FS_COULD_NOT_PARSE_UUID	libmke2fs/mke2fs_err.h	/^	MKE2FS_COULD_NOT_PARSE_UUID,$/;"	e	enum:__anon3
MKE2FS_COULD_NOT_WRITE_BLOCKS_IN_INODE_TABLES	libmke2fs/mke2fs_err.h	/^	MKE2FS_COULD_NOT_WRITE_BLOCKS_IN_INODE_TABLES,$/;"	e	enum:__anon3
MKE2FS_DEVICE_SIZE_REPORT_TO_BE_0	libmke2fs/mke2fs_err.h	/^	MKE2FS_DEVICE_SIZE_REPORT_TO_BE_0,$/;"	e	enum:__anon3
MKE2FS_EMPTY_STRING	libmke2fs/mke2fs_err.h	/^	MKE2FS_EMPTY_STRING,$/;"	e	enum:__anon3
MKE2FS_ENABLE_MULTIPLE_MOUNT_PROTECTION_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_ENABLE_MULTIPLE_MOUNT_PROTECTION_ERROR,$/;"	e	enum:__anon3
MKE2FS_EXT2FS_CLOSE_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_EXT2FS_CLOSE_ERROR,$/;"	e	enum:__anon3
MKE2FS_EXTENTS_ENABLED_FOR_64BIT_FS_NOLY	libmke2fs/mke2fs_err.h	/^	MKE2FS_EXTENTS_ENABLED_FOR_64BIT_FS_NOLY,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_ADD_JOURNAL	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_ADD_JOURNAL,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_ALLOCATE_FS_TABLES	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_ALLOCATE_FS_TABLES,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_ALLOCATE_MEMORY	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_ALLOCATE_MEMORY,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_CONVERT_SUBCLUSTER_BITMAP	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_CONVERT_SUBCLUSTER_BITMAP,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_CREATE_JOURNAL	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_CREATE_JOURNAL,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_CREATE_ROOT_DIR	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_CREATE_ROOT_DIR,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_DETERMINE_FS_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_DETERMINE_FS_SIZE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_DETERMINE_HW_SECTOR_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_DETERMINE_HW_SECTOR_SIZE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_DETERMINE_MOUNT_STATUS	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_DETERMINE_MOUNT_STATUS,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_DETERMINE_PHY_SECTOR_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_DETERMINE_PHY_SECTOR_SIZE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_GET_BLKID_CACHE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_GET_BLKID_CACHE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_INITIALIZE_JOURNAL_SUPERBLOCK	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_INITIALIZE_JOURNAL_SUPERBLOCK,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_INITIALIZE_SUPERBLOCK	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_INITIALIZE_SUPERBLOCK,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_OPEN_BB_FILE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_OPEN_BB_FILE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_OPEN_JOURNAL_DEV	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_OPEN_JOURNAL_DEV,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_PARSE_FSTYPE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_PARSE_FSTYPE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_READ_BB_FILE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_READ_BB_FILE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_READ_ROOT_INODE	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_READ_ROOT_INODE,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_SET_ROOT_INODE_OWNERSHIP	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_SET_ROOT_INODE_OWNERSHIP,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_WRITE_JOURNAL_SB	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_WRITE_JOURNAL_SB,$/;"	e	enum:__anon3
MKE2FS_FAIL_TO_ZERO_JOURNAL_DEV	libmke2fs/mke2fs_err.h	/^	MKE2FS_FAIL_TO_ZERO_JOURNAL_DEV,$/;"	e	enum:__anon3
MKE2FS_FEATURES_CANNOT_ENABLED_SIMULTANEOUSLY	libmke2fs/mke2fs_err.h	/^	MKE2FS_FEATURES_CANNOT_ENABLED_SIMULTANEOUSLY,$/;"	e	enum:__anon3
MKE2FS_FLEX_BG_FEATURE_NOT_ENABLED	libmke2fs/mke2fs_err.h	/^	MKE2FS_FLEX_BG_FEATURE_NOT_ENABLED,$/;"	e	enum:__anon3
MKE2FS_FLEX_BG_SIZE_NOT_POWER_OF_2	libmke2fs/mke2fs_err.h	/^	MKE2FS_FLEX_BG_SIZE_NOT_POWER_OF_2,$/;"	e	enum:__anon3
MKE2FS_FS_FEATURE_NOT_SUPPORT	libmke2fs/mke2fs_err.h	/^	MKE2FS_FS_FEATURE_NOT_SUPPORT,$/;"	e	enum:__anon3
MKE2FS_ILLEGAL_BLOCKS_PER_GROUP	libmke2fs/mke2fs_err.h	/^	MKE2FS_ILLEGAL_BLOCKS_PER_GROUP,$/;"	e	enum:__anon3
MKE2FS_INVALID_BB_LIST	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_BB_LIST,$/;"	e	enum:__anon3
MKE2FS_INVALID_BLOCK_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_BLOCK_SIZE,$/;"	e	enum:__anon3
MKE2FS_INVALID_CLUSTER_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_CLUSTER_SIZE,$/;"	e	enum:__anon3
MKE2FS_INVALID_FS_OPTIONS	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_FS_OPTIONS,$/;"	e	enum:__anon3
MKE2FS_INVALID_HANDLE	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_HANDLE = 1001,$/;"	e	enum:__anon3
MKE2FS_INVALID_INODE_RATIO	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_INODE_RATIO,$/;"	e	enum:__anon3
MKE2FS_INVALID_INODE_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_INODE_SIZE,$/;"	e	enum:__anon3
MKE2FS_INVALID_MOUNT_OPTIONS	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_MOUNT_OPTIONS,$/;"	e	enum:__anon3
MKE2FS_INVALID_RESERVED_RATIO	libmke2fs/mke2fs_err.h	/^	MKE2FS_INVALID_RESERVED_RATIO,$/;"	e	enum:__anon3
MKE2FS_JOURNAL_BLOCKSIZE_SMALLER_THAN_MINIMUM_BLOCKSIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_JOURNAL_BLOCKSIZE_SMALLER_THAN_MINIMUM_BLOCKSIZE,$/;"	e	enum:__anon3
MKE2FS_MARK_BAD_BLOCKS_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_MARK_BAD_BLOCKS_ERROR,$/;"	e	enum:__anon3
MKE2FS_MOUNTED	libmke2fs/mke2fs_err.h	/^	MKE2FS_MOUNTED,$/;"	e	enum:__anon3
MKE2FS_NEED_EXTENTS_FEATURE	libmke2fs/mke2fs_err.h	/^	MKE2FS_NEED_EXTENTS_FEATURE,$/;"	e	enum:__anon3
MKE2FS_NOT_BLOCK_DEV	libmke2fs/mke2fs_err.h	/^	MKE2FS_NOT_BLOCK_DEV,$/;"	e	enum:__anon3
MKE2FS_NOT_SUPPORT_JOURNAL	libmke2fs/mke2fs_err.h	/^	MKE2FS_NOT_SUPPORT_JOURNAL,$/;"	e	enum:__anon3
MKE2FS_NOT_SUPPORT_RESERVED_ONLINE_RESIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_NOT_SUPPORT_RESERVED_ONLINE_RESIZE,$/;"	e	enum:__anon3
MKE2FS_NOT_SUPPORT_SPARSE_SB	libmke2fs/mke2fs_err.h	/^	MKE2FS_NOT_SUPPORT_SPARSE_SB,$/;"	e	enum:__anon3
MKE2FS_OOM_ERASING_SECTORS	libmke2fs/mke2fs_err.h	/^	MKE2FS_OOM_ERASING_SECTORS,$/;"	e	enum:__anon3
MKE2FS_PROFILE_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_PROFILE_ERROR,$/;"	e	enum:__anon3
MKE2FS_RESERVING_BLOCKS_FOR_ONLINE_RESIZE_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_RESERVING_BLOCKS_FOR_ONLINE_RESIZE_ERROR,$/;"	e	enum:__anon3
MKE2FS_SETUP_TDB_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_SETUP_TDB_ERROR,$/;"	e	enum:__anon3
MKE2FS_TOO_MANY_INODES	libmke2fs/mke2fs_err.h	/^	MKE2FS_TOO_MANY_INODES,	$/;"	e	enum:__anon3
MKE2FS_UNAME_ERROR	libmke2fs/mke2fs_err.h	/^	MKE2FS_UNAME_ERROR,$/;"	e	enum:__anon3
MKE2FS_UNKNOWN_OS	libmke2fs/mke2fs_err.h	/^	MKE2FS_UNKNOWN_OS,$/;"	e	enum:__anon3
MKE2FS_UNSUITABLE_BLOCKSIZE_FOR_32BIT	libmke2fs/mke2fs_err.h	/^	MKE2FS_UNSUITABLE_BLOCKSIZE_FOR_32BIT,$/;"	e	enum:__anon3
MKE2FS_UNSUITABLE_CLUSTER_SIZE	libmke2fs/mke2fs_err.h	/^	MKE2FS_UNSUITABLE_CLUSTER_SIZE,$/;"	e	enum:__anon3
MKE2FS_UNSUITABLE_INODE_CONFIG	libmke2fs/mke2fs_err.h	/^	MKE2FS_UNSUITABLE_INODE_CONFIG,	$/;"	e	enum:__anon3
MONITOR	libmdadm/mdadm.h	/^	MONITOR,$/;"	e	enum:mode
MPB_ATTRIB_2TB	libmdadm/super-intel.c	69;"	d	file:
MPB_ATTRIB_2TB_DISK	libmdadm/super-intel.c	62;"	d	file:
MPB_ATTRIB_BBM	libmdadm/super-intel.c	64;"	d	file:
MPB_ATTRIB_CHECKSUM_VERIFY	libmdadm/super-intel.c	73;"	d	file:
MPB_ATTRIB_EXP_STRIPE_SIZE	libmdadm/super-intel.c	57;"	d	file:
MPB_ATTRIB_IGNORED	libmdadm/super-intel.c	87;"	d	file:
MPB_ATTRIB_NEVER_USE	libmdadm/super-intel.c	71;"	d	file:
MPB_ATTRIB_NEVER_USE2	libmdadm/super-intel.c	67;"	d	file:
MPB_ATTRIB_NVM	libmdadm/super-intel.c	60;"	d	file:
MPB_ATTRIB_RAID0	libmdadm/super-intel.c	45;"	d	file:
MPB_ATTRIB_RAID1	libmdadm/super-intel.c	47;"	d	file:
MPB_ATTRIB_RAID10	libmdadm/super-intel.c	49;"	d	file:
MPB_ATTRIB_RAID1E	libmdadm/super-intel.c	51;"	d	file:
MPB_ATTRIB_RAID5	libmdadm/super-intel.c	53;"	d	file:
MPB_ATTRIB_RAIDCNG	libmdadm/super-intel.c	55;"	d	file:
MPB_ATTRIB_SUPPORTED	libmdadm/super-intel.c	77;"	d	file:
MPB_SECTOR_CNT	libmdadm/super-intel.c	89;"	d	file:
MPB_SIGNATURE	libmdadm/super-intel.c	31;"	d	file:
MPB_SIG_LEN	libmdadm/super-intel.c	32;"	d	file:
MPB_VERSION_3OR4_DISK_ARRAY	libmdadm/super-intel.c	36;"	d	file:
MPB_VERSION_5OR6_DISK_ARRAY	libmdadm/super-intel.c	38;"	d	file:
MPB_VERSION_ATTRIBS	libmdadm/super-intel.c	40;"	d	file:
MPB_VERSION_CNG	libmdadm/super-intel.c	39;"	d	file:
MPB_VERSION_MANY_VOLUMES_PER_ARRAY	libmdadm/super-intel.c	35;"	d	file:
MPB_VERSION_RAID0	libmdadm/super-intel.c	33;"	d	file:
MPB_VERSION_RAID1	libmdadm/super-intel.c	34;"	d	file:
MPB_VERSION_RAID5	libmdadm/super-intel.c	37;"	d	file:
MSG_MAX_LEN	libmdadm/msg.h	37;"	d
MYstrdup	libmke2fs/profile.c	/^static char *MYstrdup (const char *s)$/;"	f	file:	signature:(const char *s)
Mailaddr	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
Mailfrom	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
MakeDirectory	test_utils.cpp	/^bool MakeDirectory(const string& pathname)$/;"	f	signature:(const string& pathname)
MakeDirectory	test_utils.h	/^extern bool MakeDirectory(const string& pathname);$/;"	p	signature:(const string& pathname)
MakeFilesystemProgress	FilesystemManager.cpp	/^void FilesystemManager::MakeFilesystemProgress(void *pData, int stat,$/;"	f	class:FilesystemManager	signature:(void *pData, int stat, int current, int total)
MakeFilesystemProgress	FilesystemManager.h	/^	static void MakeFilesystemProgress(void *pData, int stat,$/;"	p	class:FilesystemManager	access:public	signature:(void *pData, int stat, int current, int total)
ManageRAIDSubdevs	RAIDManager.cpp	/^bool RAIDManager::ManageRAIDSubdevs(const string& mddev, vector<string>& vDevList, int operation)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList, int operation)
ManageRAIDSubdevs	RAIDManager.h	/^	bool ManageRAIDSubdevs(const string& mddev, vector<string>& vDevList, int operation);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList, int operation)
Manage_add	libmdadm/Manage.c	/^int Manage_add(int fd, int tfd, struct mddev_dev *dv,$/;"	f	signature:(int fd, int tfd, struct mddev_dev *dv, struct supertype *tst, mdu_array_info_t *array, int force, int verbose, char *devname, char *update, unsigned long rdev, unsigned long long array_size)
Manage_remove	libmdadm/Manage.c	/^int Manage_remove(struct supertype *tst, int fd, struct mddev_dev *dv,$/;"	f	signature:(struct supertype *tst, int fd, struct mddev_dev *dv, int sysfd, unsigned long rdev, int verbose, char *devname)
Manage_replace	libmdadm/Manage.c	/^int Manage_replace(struct supertype *tst, int fd, struct mddev_dev *dv,$/;"	f	signature:(struct supertype *tst, int fd, struct mddev_dev *dv, unsigned long rdev, int verbose, char *devname)
Manage_ro	libmdadm/Manage.c	/^int Manage_ro(char *devname, int fd, int readonly)$/;"	f	signature:(char *devname, int fd, int readonly)
Manage_ro	libmdadm/mdadm.h	/^extern int Manage_ro(char *devname, int fd, int readonly);$/;"	p	signature:(char *devname, int fd, int readonly)
Manage_run	libmdadm/Manage.c	/^int Manage_run(char *devname, int fd, struct context *c)$/;"	f	signature:(char *devname, int fd, struct context *c)
Manage_run	libmdadm/mdadm.h	/^extern int Manage_run(char *devname, int fd, struct context *c);$/;"	p	signature:(char *devname, int fd, struct context *c)
Manage_stop	libmdadm/Manage.c	/^int Manage_stop(char *devname, int fd, int verbose, int will_retry)$/;"	f	signature:(char *devname, int fd, int verbose, int will_retry)
Manage_stop	libmdadm/mdadm.h	/^extern int Manage_stop(char *devname, int fd, int quiet,$/;"	p	signature:(char *devname, int fd, int quiet, int will_retry)
Manage_subdevs	libmdadm/Manage.c	/^int Manage_subdevs(char *devname, int fd,$/;"	f	signature:(char *devname, int fd, struct mddev_dev *devlist, int verbose, int test, char *update, int force)
Manage_subdevs	libmdadm/mdadm.h	/^extern int Manage_subdevs(char *devname, int fd,$/;"	p	signature:(char *devname, int fd, struct mddev_dev *devlist, int verbose, int test, char *update, int force)
Manage_with	libmdadm/Manage.c	/^int Manage_with(struct supertype *tst, int fd, struct mddev_dev *dv,$/;"	f	signature:(struct supertype *tst, int fd, struct mddev_dev *dv, unsigned long rdev, int verbose, char *devname)
MarkFaultyMDDisks	RAIDManager.cpp	/^bool RAIDManager::MarkFaultyMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
MarkFaultyMDDisks	RAIDManager.h	/^	bool MarkFaultyMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
MaxSector	libmdadm/mdadm.h	222;"	d
MdpMinorShift	libmdadm/mdadm.h	60;"	d
MiscDiskInfo	RAIDManager.h	/^	MiscDiskInfo()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
MiscDiskInfo	RAIDManager.h	/^	MiscDiskInfo(const string& link, eDiskType type)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const string& link, eDiskType type)
MiscDiskInfo	RAIDManager.h	/^struct MiscDiskInfo {$/;"	s
MiscDiskInfo::Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
MiscDiskInfo::MiscDiskInfo	RAIDManager.h	/^	MiscDiskInfo()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
MiscDiskInfo::MiscDiskInfo	RAIDManager.h	/^	MiscDiskInfo(const string& link, eDiskType type)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const string& link, eDiskType type)
MiscDiskInfo::m_diskType	RAIDManager.h	/^	eDiskType m_diskType;$/;"	m	struct:MiscDiskInfo	access:public
MiscDiskInfo::m_strMDDev	RAIDManager.h	/^	string m_strMDDev;$/;"	m	struct:MiscDiskInfo	access:public
MiscDiskInfo::m_strSymLink	RAIDManager.h	/^	string m_strSymLink;$/;"	m	struct:MiscDiskInfo	access:public
MiscDiskInfo::operator =	RAIDManager.h	/^	MiscDiskInfo& operator=(const MiscDiskInfo& rhs)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const MiscDiskInfo& rhs)
MiscDiskInfo::operator ==	RAIDManager.h	/^	bool operator==(const MiscDiskInfo& rhs)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const MiscDiskInfo& rhs)
MiscDiskInfo::~MiscDiskInfo	RAIDManager.h	/^	~MiscDiskInfo()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
ModeMask	libmdadm/mdadm.h	1439;"	d
ModeShift	libmdadm/mdadm.h	1440;"	d
Modes	libmdadm/mdadm.h	1431;"	d
Monitor	libmdadm/Monitor.c	/^int Monitor(struct mddev_dev *devlist,$/;"	f	signature:(struct mddev_dev *devlist, char *mailaddr, char *alert_cmd, struct context *c, int daemonise, int oneshot, int dosyslog, char *pidfile, int increments, int share)
Monitor	libmdadm/mdadm.h	/^extern int Monitor(struct mddev_dev *devlist,$/;"	p	signature:(struct mddev_dev *devlist, char *mailaddr, char *alert_cmd, struct context *c, int daemonise, int oneshot, int dosyslog, char *pidfile, int increments, int share)
Mount	FilesystemManager.cpp	/^bool FilesystemManager::Mount(const string& strMountPoint)$/;"	f	class:FilesystemManager	signature:(const string& strMountPoint)
Mount	FilesystemManager.h	/^	bool Mount(const string& strMountPoint);$/;"	p	class:FilesystemManager	access:public	signature:(const string& strMountPoint)
Mount	RAIDManager.cpp	/^bool RAIDManager::Mount(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
Mount	RAIDManager.h	/^	bool Mount(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
NEEDED	libmdadm/bitmap.h	94;"	d
NEEDED_MASK	libmdadm/bitmap.h	91;"	d
NOBYFOUR	libmdadm/crc32.c	56;"	d	file:
NO_INLINE_FUNCS	libmke2fs/ext2fs.h	29;"	d
NO_RESHAPE	libmdadm/mdadm.h	200;"	d
NUM_BLOCKS_DIRTY_STRIPE_REGION	libmdadm/super-intel.c	91;"	d	file:
N_	libmke2fs/prof_err.c	8;"	d	file:
Name	libmdadm/mdadm.h	267;"	d
NoPersist	libmdadm/mdadm.h	1437;"	d
OF	libmdadm/crc32.c	53;"	d	file:
ONE_MEG	libmdadm/super1.c	2360;"	d	file:
OPERATION_CASE	unitest/TestingLoop.cpp	33;"	d	file:
OP_ADDDISK	unitest/TestingLoop.cpp	/^	OP_ADDDISK = 'a',$/;"	e	enum:__anon1	file:
OP_ASSEMBLERAID	unitest/TestingLoop.cpp	/^	OP_ASSEMBLERAID = 'A',$/;"	e	enum:__anon1	file:
OP_CREATERAID	unitest/TestingLoop.cpp	/^	OP_CREATERAID = 'C',$/;"	e	enum:__anon1	file:
OP_DELETERAID	unitest/TestingLoop.cpp	/^	OP_DELETERAID = 'D',$/;"	e	enum:__anon1	file:
OP_DONOTHING	unitest/TestingLoop.cpp	/^	OP_DONOTHING = 'N',$/;"	e	enum:__anon1	file:
OP_MANAGEMDDISK	unitest/TestingLoop.cpp	/^	OP_MANAGEMDDISK = 'M',$/;"	e	enum:__anon1	file:
OP_REMDISK	unitest/TestingLoop.cpp	/^	OP_REMDISK = 'r',$/;"	e	enum:__anon1	file:
OP_STOPRAID	unitest/TestingLoop.cpp	/^	OP_STOPRAID = 'S',$/;"	e	enum:__anon1	file:
OpenMDDev	RAIDManager.cpp	/^int RAIDManager::OpenMDDev(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
OpenMDDev	RAIDManager.h	/^	int OpenMDDev(const string& mddev);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev)
PAGEPTR_BLOCK_MASK	libmdadm/bitmap.h	119;"	d
PAGEPTR_BLOCK_RATIO	libmdadm/bitmap.h	115;"	d
PAGEPTR_BLOCK_SHIFT	libmdadm/bitmap.h	117;"	d
PAGE_BITS	libmdadm/bitmap.h	82;"	d
PAGE_BIT_SHIFT	libmdadm/bitmap.h	83;"	d
PAGE_COUNTER_MASK	libmdadm/bitmap.h	103;"	d
PAGE_COUNTER_RATIO	libmdadm/bitmap.h	99;"	d
PAGE_COUNTER_SHIFT	libmdadm/bitmap.h	101;"	d
PATH_MAX	libmdadm/mdadm.h	1495;"	d
PATH_SET	libmke2fs/mke2fs.c	654;"	d	file:
PRINT_RAID_DEBUG	libmdadm/md_u.h	24;"	d
PRINT_VALUE	libmke2fs/profile.c	1739;"	d	file:
PRINT_VALUES	libmke2fs/profile.c	1740;"	d	file:
PROFILE_FILE_DIRTY	libmke2fs/profile.c	101;"	d	file:
PROFILE_FILE_NO_RELOAD	libmke2fs/profile.c	102;"	d	file:
PROFILE_FILE_RW	libmke2fs/profile.c	100;"	d	file:
PROFILE_ITER_FINAL_SEEN	libmke2fs/profile.c	121;"	d	file:
PROFILE_ITER_LIST_SECTION	libmke2fs/profile.c	117;"	d	file:
PROFILE_ITER_LIST_SECTION	libmke2fs/profile.h	50;"	d
PROFILE_ITER_RELATIONS_ONLY	libmke2fs/profile.c	119;"	d	file:
PROFILE_ITER_RELATIONS_ONLY	libmke2fs/profile.h	52;"	d
PROFILE_ITER_SECTIONS_ONLY	libmke2fs/profile.c	118;"	d	file:
PROFILE_ITER_SECTIONS_ONLY	libmke2fs/profile.h	51;"	d
PROFILE_LAST_FILESPEC	libmke2fs/profile.c	127;"	d	file:
PROF_ADD_NOT_SECTION	libmke2fs/prof_err.h	12;"	d
PROF_BAD_BOOLEAN	libmke2fs/prof_err.h	36;"	d
PROF_BAD_GROUP_LVL	libmke2fs/prof_err.h	15;"	d
PROF_BAD_INTEGER	libmke2fs/prof_err.h	37;"	d
PROF_BAD_LINK_LIST	libmke2fs/prof_err.h	14;"	d
PROF_BAD_NAMESET	libmke2fs/prof_err.h	31;"	d
PROF_BAD_PARENT_PTR	libmke2fs/prof_err.h	16;"	d
PROF_EINVAL	libmke2fs/prof_err.h	19;"	d
PROF_END_OF_SECTIONS	libmke2fs/prof_err.h	30;"	d
PROF_EXISTS	libmke2fs/prof_err.h	35;"	d
PROF_EXTRA_CBRACE	libmke2fs/prof_err.h	24;"	d
PROF_FAIL_OPEN	libmke2fs/prof_err.h	34;"	d
PROF_INVALID_SECTION	libmke2fs/prof_err.h	29;"	d
PROF_MAGIC_FILE	libmke2fs/prof_err.h	33;"	d
PROF_MAGIC_FILE_DATA	libmke2fs/prof_err.h	38;"	d
PROF_MAGIC_ITERATOR	libmke2fs/prof_err.h	17;"	d
PROF_MAGIC_NODE	libmke2fs/prof_err.h	9;"	d
PROF_MAGIC_PROFILE	libmke2fs/prof_err.h	26;"	d
PROF_MAGIC_SECTION	libmke2fs/prof_err.h	27;"	d
PROF_MISSING_OBRACE	libmke2fs/prof_err.h	25;"	d
PROF_NO_PROFILE	libmke2fs/prof_err.h	32;"	d
PROF_NO_RELATION	libmke2fs/prof_err.h	11;"	d
PROF_NO_SECTION	libmke2fs/prof_err.h	10;"	d
PROF_READ_ONLY	libmke2fs/prof_err.h	20;"	d
PROF_RELATION_SYNTAX	libmke2fs/prof_err.h	23;"	d
PROF_SECTION_NOTOP	libmke2fs/prof_err.h	21;"	d
PROF_SECTION_SYNTAX	libmke2fs/prof_err.h	22;"	d
PROF_SECTION_WITH_VALUE	libmke2fs/prof_err.h	13;"	d
PROF_SET_SECTION_VALUE	libmke2fs/prof_err.h	18;"	d
PROF_TOPSECTION_ITER_NOSUPP	libmke2fs/prof_err.h	28;"	d
PROF_VERSION	libmke2fs/prof_err.h	8;"	d
PROTECT_ARRAY	libmdadm/md_u.h	36;"	d
PRS	libmke2fs/mke2fs.c	/^static int PRS(struct e2fs_cfg* handle, const char* name)$/;"	f	file:	signature:(struct e2fs_cfg* handle, const char* name)
PartPolicy	libmdadm/config.c	/^		Homehost, AutoMode, Policy, PartPolicy, LTEnd };$/;"	e	enum:linetype	file:
Policy	libmdadm/config.c	/^		Homehost, AutoMode, Policy, PartPolicy, LTEnd };$/;"	e	enum:linetype	file:
Program	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	e	enum:linetype	file:
QUERY_NULL_POINTER	libmdadm/mdadm_errcode.h	/^	QUERY_NULL_POINTER,									$/;"	e	enum:__anon5
QUERY_OPEN_DEV_FAIL	libmdadm/mdadm_errcode.h	/^	QUERY_OPEN_DEV_FAIL = 551,$/;"	e	enum:__anon5
Query	libmdadm/Query.c	/^int Query(char *dev)$/;"	f	signature:(char *dev)
Query	libmdadm/mdadm.h	/^extern int Query(char *dev);$/;"	p	signature:(char *dev)
Query_ToQueryResult	libmdadm/Query.c	/^int Query_ToQueryResult(char *dev, struct query_result* result)$/;"	f	signature:(char *dev, struct query_result* result)
R	libmdadm/sha1.c	311;"	d	file:
R0_TO_R10	libmdadm/super-intel.c	/^	R0_TO_R10$/;"	e	enum:takeover_direction	file:
R10_TO_R0	libmdadm/super-intel.c	/^	R10_TO_R0,$/;"	e	enum:takeover_direction	file:
RAIDDiskInfo	RAIDManager.h	/^	RAIDDiskInfo()$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
RAIDDiskInfo	RAIDManager.h	/^struct RAIDDiskInfo {$/;"	s
RAIDDiskInfo::Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
RAIDDiskInfo::RAIDDiskInfo	RAIDManager.h	/^	RAIDDiskInfo()$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
RAIDDiskInfo::SetHDDVendorInfomation	RAIDManager.h	/^	void SetHDDVendorInfomation() {$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
RAIDDiskInfo::m_RaidUUID	RAIDManager.h	/^	int32_t		m_RaidUUID[4];			\/* Get after Examine(). *\/$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_bHasMDSB	RAIDManager.h	/^	bool		m_bHasMDSB;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_iMajor	RAIDManager.h	/^	int32_t		m_iMajor;				\/* For confirming whether disk is valid or not. *\/$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_iMinor	RAIDManager.h	/^	int32_t		m_iMinor;				\/* For confirming whether disk is valid or not. *\/$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_iRaidDiskNum	RAIDManager.h	/^	int32_t		m_iRaidDiskNum;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_iState	RAIDManager.h	/^	int32_t		m_iState;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_llCapacity	RAIDManager.h	/^	int64_t		m_llCapacity;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_miscInfo	RAIDManager.h	/^	MiscDiskInfo m_miscInfo;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strDevName	RAIDManager.h	/^	string		m_strDevName;			\/* Device node *\/$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strFirmwareVersion	RAIDManager.h	/^	string		m_strFirmwareVersion;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strModel	RAIDManager.h	/^	string		m_strModel;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strSerialNum	RAIDManager.h	/^	string		m_strSerialNum;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strState	RAIDManager.h	/^	string		m_strState;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::m_strVendor	RAIDManager.h	/^	string		m_strVendor;$/;"	m	struct:RAIDDiskInfo	access:public
RAIDDiskInfo::operator =	RAIDManager.h	/^	RAIDDiskInfo& operator=(const RAIDDiskInfo& rhs)$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const RAIDDiskInfo& rhs)
RAIDDiskInfo::operator =	RAIDManager.h	/^	RAIDDiskInfo& operator=(const struct array_disk_info& rhs)$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const struct array_disk_info& rhs)
RAIDDiskInfo::operator ==	RAIDManager.h	/^	bool operator==(const RAIDDiskInfo& rhs) const$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const RAIDDiskInfo& rhs) const
RAIDDiskInfo::operator ==	RAIDManager.h	/^	bool operator==(const string& rhs) const$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const string& rhs) const
RAIDDiskInfo::~RAIDDiskInfo	RAIDManager.h	/^	~RAIDDiskInfo() {}$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
RAIDInfo	RAIDManager.h	/^	RAIDInfo()$/;"	f	struct:RAIDInfo	access:public	signature:()
RAIDInfo	RAIDManager.h	/^struct RAIDInfo {$/;"	s
RAIDInfo::Dump	RAIDManager.h	/^	void Dump()$/;"	f	struct:RAIDInfo	access:public	signature:()
RAIDInfo::InitializeFSManager	RAIDManager.h	/^	bool InitializeFSManager() {$/;"	f	struct:RAIDInfo	access:public	signature:()
RAIDInfo::IsRAIDStatusChanged	RAIDManager.h	/^	bool IsRAIDStatusChanged(const RAIDInfo& previous) {$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& previous)
RAIDInfo::RAIDInfo	RAIDManager.h	/^	RAIDInfo()$/;"	f	struct:RAIDInfo	access:public	signature:()
RAIDInfo::m_CreationTime	RAIDManager.h	/^	time_t			m_CreationTime;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_UUID	RAIDManager.h	/^	uint32_t		m_UUID[4];$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_UpdateTime	RAIDManager.h	/^	time_t			m_UpdateTime;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_bInactive	RAIDManager.h	/^	bool			m_bInactive;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_bRebuilding	RAIDManager.h	/^	bool			m_bRebuilding;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_bSuperBlockPersistent	RAIDManager.h	/^	bool			m_bSuperBlockPersistent;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_fsMgr	RAIDManager.h	/^	smart_ptr<FilesystemManager> m_fsMgr;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iActiveDiskNum	RAIDManager.h	/^	int32_t			m_iActiveDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iChunkSize	RAIDManager.h	/^	int32_t			m_iChunkSize;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iFailedDiskNum	RAIDManager.h	/^	int32_t			m_iFailedDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iMDNum	RAIDManager.h	/^	int32_t			m_iMDNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iRAIDDiskNum	RAIDManager.h	/^	int32_t			m_iRAIDDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iRAIDLevel	RAIDManager.h	/^	int32_t			m_iRAIDLevel;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iRebuildingProgress	RAIDManager.h	/^	int32_t			m_iRebuildingProgress;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iSpareDiskNum	RAIDManager.h	/^	int32_t			m_iSpareDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iState	RAIDManager.h	/^	int32_t			m_iState;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iTotalDiskNum	RAIDManager.h	/^	int32_t			m_iTotalDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_iWorkingDiskNum	RAIDManager.h	/^	int32_t			m_iWorkingDiskNum;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_strDevNodeName	RAIDManager.h	/^	string			m_strDevNodeName;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_strLayout	RAIDManager.h	/^	string			m_strLayout;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_strRebuildingOperation	RAIDManager.h	/^	string			m_strRebuildingOperation;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_strState	RAIDManager.h	/^	string			m_strState;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_ullTotalCapacity	RAIDManager.h	/^	int64_t			m_ullTotalCapacity;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_ullUsedSize	RAIDManager.h	/^	int64_t			m_ullUsedSize;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::m_vDiskList	RAIDManager.h	/^	vector<RAIDDiskInfo>	m_vDiskList;$/;"	m	struct:RAIDInfo	access:public
RAIDInfo::operator =	RAIDManager.h	/^	RAIDInfo& operator=(const RAIDInfo& rhs)$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& rhs)
RAIDInfo::operator =	RAIDManager.h	/^	RAIDInfo& operator=(const struct array_detail& rhs)$/;"	f	struct:RAIDInfo	access:public	signature:(const struct array_detail& rhs)
RAIDInfo::operator ==	RAIDManager.h	/^	bool operator==(const RAIDInfo& rhs) const$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& rhs) const
RAIDInfo::operator ==	RAIDManager.h	/^	bool operator==(const string& rhs) const$/;"	f	struct:RAIDInfo	access:public	signature:(const string& rhs) const
RAIDInfo::~RAIDInfo	RAIDManager.h	/^	~RAIDInfo() {$/;"	f	struct:RAIDInfo	access:public	signature:()
RAIDManager	RAIDManager.cpp	/^RAIDManager::RAIDManager()$/;"	f	class:RAIDManager	signature:()
RAIDManager	RAIDManager.h	/^	RAIDManager();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager	RAIDManager.h	/^class RAIDManager {$/;"	c
RAIDManager::AddDisk	RAIDManager.cpp	/^bool RAIDManager::AddDisk(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
RAIDManager::AddDisk	RAIDManager.h	/^	bool AddDisk(const string& dev);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev)
RAIDManager::AddDiskSymLink	RAIDManager.cpp	/^bool RAIDManager::AddDiskSymLink(const string& symlink, eDiskType type)$/;"	f	class:RAIDManager	signature:(const string& symlink, eDiskType type)
RAIDManager::AddDiskSymLink	RAIDManager.h	/^	bool AddDiskSymLink(const string& symlink, eDiskType type);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink, eDiskType type)
RAIDManager::AddMDDisks	RAIDManager.cpp	/^bool RAIDManager::AddMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::AddMDDisks	RAIDManager.h	/^	bool AddMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::AssembleRAID	RAIDManager.cpp	/^bool RAIDManager::AssembleRAID(const int uuid[4], string& strMDName)$/;"	f	class:RAIDManager	signature:(const int uuid[4], string& strMDName)
RAIDManager::AssembleRAID	RAIDManager.cpp	/^bool RAIDManager::AssembleRAID(vector<string>& vDevList, string& strMDName)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList, string& strMDName)
RAIDManager::AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const int& mdnum, string& mddev, const int uuid[4])$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, const int uuid[4])
RAIDManager::AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const int& mdnum, string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, vector<string>& vDevList)
RAIDManager::AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const string& mddev, const int uuid[4])$/;"	f	class:RAIDManager	signature:(const string& mddev, const int uuid[4])
RAIDManager::AssembleRAID	RAIDManager.cpp	/^int RAIDManager::AssembleRAID(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::AssembleRAID	RAIDManager.h	/^	bool AssembleRAID(const int uuid[4], string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(const int uuid[4], string& strMDName)
RAIDManager::AssembleRAID	RAIDManager.h	/^	bool AssembleRAID(vector<string>& vDevList, string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(vector<string>& vDevList, string& strMDName)
RAIDManager::AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const int& mdnum, string& mddev, const int uuid[4]);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, const int uuid[4])
RAIDManager::AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const int& mdnum, string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, vector<string>& vDevList)
RAIDManager::AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const string& mddev, const int uuid[4]);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, const int uuid[4])
RAIDManager::AssembleRAID	RAIDManager.h	/^	int AssembleRAID(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::CheckFileSystem	RAIDManager.h	/^	bool CheckFileSystem();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::CreateRAID	RAIDManager.cpp	/^bool RAIDManager::CreateRAID(vector<string>& vDevList, int level, string& strMDName)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList, int level, string& strMDName)
RAIDManager::CreateRAID	RAIDManager.cpp	/^int RAIDManager::CreateRAID(const int& mdnum, string& mddev, vector<string>& vDevList, int level)$/;"	f	class:RAIDManager	signature:(const int& mdnum, string& mddev, vector<string>& vDevList, int level)
RAIDManager::CreateRAID	RAIDManager.cpp	/^int RAIDManager::CreateRAID(const string& mddev, vector<string>& vDevList, int level)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList, int level)
RAIDManager::CreateRAID	RAIDManager.h	/^	bool CreateRAID(vector<string>& vDevList, int level, string& strMDName);$/;"	p	class:RAIDManager	access:public	signature:(vector<string>& vDevList, int level, string& strMDName)
RAIDManager::CreateRAID	RAIDManager.h	/^	int CreateRAID(const int& mdnum, string& mddev, vector<string>& vDevList, int level);$/;"	p	class:RAIDManager	access:private	signature:(const int& mdnum, string& mddev, vector<string>& vDevList, int level)
RAIDManager::CreateRAID	RAIDManager.h	/^	int CreateRAID(const string& mddev, vector<string>& vDevList, int level);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList, int level)
RAIDManager::DeleteRAID	RAIDManager.cpp	/^bool RAIDManager::DeleteRAID(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::DeleteRAID	RAIDManager.h	/^	bool DeleteRAID(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::DoFileSystemRecovery	RAIDManager.h	/^	bool DoFileSystemRecovery();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::Dump	RAIDManager.cpp	/^void RAIDManager::Dump()$/;"	f	class:RAIDManager	signature:()
RAIDManager::Dump	RAIDManager.h	/^	void Dump();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::Format	RAIDManager.cpp	/^bool RAIDManager::Format(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::Format	RAIDManager.h	/^	bool Format(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::FreeDevList	RAIDManager.cpp	/^void RAIDManager::FreeDevList(struct mddev_dev* devlist)$/;"	f	class:RAIDManager	signature:(struct mddev_dev* devlist)
RAIDManager::FreeDevList	RAIDManager.h	/^	void FreeDevList(struct mddev_dev* devlist);$/;"	p	class:RAIDManager	access:private	signature:(struct mddev_dev* devlist)
RAIDManager::FreeMDNum	RAIDManager.cpp	/^void RAIDManager::FreeMDNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
RAIDManager::FreeMDNum	RAIDManager.h	/^	void FreeMDNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
RAIDManager::FreeVolumeNum	RAIDManager.cpp	/^void RAIDManager::FreeVolumeNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
RAIDManager::FreeVolumeNum	RAIDManager.h	/^	void FreeVolumeNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
RAIDManager::GenerateMDDevName	RAIDManager.cpp	/^string RAIDManager::GenerateMDDevName(int num)$/;"	f	class:RAIDManager	signature:(int num)
RAIDManager::GenerateMDDevName	RAIDManager.h	/^	string GenerateMDDevName(int num);$/;"	p	class:RAIDManager	access:private	signature:(int num)
RAIDManager::GenerateVolumeName	RAIDManager.cpp	/^int RAIDManager::GenerateVolumeName(string& name)$/;"	f	class:RAIDManager	signature:(string& name)
RAIDManager::GenerateVolumeName	RAIDManager.h	/^	int GenerateVolumeName(string& name);$/;"	p	class:RAIDManager	access:private	signature:(string& name)
RAIDManager::GetDeviceNodeBySymLink	RAIDManager.cpp	/^string RAIDManager::GetDeviceNodeBySymLink(const string& symlink)$/;"	f	class:RAIDManager	signature:(const string& symlink)
RAIDManager::GetDeviceNodeBySymLink	RAIDManager.h	/^	static string GetDeviceNodeBySymLink(const string& symlink);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink)
RAIDManager::GetDisksInfo	RAIDManager.cpp	/^bool RAIDManager::GetDisksInfo(const string& dev, RAIDDiskInfo &info)$/;"	f	class:RAIDManager	signature:(const string& dev, RAIDDiskInfo &info)
RAIDManager::GetDisksInfo	RAIDManager.cpp	/^void RAIDManager::GetDisksInfo(vector<RAIDDiskInfo> &list)$/;"	f	class:RAIDManager	signature:(vector<RAIDDiskInfo> &list)
RAIDManager::GetDisksInfo	RAIDManager.h	/^	bool GetDisksInfo(const string& dev, RAIDDiskInfo &info);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev, RAIDDiskInfo &info)
RAIDManager::GetDisksInfo	RAIDManager.h	/^	void GetDisksInfo(vector<RAIDDiskInfo> &list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDDiskInfo> &list)
RAIDManager::GetDisksInfoBySymLink	RAIDManager.h	/^	bool GetDisksInfoBySymLink(const string& link, RAIDDiskInfo &info);$/;"	p	class:RAIDManager	access:public	signature:(const string& link, RAIDDiskInfo &info)
RAIDManager::GetDisksInfoBySymLink	RAIDManager.h	/^	bool GetDisksInfoBySymLink(vector<RAIDDiskInfo> &list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDDiskInfo> &list)
RAIDManager::GetFileSystemStatus	RAIDManager.h	/^	bool GetFileSystemStatus();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::GetFormatProgress	RAIDManager.cpp	/^bool RAIDManager::GetFormatProgress(const string& mddev,$/;"	f	class:RAIDManager	signature:(const string& mddev, int& stat, int& progress)
RAIDManager::GetFormatProgress	RAIDManager.h	/^	bool GetFormatProgress(const string& mddev,$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int& stat, int& progress)
RAIDManager::GetFreeMDNum	RAIDManager.cpp	/^int RAIDManager::GetFreeMDNum()$/;"	f	class:RAIDManager	signature:()
RAIDManager::GetFreeMDNum	RAIDManager.h	/^	int GetFreeMDNum();$/;"	p	class:RAIDManager	access:private	signature:()
RAIDManager::GetFreeVolumeNum	RAIDManager.cpp	/^int RAIDManager::GetFreeVolumeNum()$/;"	f	class:RAIDManager	signature:()
RAIDManager::GetFreeVolumeNum	RAIDManager.h	/^	int GetFreeVolumeNum();$/;"	p	class:RAIDManager	access:private	signature:()
RAIDManager::GetRAIDDetail	RAIDManager.cpp	/^bool RAIDManager::GetRAIDDetail(const string& mddev,$/;"	f	class:RAIDManager	signature:(const string& mddev, array_detail &ad)
RAIDManager::GetRAIDDetail	RAIDManager.h	/^	bool GetRAIDDetail(const string& mddev, array_detail &ad);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, array_detail &ad)
RAIDManager::GetRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::GetRAIDInfo(const string& mddev, RAIDInfo& info)$/;"	f	class:RAIDManager	signature:(const string& mddev, RAIDInfo& info)
RAIDManager::GetRAIDInfo	RAIDManager.cpp	/^void RAIDManager::GetRAIDInfo(vector<RAIDInfo>& list)$/;"	f	class:RAIDManager	signature:(vector<RAIDInfo>& list)
RAIDManager::GetRAIDInfo	RAIDManager.h	/^	bool GetRAIDInfo(const string& mddev, RAIDInfo& info);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, RAIDInfo& info)
RAIDManager::GetRAIDInfo	RAIDManager.h	/^	void GetRAIDInfo(vector<RAIDInfo>& list);$/;"	p	class:RAIDManager	access:public	signature:(vector<RAIDInfo>& list)
RAIDManager::InitializeContext	RAIDManager.cpp	/^void RAIDManager::InitializeContext(struct context& c, int force, int runstop, int verbose)$/;"	f	class:RAIDManager	signature:(struct context& c, int force, int runstop, int verbose)
RAIDManager::InitializeContext	RAIDManager.h	/^	void InitializeContext(struct context& c, int force = 1, int runstop = 1, int verbose = 0);$/;"	p	class:RAIDManager	access:private	signature:(struct context& c, int force = 1, int runstop = 1, int verbose = 0)
RAIDManager::InitializeContext	RAIDManager.h	/^	void InitializeContext(struct context& c, int force = 1, int runstop = 1, int verbose = 1);$/;"	p	class:RAIDManager	access:private	signature:(struct context& c, int force = 1, int runstop = 1, int verbose = 1)
RAIDManager::InitializeDevList	RAIDManager.cpp	/^struct mddev_dev* RAIDManager::InitializeDevList(const string& replace, const string& with)$/;"	f	class:RAIDManager	signature:(const string& replace, const string& with)
RAIDManager::InitializeDevList	RAIDManager.cpp	/^struct mddev_dev* RAIDManager::InitializeDevList(vector<string>& devNameList, int disposition)$/;"	f	class:RAIDManager	signature:(vector<string>& devNameList, int disposition)
RAIDManager::InitializeDevList	RAIDManager.h	/^	struct mddev_dev* InitializeDevList(const string& replace, const string& with);$/;"	p	class:RAIDManager	access:private	signature:(const string& replace, const string& with)
RAIDManager::InitializeDevList	RAIDManager.h	/^	struct mddev_dev* InitializeDevList(vector<string>& devNameList, int disposition = 0);$/;"	p	class:RAIDManager	access:private	signature:(vector<string>& devNameList, int disposition = 0)
RAIDManager::InitializeMDDevIdent	RAIDManager.cpp	/^void RAIDManager::InitializeMDDevIdent(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd, char* bitmap_file)$/;"	f	class:RAIDManager	signature:(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd, char* bitmap_file)
RAIDManager::InitializeMDDevIdent	RAIDManager.h	/^	void InitializeMDDevIdent(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd = -1, char* bitmap_file = NULL);$/;"	p	class:RAIDManager	access:private	signature:(struct mddev_ident& ident, int uuid_set, const int uuid[4], int bitmap_fd = -1, char* bitmap_file = NULL)
RAIDManager::InitializeShape	RAIDManager.cpp	/^void RAIDManager::InitializeShape(struct shape& s, int raiddisks, int level, int chunk, int bitmap_chunk, char* bitmap_file)$/;"	f	class:RAIDManager	signature:(struct shape& s, int raiddisks, int level, int chunk, int bitmap_chunk, char* bitmap_file)
RAIDManager::InitializeShape	RAIDManager.h	/^	void InitializeShape(struct shape& s, int raiddisks, int level, int chunk = 512, int bitmap_chunk = UnSet, char* bitmap_file = NULL);$/;"	p	class:RAIDManager	access:private	signature:(struct shape& s, int raiddisks, int level, int chunk = 512, int bitmap_chunk = UnSet, char* bitmap_file = NULL)
RAIDManager::IsDiskExistInRAIDDiskList	RAIDManager.cpp	/^bool RAIDManager::IsDiskExistInRAIDDiskList(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
RAIDManager::IsDiskExistInRAIDDiskList	RAIDManager.cpp	/^bool RAIDManager::IsDiskExistInRAIDDiskList(vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(vector<string>& vDevList)
RAIDManager::IsDiskExistInRAIDDiskList	RAIDManager.h	/^	bool IsDiskExistInRAIDDiskList(const string& dev);$/;"	p	class:RAIDManager	access:private	signature:(const string& dev)
RAIDManager::IsDiskExistInRAIDDiskList	RAIDManager.h	/^	bool IsDiskExistInRAIDDiskList(vector<string>& vDevList);$/;"	p	class:RAIDManager	access:private	signature:(vector<string>& vDevList)
RAIDManager::IsDiskHaveMDSuperBlock	RAIDManager.cpp	/^bool RAIDManager::IsDiskHaveMDSuperBlock(const string& dev, examine_result &result, int &err)$/;"	f	class:RAIDManager	signature:(const string& dev, examine_result &result, int &err)
RAIDManager::IsDiskHaveMDSuperBlock	RAIDManager.h	/^	bool IsDiskHaveMDSuperBlock(const string& dev, examine_result &result, int &err);$/;"	p	class:RAIDManager	access:private	signature:(const string& dev, examine_result &result, int &err)
RAIDManager::IsFormated	RAIDManager.cpp	/^bool RAIDManager::IsFormated(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::IsFormated	RAIDManager.h	/^	bool IsFormated(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::IsMDDevInRAIDInfoList	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::IsMDDevInRAIDInfoList(const string &mddev)$/;"	f	class:RAIDManager	signature:(const string &mddev)
RAIDManager::IsMDDevInRAIDInfoList	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::IsMDDevInRAIDInfoList(const string &mddev, RAIDInfo& info)$/;"	f	class:RAIDManager	signature:(const string &mddev, RAIDInfo& info)
RAIDManager::IsMDDevInRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo>::iterator IsMDDevInRAIDInfoList(const string &mddev);$/;"	p	class:RAIDManager	access:private	signature:(const string &mddev)
RAIDManager::IsMDDevInRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo>::iterator IsMDDevInRAIDInfoList(const string &mddev, RAIDInfo& info);$/;"	p	class:RAIDManager	access:private	signature:(const string &mddev, RAIDInfo& info)
RAIDManager::IsMounted	RAIDManager.cpp	/^bool RAIDManager::IsMounted(const string& mddev, int &num)$/;"	f	class:RAIDManager	signature:(const string& mddev, int &num)
RAIDManager::IsMounted	RAIDManager.h	/^	bool IsMounted(const string& mddev, int &num);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int &num)
RAIDManager::IsRAIDAbnormal	RAIDManager.cpp	/^bool RAIDManager::IsRAIDAbnormal(const RAIDInfo &info)$/;"	f	class:RAIDManager	signature:(const RAIDInfo &info)
RAIDManager::IsRAIDAbnormal	RAIDManager.h	/^	bool IsRAIDAbnormal(const RAIDInfo &info);$/;"	p	class:RAIDManager	access:private	signature:(const RAIDInfo &info)
RAIDManager::ManageRAIDSubdevs	RAIDManager.cpp	/^bool RAIDManager::ManageRAIDSubdevs(const string& mddev, vector<string>& vDevList, int operation)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList, int operation)
RAIDManager::ManageRAIDSubdevs	RAIDManager.h	/^	bool ManageRAIDSubdevs(const string& mddev, vector<string>& vDevList, int operation);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev, vector<string>& vDevList, int operation)
RAIDManager::MarkFaultyMDDisks	RAIDManager.cpp	/^bool RAIDManager::MarkFaultyMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::MarkFaultyMDDisks	RAIDManager.h	/^	bool MarkFaultyMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::Mount	RAIDManager.cpp	/^bool RAIDManager::Mount(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::Mount	RAIDManager.h	/^	bool Mount(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::OpenMDDev	RAIDManager.cpp	/^int RAIDManager::OpenMDDev(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::OpenMDDev	RAIDManager.h	/^	int OpenMDDev(const string& mddev);$/;"	p	class:RAIDManager	access:private	signature:(const string& mddev)
RAIDManager::RAIDManager	RAIDManager.cpp	/^RAIDManager::RAIDManager()$/;"	f	class:RAIDManager	signature:()
RAIDManager::RAIDManager	RAIDManager.h	/^	RAIDManager();$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::ReaddMDDisks	RAIDManager.cpp	/^bool RAIDManager::ReaddMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::ReaddMDDisks	RAIDManager.h	/^	bool ReaddMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::RemoveDisk	RAIDManager.cpp	/^bool RAIDManager::RemoveDisk(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
RAIDManager::RemoveDisk	RAIDManager.h	/^	bool RemoveDisk(const string& dev);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev)
RAIDManager::RemoveDiskSymLink	RAIDManager.cpp	/^bool RAIDManager::RemoveDiskSymLink(const string& symlink)$/;"	f	class:RAIDManager	signature:(const string& symlink)
RAIDManager::RemoveDiskSymLink	RAIDManager.h	/^	bool RemoveDiskSymLink(const string& symlink);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink)
RAIDManager::RemoveMDDisks	RAIDManager.cpp	/^bool RAIDManager::RemoveMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::RemoveMDDisks	RAIDManager.h	/^	bool RemoveMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
RAIDManager::ReplaceMDDisk	RAIDManager.cpp	/^bool RAIDManager::ReplaceMDDisk(const string& mddev, const string& replace, const string& with)$/;"	f	class:RAIDManager	signature:(const string& mddev, const string& replace, const string& with)
RAIDManager::ReplaceMDDisk	RAIDManager.h	/^	bool ReplaceMDDisk(const string& mddev, const string& replace, const string& with);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, const string& replace, const string& with)
RAIDManager::SearchDiskBelong2RAID	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::SearchDiskBelong2RAID(RAIDDiskInfo& info)$/;"	f	class:RAIDManager	signature:(RAIDDiskInfo& info)
RAIDManager::SearchDiskBelong2RAID	RAIDManager.h	/^	vector<RAIDInfo>::iterator SearchDiskBelong2RAID(RAIDDiskInfo& devInfo);$/;"	p	class:RAIDManager	access:private	signature:(RAIDDiskInfo& devInfo)
RAIDManager::SetMDNum	RAIDManager.cpp	/^void RAIDManager::SetMDNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
RAIDManager::SetMDNum	RAIDManager.h	/^	void SetMDNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
RAIDManager::SetVolumeNum	RAIDManager.cpp	/^void RAIDManager::SetVolumeNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
RAIDManager::SetVolumeNum	RAIDManager.h	/^	void SetVolumeNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
RAIDManager::StopRAID	RAIDManager.cpp	/^bool RAIDManager::StopRAID(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::StopRAID	RAIDManager.h	/^	bool StopRAID(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::Unmount	RAIDManager.cpp	/^bool RAIDManager::Unmount(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
RAIDManager::Unmount	RAIDManager.h	/^	bool Unmount(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
RAIDManager::UpdateRAIDDiskList	RAIDManager.cpp	/^void RAIDManager::UpdateRAIDDiskList(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)$/;"	f	class:RAIDManager	signature:(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)
RAIDManager::UpdateRAIDDiskList	RAIDManager.h	/^	void UpdateRAIDDiskList(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev);$/;"	p	class:RAIDManager	access:private	signature:(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)
RAIDManager::UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo()$/;"	f	class:RAIDManager	signature:()
RAIDManager::UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo(const int uuid[4])$/;"	f	class:RAIDManager	signature:(const int uuid[4])
RAIDManager::UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo(const string& mddev, int mdnum)$/;"	f	class:RAIDManager	signature:(const string& mddev, int mdnum)
RAIDManager::UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(); \/\/ May need for periodically update.$/;"	p	class:RAIDManager	access:public	signature:()
RAIDManager::UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(const int uuid[4]);$/;"	p	class:RAIDManager	access:public	signature:(const int uuid[4])
RAIDManager::UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(const string& mddev, int mdnum = -1);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int mdnum = -1)
RAIDManager::m_bUsedMD	RAIDManager.h	/^	bool m_bUsedMD[128];$/;"	m	class:RAIDManager	access:private
RAIDManager::m_bUsedVolume	RAIDManager.h	/^	bool m_bUsedVolume[128];$/;"	m	class:RAIDManager	access:private
RAIDManager::m_csRAIDDiskList	RAIDManager.h	/^	CriticalSection m_csRAIDDiskList;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_csRAIDInfoList	RAIDManager.h	/^	CriticalSection m_csRAIDInfoList;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_csSymLinkTable	RAIDManager.h	/^	CriticalSection m_csSymLinkTable;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_csUsedMD	RAIDManager.h	/^	CriticalSection m_csUsedMD;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_csUsedVolume	RAIDManager.h	/^	CriticalSection m_csUsedVolume;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_mapSymLinkTable	RAIDManager.h	/^	map<string, MiscDiskInfo> m_mapSymLinkTable; \/* string: real device node*\/$/;"	m	class:RAIDManager	access:private
RAIDManager::m_vRAIDDiskList	RAIDManager.h	/^	vector<RAIDDiskInfo> m_vRAIDDiskList;$/;"	m	class:RAIDManager	access:private
RAIDManager::m_vRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo> m_vRAIDInfoList;$/;"	m	class:RAIDManager	access:private
RAIDManager::~RAIDManager	RAIDManager.cpp	/^RAIDManager::~RAIDManager()$/;"	f	class:RAIDManager	signature:()
RAIDManager::~RAIDManager	RAIDManager.h	/^	~RAIDManager();$/;"	p	class:RAIDManager	access:public	signature:()
RAID_AUTORUN	libmdadm/md_u.h	25;"	d
RAID_DISK_RESERVED_BLOCKS_IMSM_HI	libmdadm/super-intel.c	242;"	d	file:
RAID_STATUS_BIT_DEGRADE	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_DEGRADE,$/;"	e	enum:__anon13
RAID_STATUS_BIT_FAILED	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_FAILED,$/;"	e	enum:__anon13
RAID_STATUS_BIT_FILESYS_ERR	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_FILESYS_ERR,$/;"	e	enum:__anon13
RAID_STATUS_BIT_FUNCTIONAL	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_FUNCTIONAL = 0,$/;"	e	enum:__anon13
RAID_STATUS_BIT_RECOVERING	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_RECOVERING,$/;"	e	enum:__anon13
RAID_STATUS_BIT_UNFORMATED	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_UNFORMATED,$/;"	e	enum:__anon13
RAID_STATUS_BIT_UNMOUNTED	libmdadm/mdadm_other.h	/^	RAID_STATUS_BIT_UNMOUNTED,$/;"	e	enum:__anon13
RAID_VERSION	libmdadm/md_u.h	21;"	d
REGISTER_DEV	libmdadm/Build.c	27;"	d	file:
REGISTER_DEV	libmdadm/Manage.c	30;"	d	file:
RESHAPE_NO_BACKUP	libmdadm/mdadm.h	203;"	d
RESTART_ARRAY_RW	libmdadm/md_u.h	46;"	d
RESYNC	libmdadm/bitmap.h	95;"	d
RESYNC_DELAYED	libmdadm/mdadm.h	1499;"	d
RESYNC_MASK	libmdadm/bitmap.h	92;"	d
RESYNC_NONE	libmdadm/mdadm.h	1498;"	d
RESYNC_PENDING	libmdadm/mdadm.h	1500;"	d
RESYNC_UNKNOWN	libmdadm/mdadm.h	1501;"	d
REV	libmdadm/crc32.c	83;"	d	file:
ROLLBACK_METADATA_CHANGES	libmdadm/mdadm.h	825;"	d
ROMSIGNATURE	libmdadm/probe_roms.c	189;"	d	file:
ROUND_UP	libmdadm/mdadm.h	1357;"	d
ROUND_UP_PTR	libmdadm/mdadm.h	1358;"	d
RUN_ARRAY	libmdadm/md_u.h	42;"	d
ReadFixable	libmdadm/mdadm.h	1430;"	d
ReadPersistent	libmdadm/mdadm.h	1428;"	d
ReadTransient	libmdadm/mdadm.h	1426;"	d
ReaddMDDisks	RAIDManager.cpp	/^bool RAIDManager::ReaddMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
ReaddMDDisks	RAIDManager.h	/^	bool ReaddMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
RebuildMap	libmdadm/mapfile.c	/^void RebuildMap(void)$/;"	f	signature:(void)
RebuildMap	libmdadm/mdadm.h	/^extern void RebuildMap(void);$/;"	p	signature:(void)
RemoveDisk	RAIDManager.cpp	/^bool RAIDManager::RemoveDisk(const string& dev)$/;"	f	class:RAIDManager	signature:(const string& dev)
RemoveDisk	RAIDManager.h	/^	bool RemoveDisk(const string& dev);$/;"	p	class:RAIDManager	access:public	signature:(const string& dev)
RemoveDiskSymLink	RAIDManager.cpp	/^bool RAIDManager::RemoveDiskSymLink(const string& symlink)$/;"	f	class:RAIDManager	signature:(const string& symlink)
RemoveDiskSymLink	RAIDManager.h	/^	bool RemoveDiskSymLink(const string& symlink);$/;"	p	class:RAIDManager	access:public	signature:(const string& symlink)
RemoveMDDisks	RAIDManager.cpp	/^bool RAIDManager::RemoveMDDisks(const string& mddev, vector<string>& vDevList)$/;"	f	class:RAIDManager	signature:(const string& mddev, vector<string>& vDevList)
RemoveMDDisks	RAIDManager.h	/^	bool RemoveMDDisks(const string& mddev, vector<string>& vDevList);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, vector<string>& vDevList)
ReplaceMDDisk	RAIDManager.cpp	/^bool RAIDManager::ReplaceMDDisk(const string& mddev, const string& replace, const string& with)$/;"	f	class:RAIDManager	signature:(const string& mddev, const string& replace, const string& with)
ReplaceMDDisk	RAIDManager.h	/^	bool ReplaceMDDisk(const string& mddev, const string& replace, const string& with);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, const string& replace, const string& with)
Restore_metadata	libmdadm/Dump.c	/^int Restore_metadata(char *dev, char *dir, struct context *c,$/;"	f	signature:(char *dev, char *dir, struct context *c, struct supertype *st, int only)
Restore_metadata	libmdadm/mdadm.h	/^extern int Restore_metadata(char *dev, char *dir, struct context *c,$/;"	p	signature:(char *dev, char *dir, struct context *c, struct supertype *st, int only)
SCSI_BLK_MAJOR	libmke2fs/util.c	102;"	d	file:
SCSI_DISK_MAJOR	libmke2fs/util.c	95;"	d	file:
SCU_PROP	libmdadm/platform-intel.c	344;"	d	file:
SECT_PER_MB_SHIFT	libmdadm/super-intel.c	92;"	d	file:
SET_ARRAY_INFO	libmdadm/md_u.h	32;"	d
SET_BITMAP_FILE	libmdadm/md_u.h	39;"	d
SET_DISK_FAULTY	libmdadm/md_u.h	38;"	d
SET_DISK_INFO	libmdadm/md_u.h	33;"	d
SGReadCapacity10	RAIDManager.h	/^struct SGReadCapacity10 {$/;"	s
SGReadCapacity10::m_BlockLength	RAIDManager.h	/^	uint8_t m_BlockLength[4];$/;"	m	struct:SGReadCapacity10	access:public
SGReadCapacity10::m_LogicalBlockAddr	RAIDManager.h	/^	uint8_t m_LogicalBlockAddr[4];$/;"	m	struct:SGReadCapacity10	access:public
SGSerialNoPage	RAIDManager.h	/^struct SGSerialNoPage {$/;"	s
SGSerialNoPage::m_bytePQPDT	RAIDManager.h	/^	uint8_t m_bytePQPDT; \/* bit 5-7: Peripheral Qualifier, bit 0-4: Peripheral Device Type *\/$/;"	m	struct:SGSerialNoPage	access:public
SGSerialNoPage::m_bytePageCode	RAIDManager.h	/^	uint8_t m_bytePageCode;$/;"	m	struct:SGSerialNoPage	access:public
SGSerialNoPage::m_bytePageLength	RAIDManager.h	/^	uint8_t m_bytePageLength;$/;"	m	struct:SGSerialNoPage	access:public
SGSerialNoPage::m_bytePageSN	RAIDManager.h	/^	uint8_t m_bytePageSN[32];$/;"	m	struct:SGSerialNoPage	access:public
SGSerialNoPage::m_byteReservied	RAIDManager.h	/^	uint8_t m_byteReservied;$/;"	m	struct:SGSerialNoPage	access:public
SHA1_H	libmdadm/sha1.h	21;"	d
SPARE_DISK	libmdadm/super-intel.c	100;"	d	file:
START_ARRAY	libmdadm/md_u.h	43;"	d
START_MD	libmdadm/Build.c	28;"	d	file:
START_MD	libmdadm/Manage.c	31;"	d	file:
STATE_GET_OBRACE	libmke2fs/profile.c	622;"	d	file:
STATE_INIT_COMMENT	libmke2fs/profile.c	620;"	d	file:
STATE_STD_LINE	libmke2fs/profile.c	621;"	d	file:
STAT_ONCE_PER_SECOND	libmke2fs/profile.c	69;"	d	file:
STDC	libmdadm/crc32.c	50;"	d	file:
STOP_ARRAY	libmdadm/md_u.h	44;"	d
STOP_ARRAY_RO	libmdadm/md_u.h	45;"	d
STOP_MD	libmdadm/Build.c	29;"	d	file:
STOP_MD	libmdadm/Manage.c	32;"	d	file:
STRIDE_LENGTH	libmke2fs/mke2fs.c	59;"	d	file:
SUCCESS	libmdadm/mdadm_errcode.h	/^	SUCCESS = 0,$/;"	e	enum:__anon5
SUPER1_SIZE	libmdadm/super1.c	105;"	d	file:
SUPERBLOCK_OFFSET	libmke2fs/ext2fs.h	39;"	d
SUPERBLOCK_SIZE	libmke2fs/ext2fs.h	40;"	d
SWAP	libmdadm/sha1.c	38;"	d	file:
SWAP	libmdadm/sha1.c	40;"	d	file:
SYSLOG_FACILITY	libmdadm/mdadm.h	546;"	d
SYS_DEV_MAX	libmdadm/platform-intel.h	/^	SYS_DEV_MAX$/;"	e	enum:sys_dev_type
SYS_DEV_SAS	libmdadm/platform-intel.h	/^	SYS_DEV_SAS,$/;"	e	enum:sys_dev_type
SYS_DEV_SATA	libmdadm/platform-intel.h	/^	SYS_DEV_SATA,$/;"	e	enum:sys_dev_type
SYS_DEV_UNKNOWN	libmdadm/platform-intel.h	/^	SYS_DEV_UNKNOWN = 0,$/;"	e	enum:sys_dev_type
SYS_EFI_VAR_PATH	libmdadm/platform-intel.c	343;"	d	file:
SearchDiskBelong2RAID	RAIDManager.cpp	/^vector<RAIDInfo>::iterator RAIDManager::SearchDiskBelong2RAID(RAIDDiskInfo& info)$/;"	f	class:RAIDManager	signature:(RAIDDiskInfo& info)
SearchDiskBelong2RAID	RAIDManager.h	/^	vector<RAIDInfo>::iterator SearchDiskBelong2RAID(RAIDDiskInfo& devInfo);$/;"	p	class:RAIDManager	access:private	signature:(RAIDDiskInfo& devInfo)
Sendmail	libmdadm/mdadm.h	543;"	d
SetAction	libmdadm/mdadm.h	/^extern int SetAction(char *dev, char *action);$/;"	p	signature:(char *dev, char *action)
SetDeviceNode	FilesystemManager.cpp	/^bool FilesystemManager::SetDeviceNode(const string &dev)$/;"	f	class:FilesystemManager	signature:(const string &dev)
SetDeviceNode	FilesystemManager.h	/^	bool SetDeviceNode(const string &dev);$/;"	p	class:FilesystemManager	access:public	signature:(const string &dev)
SetFormatInfo	FilesystemManager.cpp	/^void FilesystemManager::SetFormatInfo(bool format, int progress, int stat)$/;"	f	class:FilesystemManager	signature:(bool format, int progress, int stat)
SetFormatInfo	FilesystemManager.h	/^	void SetFormatInfo(bool format, int progress,$/;"	p	class:FilesystemManager	access:public	signature:(bool format, int progress, int stat)
SetHDDVendorInfomation	RAIDManager.h	/^	void SetHDDVendorInfomation() {$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
SetMDNum	RAIDManager.cpp	/^void RAIDManager::SetMDNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
SetMDNum	RAIDManager.h	/^	void SetMDNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
SetMountPoint	FilesystemManager.cpp	/^void FilesystemManager::SetMountPoint(const string &mountpoint)$/;"	f	class:FilesystemManager	signature:(const string &mountpoint)
SetMountPoint	FilesystemManager.h	/^	void SetMountPoint(const string &mountpoint);$/;"	p	class:FilesystemManager	access:public	signature:(const string &mountpoint)
SetVolumeNum	FilesystemManager.cpp	/^void FilesystemManager::SetVolumeNum(const int &num)$/;"	f	class:FilesystemManager	signature:(const int &num)
SetVolumeNum	FilesystemManager.h	/^	void SetVolumeNum(const int &num);$/;"	p	class:FilesystemManager	access:public	signature:(const int &num)
SetVolumeNum	RAIDManager.cpp	/^void RAIDManager::SetVolumeNum(int n)$/;"	f	class:RAIDManager	signature:(int n)
SetVolumeNum	RAIDManager.h	/^	void SetVolumeNum(int n);$/;"	p	class:RAIDManager	access:private	signature:(int n)
SparcAdjust	libmdadm/mdadm.h	/^	int	SparcAdjust;$/;"	m	struct:context	access:public
StopRAID	RAIDManager.cpp	/^bool RAIDManager::StopRAID(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
StopRAID	RAIDManager.h	/^	bool StopRAID(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
T10	libmdadm/super-ddf.c	/^static char T10[] = "Linux-MD";$/;"	v	file:
TBLS	libmdadm/crc32.c	89;"	d	file:
TBLS	libmdadm/crc32.c	91;"	d	file:
TestingLoop	unitest/RAIDManager_test.cpp	/^extern void TestingLoop(const char* cfg, RAIDManager& raid_mgr);$/;"	p	file:	signature:(const char* cfg, RAIDManager& raid_mgr)
TestingLoop	unitest/TestingLoop.cpp	/^void TestingLoop(const char* cfg, RAIDManager& raid_mgr)$/;"	f	signature:(const char* cfg, RAIDManager& raid_mgr)
ThreadProc	FilesystemManager.cpp	/^void FilesystemManager::ThreadProc()$/;"	f	class:FilesystemManager	signature:()
ThreadProc	FilesystemManager.h	/^	void ThreadProc();$/;"	p	class:FilesystemManager	access:protected	signature:()
UDEV_RULE_FORMAT	libmdadm/policy.c	799;"	d	file:
UDEV_RULE_FORMAT_NOTYPE	libmdadm/policy.c	804;"	d	file:
UNALIGNED_P	libmdadm/sha1.c	233;"	d	file:
UNIT_SRC_IN_CP_AREA	libmdadm/super-intel.c	253;"	d	file:
UNIT_SRC_NORMAL	libmdadm/super-intel.c	251;"	d	file:
UNPROTECT_ARRAY	libmdadm/md_u.h	35;"	d
UNREADABLE	libmdadm/super-intel.c	223;"	d	file:
UnSet	libmdadm/mdadm.h	297;"	d
Unlock	test_utils.h	/^	void Unlock() {$/;"	f	class:CriticalSection	access:public	signature:()
Unmount	FilesystemManager.cpp	/^bool FilesystemManager::Unmount()$/;"	f	class:FilesystemManager	signature:()
Unmount	FilesystemManager.h	/^	bool Unmount();$/;"	p	class:FilesystemManager	access:public	signature:()
Unmount	RAIDManager.cpp	/^bool RAIDManager::Unmount(const string& mddev)$/;"	f	class:RAIDManager	signature:(const string& mddev)
Unmount	RAIDManager.h	/^	bool Unmount(const string& mddev);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev)
UpdateRAIDDiskList	RAIDManager.cpp	/^void RAIDManager::UpdateRAIDDiskList(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)$/;"	f	class:RAIDManager	signature:(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)
UpdateRAIDDiskList	RAIDManager.h	/^	void UpdateRAIDDiskList(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev);$/;"	p	class:RAIDManager	access:private	signature:(vector<RAIDDiskInfo>& vRAIDDiskInfoList, const string& mddev)
UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo()$/;"	f	class:RAIDManager	signature:()
UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo(const int uuid[4])$/;"	f	class:RAIDManager	signature:(const int uuid[4])
UpdateRAIDInfo	RAIDManager.cpp	/^bool RAIDManager::UpdateRAIDInfo(const string& mddev, int mdnum)$/;"	f	class:RAIDManager	signature:(const string& mddev, int mdnum)
UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(); \/\/ May need for periodically update.$/;"	p	class:RAIDManager	access:public	signature:()
UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(const int uuid[4]);$/;"	p	class:RAIDManager	access:public	signature:(const int uuid[4])
UpdateRAIDInfo	RAIDManager.h	/^	bool UpdateRAIDInfo(const string& mddev, int mdnum = -1);$/;"	p	class:RAIDManager	access:public	signature:(const string& mddev, int mdnum = -1)
Update_subarray	libmdadm/Manage.c	/^int Update_subarray(char *dev, char *subarray, char *update, struct mddev_ident *ident, int verbose)$/;"	f	signature:(char *dev, char *subarray, char *update, struct mddev_ident *ident, int verbose)
Update_subarray	libmdadm/mdadm.h	/^extern int Update_subarray(char *dev, char *subarray, char *update, struct mddev_ident *ident, int quiet);$/;"	p	signature:(char *dev, char *subarray, char *update, struct mddev_ident *ident, int quiet)
VARIABLE_OFFSET	libmdadm/mdadm.h	1521;"	d
VENDOR_GUID	libmdadm/platform-intel.c	347;"	d	file:
VOLUME_RESHAPE	libmdadm/mdadm.h	201;"	d
Version	libmdadm/mdadm.h	1523;"	d
WRITE_INODE_TABLES_DONE	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_DONE,$/;"	e	enum:__anon4
WRITE_INODE_TABLES_ERROR	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_ERROR,$/;"	e	enum:__anon4
WRITE_INODE_TABLES_INIT	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_INIT,$/;"	e	enum:__anon4
WRITE_INODE_TABLES_UNKNOWN	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_UNKNOWN = 0,$/;"	e	enum:__anon4
WRITE_INODE_TABLES_WRITING	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_WRITING,$/;"	e	enum:__anon4
WRITE_INODE_TABLES_WRITING_DONE	libmke2fs/mke2fs.h	/^	WRITE_INODE_TABLES_WRITING_DONE,$/;"	e	enum:__anon4
WRITE_RAID_INFO	libmdadm/md_u.h	34;"	d
Wait	libmdadm/Monitor.c	/^int Wait(char *dev)$/;"	f	signature:(char *dev)
Wait	libmdadm/mdadm.h	/^extern int Wait(char *dev);$/;"	p	signature:(char *dev)
WaitClean	libmdadm/Monitor.c	/^int WaitClean(char *dev, int sock, int verbose)$/;"	f	signature:(char *dev, int sock, int verbose)
WaitClean	libmdadm/mdadm.h	/^extern int WaitClean(char *dev, int sock, int verbose);$/;"	p	signature:(char *dev, int sock, int verbose)
WriteAll	libmdadm/mdadm.h	1429;"	d
WriteHWLog	test_utils.h	13;"	d
WriteMostly1	libmdadm/super1.c	76;"	d	file:
WritePersistent	libmdadm/mdadm.h	1427;"	d
WriteTransient	libmdadm/mdadm.h	1425;"	d
Write_rules	libmdadm/mdadm.h	/^extern int Write_rules(char *rule_name);$/;"	p	signature:(char *rule_name)
Write_rules	libmdadm/policy.c	/^int Write_rules(char *rule_name)$/;"	f	signature:(char *rule_name)
ZAP_BOOTBLOCK	libmke2fs/mke2fs.c	64;"	d	file:
ZEXPORT	libmdadm/crc32.c	54;"	d	file:
Z_NULL	libmdadm/crc32.c	52;"	d	file:
_	libmke2fs/mke2fs.c	58;"	d	file:
_	libmke2fs/util.c	30;"	d	file:
_CS	macro_def.h	17;"	d
_EXT2FS_EXT2FS_H	libmke2fs/ext2fs.h	13;"	d
_FILE_OFFSET_BITS	libmdadm/mdadm.h	26;"	d
_GNU_SOURCE	libmdadm/managemon.c	103;"	d	file:
_GNU_SOURCE	libmdadm/mdadm.h	25;"	d
_GNU_SOURCE	libmdadm/msg.c	20;"	d	file:
_INLINE_	libmke2fs/ext2fs.h	1507;"	d
_INLINE_	libmke2fs/ext2fs.h	1510;"	d
_INLINE_	libmke2fs/ext2fs.h	1513;"	d
_INLINE_	libmke2fs/ext2fs.h	1515;"	d
_INLINE_	libmke2fs/ext2fs.h	1736;"	d
_LARGEFILE64_SOURCE	libmke2fs/util.c	13;"	d	file:
_LARGEFILE_SOURCE	libmke2fs/util.c	12;"	d	file:
_LOCK	macro_def.h	5;"	d
_MD_P_H	libmdadm/md_p.h	16;"	d
_MD_U_H	libmdadm/md_u.h	16;"	d
_PROFILE_H	libmke2fs/profile.h	40;"	d
_ROUND_UP	libmdadm/mdadm.h	1356;"	d
_SC_PAGESIZE	libmke2fs/mke2fs.c	1353;"	d	file:
_UNLOCK	macro_def.h	11;"	d
_XOPEN_SOURCE	libmke2fs/mke2fs.c	19;"	d	file:
__FILESYSTEM_MANAGER_H__	FilesystemManager.h	2;"	d
__MACRO_DEF_H__	macro_def.h	2;"	d
__MDADM_ERRORCODE__	libmdadm/mdadm_errcode.h	2;"	d
__MDAMM_OTHER_H__	libmdadm/mdadm_other.h	2;"	d
__MKE2FS_ERR_H__	libmke2fs/mke2fs_err.h	2;"	d
__MKE2FS_H__	libmke2fs/mke2fs.h	2;"	d
__RAIDMANAGER_H__	RAIDManager.h	2;"	d
__TEST_UTILS_H__	test_utils.h	2;"	d
__anon12::anchor	libmdadm/super-intel.c	/^	struct imsm_super anchor;$/;"	m	union:__anon12	typeref:struct:__anon12::imsm_super	file:	access:public
__anon12::buf	libmdadm/super-intel.c	/^	char buf[512];$/;"	m	union:__anon12	file:	access:public
__be16	libmdadm/super-ddf.c	/^typedef struct __be16 {$/;"	s	file:
__be16::_v16	libmdadm/super-ddf.c	/^	__u16 _v16;$/;"	m	struct:__be16	file:	access:public
__be16_to_cpu	libmdadm/mdadm.h	144;"	d
__be16_to_cpu	libmdadm/mdadm.h	158;"	d
__be32	libmdadm/super-ddf.c	/^typedef struct __be32 {$/;"	s	file:
__be32::_v32	libmdadm/super-ddf.c	/^	__u32 _v32;$/;"	m	struct:__be32	file:	access:public
__be32_to_cpu	libmdadm/mdadm.h	145;"	d
__be32_to_cpu	libmdadm/mdadm.h	159;"	d
__be64	libmdadm/super-ddf.c	/^typedef struct __be64 {$/;"	s	file:
__be64::_v64	libmdadm/super-ddf.c	/^	__u64 _v64;$/;"	m	struct:__be64	file:	access:public
__be64_to_cpu	libmdadm/mdadm.h	146;"	d
__be64_to_cpu	libmdadm/mdadm.h	160;"	d
__bitwise	libmke2fs/ext2fs.h	68;"	d
__bitwise	libmke2fs/ext2fs.h	70;"	d
__calc_lba	libmdadm/super-ddf.c	2967;"	d	file:
__cpu_to_be16	libmdadm/mdadm.h	141;"	d
__cpu_to_be16	libmdadm/mdadm.h	155;"	d
__cpu_to_be32	libmdadm/mdadm.h	142;"	d
__cpu_to_be32	libmdadm/mdadm.h	156;"	d
__cpu_to_be64	libmdadm/mdadm.h	143;"	d
__cpu_to_be64	libmdadm/mdadm.h	157;"	d
__cpu_to_le16	libmdadm/mdadm.h	134;"	d
__cpu_to_le16	libmdadm/mdadm.h	148;"	d
__cpu_to_le32	libmdadm/mdadm.h	135;"	d
__cpu_to_le32	libmdadm/mdadm.h	149;"	d
__cpu_to_le64	libmdadm/mdadm.h	136;"	d
__cpu_to_le64	libmdadm/mdadm.h	150;"	d
__dl_head	libmdadm/dlink.h	/^struct __dl_head$/;"	s
__dl_head::dh_next	libmdadm/dlink.h	/^    void * dh_next;$/;"	m	struct:__dl_head	access:public
__dl_head::dh_prev	libmdadm/dlink.h	/^    void * dh_prev;$/;"	m	struct:__dl_head	access:public
__fname_from_uuid	libmdadm/mdadm.h	/^extern char *__fname_from_uuid(int id[4], int swap, char *buf, char sep);$/;"	p	signature:(int id[4], int swap, char *buf, char sep)
__fname_from_uuid	libmdadm/util.c	/^char *__fname_from_uuid(int id[4], int swap, char *buf, char sep)$/;"	f	signature:(int id[4], int swap, char *buf, char sep)
__free_imsm	libmdadm/super-intel.c	/^static void __free_imsm(struct intel_super *super, int free_disks)$/;"	f	file:	signature:(struct intel_super *super, int free_disks)
__free_imsm	libmdadm/super-intel.c	/^static void __free_imsm(struct intel_super *super, int free_disks);$/;"	p	file:	signature:(struct intel_super *super, int free_disks)
__free_imsm_disk	libmdadm/super-intel.c	/^static void __free_imsm_disk(struct dl *d)$/;"	f	file:	signature:(struct dl *d)
__gen_imsm_checksum	libmdadm/super-intel.c	/^static __u32 __gen_imsm_checksum(struct imsm_super *mpb)$/;"	f	file:	signature:(struct imsm_super *mpb)
__get_imsm_bbm_log	libmdadm/super-intel.c	/^struct bbm_log *__get_imsm_bbm_log(struct imsm_super *mpb)$/;"	f	signature:(struct imsm_super *mpb)
__get_imsm_dev	libmdadm/super-intel.c	/^static struct imsm_dev *__get_imsm_dev(struct imsm_super *mpb, __u8 index)$/;"	f	file:	signature:(struct imsm_super *mpb, __u8 index)
__get_imsm_disk	libmdadm/super-intel.c	/^static struct imsm_disk *__get_imsm_disk(struct imsm_super *mpb, __u8 index)$/;"	f	file:	signature:(struct imsm_super *mpb, __u8 index)
__invalid_size_argument_for_IOC	libmdadm/util.c	/^unsigned int __invalid_size_argument_for_IOC = 0;$/;"	v
__le16_to_cpu	libmdadm/mdadm.h	137;"	d
__le16_to_cpu	libmdadm/mdadm.h	151;"	d
__le32_to_cpu	libmdadm/mdadm.h	138;"	d
__le32_to_cpu	libmdadm/mdadm.h	152;"	d
__le64_to_cpu	libmdadm/mdadm.h	139;"	d
__le64_to_cpu	libmdadm/mdadm.h	153;"	d
__prep_thunderdome	libmdadm/super-intel.c	/^static int __prep_thunderdome(struct intel_super **table, int tbl_size,$/;"	f	file:	signature:(struct intel_super **table, int tbl_size, struct intel_super *super, struct intel_disk **disk_list)
__serial_to_disk	libmdadm/super-intel.c	/^__serial_to_disk(__u8 *serial, struct imsm_super *mpb, int *idx)$/;"	f	file:	signature:(__u8 *serial, struct imsm_super *mpb, int *idx)
__set_sec_seen	libmdadm/super-ddf.c	3689;"	d	file:
__u64	libmdadm/md_p.h	/^typedef unsigned long long __u64;$/;"	t
__was_sec_seen	libmdadm/super-ddf.c	3690;"	d	file:
__write_ddf_structure	libmdadm/super-ddf.c	/^static int __write_ddf_structure(struct dl *d, struct ddf_super *ddf, __u8 type)$/;"	f	file:	signature:(struct dl *d, struct ddf_super *ddf, __u8 type)
__write_init_super_ddf	libmdadm/super-ddf.c	/^static int __write_init_super_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
_ddf_array_name	libmdadm/super-ddf.c	/^static void _ddf_array_name(char *name, const struct ddf_super *ddf, int i)$/;"	f	file:	signature:(char *name, const struct ddf_super *ddf, int i)
_ddf_array_name	libmdadm/super-ddf.c	/^static void _ddf_array_name(char *name, const struct ddf_super *ddf, int i);$/;"	p	file:	signature:(char *name, const struct ddf_super *ddf, int i)
_ddf_set_updates_pending	libmdadm/super-ddf.c	/^static void _ddf_set_updates_pending(struct ddf_super *ddf, struct vd_config *vc,$/;"	f	file:	signature:(struct ddf_super *ddf, struct vd_config *vc, const char *func)
_export	libmdadm/mdadm.h	/^	int	_export;$/;"	m	struct:context	access:public
_kill_subarray_ddf	libmdadm/super-ddf.c	/^static int _kill_subarray_ddf(struct ddf_super *ddf, const char *guid)$/;"	f	file:	signature:(struct ddf_super *ddf, const char *guid)
_prf_file_t	libmke2fs/profile.c	/^struct _prf_file_t {$/;"	s	file:
_prf_file_t::filespec	libmke2fs/profile.c	/^	char		*filespec;$/;"	m	struct:_prf_file_t	file:	access:public
_prf_file_t::flags	libmke2fs/profile.c	/^	int		flags;	\/* r\/w, dirty *\/$/;"	m	struct:_prf_file_t	file:	access:public
_prf_file_t::last_stat	libmke2fs/profile.c	/^	time_t		last_stat;$/;"	m	struct:_prf_file_t	file:	access:public
_prf_file_t::magic	libmke2fs/profile.c	/^	prf_magic_t	magic;$/;"	m	struct:_prf_file_t	file:	access:public
_prf_file_t::next	libmke2fs/profile.c	/^	struct _prf_file_t *next;$/;"	m	struct:_prf_file_t	typeref:struct:_prf_file_t::_prf_file_t	file:	access:public
_prf_file_t::root	libmke2fs/profile.c	/^	struct profile_node *root;$/;"	m	struct:_prf_file_t	typeref:struct:_prf_file_t::profile_node	file:	access:public
_prf_file_t::timestamp	libmke2fs/profile.c	/^	time_t		timestamp; \/* time tree was last updated from file *\/$/;"	m	struct:_prf_file_t	file:	access:public
_prf_file_t::upd_serial	libmke2fs/profile.c	/^	int		upd_serial; \/* incremented when data changes *\/$/;"	m	struct:_prf_file_t	file:	access:public
_profile_t	libmke2fs/profile.c	/^struct _profile_t {$/;"	s	file:
_profile_t::first_file	libmke2fs/profile.c	/^	prf_file_t	first_file;$/;"	m	struct:_profile_t	file:	access:public
_profile_t::magic	libmke2fs/profile.c	/^	prf_magic_t	magic;$/;"	m	struct:_profile_t	file:	access:public
_set_config_size	libmdadm/super-ddf.c	/^static void _set_config_size(struct phys_disk_entry *pde, const struct dl *dl)$/;"	f	file:	signature:(struct phys_disk_entry *pde, const struct dl *dl)
_sigbus	libmdadm/probe_roms.c	/^static int _sigbus;$/;"	v	file:
_sys_dev_type	libmdadm/super-intel.c	/^static const char *_sys_dev_type[] = {$/;"	v	file:
_v16	libmdadm/super-ddf.c	/^	__u16 _v16;$/;"	m	struct:__be16	file:	access:public
_v32	libmdadm/super-ddf.c	/^	__u32 _v32;$/;"	m	struct:__be32	file:	access:public
_v64	libmdadm/super-ddf.c	/^	__u64 _v64;$/;"	m	struct:__be64	file:	access:public
_write_super_to_disk	libmdadm/super-ddf.c	/^static int _write_super_to_disk(struct ddf_super *ddf, struct dl *d)$/;"	f	file:	signature:(struct ddf_super *ddf, struct dl *d)
aa_ready	libmdadm/managemon.c	/^static int aa_ready(struct active_array *aa)$/;"	f	file:	signature:(struct active_array *aa)
abort_reshape	libmdadm/Grow.c	/^void abort_reshape(struct mdinfo *sra)$/;"	f	signature:(struct mdinfo *sra)
abort_reshape	libmdadm/mdadm.h	/^void abort_reshape(struct mdinfo *sra);$/;"	p	signature:(struct mdinfo *sra)
abuf	libmdadm/Grow.c	/^static char *abuf, *bbuf;$/;"	v	file:
abuf	libmdadm/super1.c	/^static char abuf[4096+4096];$/;"	v	file:
abuflen	libmdadm/Grow.c	/^static unsigned long long abuflen;$/;"	v	file:
ack	libmdadm/msg.c	/^int ack(int fd, int tmo)$/;"	f	signature:(int fd, int tmo)
ack	libmdadm/msg.h	/^extern int ack(int fd, int tmo);$/;"	p	signature:(int fd, int tmo)
act_default	libmdadm/mdadm.h	/^	act_default,$/;"	e	enum:policy_action
act_err	libmdadm/mdadm.h	/^	act_err$/;"	e	enum:policy_action
act_force_spare	libmdadm/mdadm.h	/^	act_force_spare, \/* this allow non-bare devices in any case *\/$/;"	e	enum:policy_action
act_include	libmdadm/mdadm.h	/^	act_include,$/;"	e	enum:policy_action
act_re_add	libmdadm/mdadm.h	/^	act_re_add,$/;"	e	enum:policy_action
act_spare	libmdadm/mdadm.h	/^	act_spare,	\/* This only applies to bare devices *\/$/;"	e	enum:policy_action
act_spare_same_slot	libmdadm/mdadm.h	/^	act_spare_same_slot, \/* this allows non-bare devices,$/;"	e	enum:policy_action
action	libmdadm/mdadm.h	/^	char	*action;$/;"	m	struct:context	access:public
action	libmdadm/super-intel.c	/^		enum action action;$/;"	m	struct:intel_super::dl	typeref:enum:intel_super::dl::action	file:	access:public
action	libmdadm/super-intel.c	/^enum action {$/;"	g	file:
action_fd	libmdadm/mdmon.h	/^	int action_fd;$/;"	m	struct:active_array	access:public
activate_spare	libmdadm/mdadm.h	/^	struct mdinfo *(*activate_spare)(struct active_array *a,$/;"	m	struct:superswitch	typeref:struct:superswitch::activate_spare	access:public
active	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
active	libmdadm/mdadm.h	/^	int		active;$/;"	m	struct:mdstat_ent	access:public
active	libmdadm/mdmon.h	/^		   clean, active, write_pending, active_idle, bad_word};$/;"	e	enum:array_state
active	libmdadm/super-ddf.c	/^	struct ddf_header	*active;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_header	file:	access:public
active_array	libmdadm/mdmon.h	/^struct active_array {$/;"	s
active_array::action_fd	libmdadm/mdmon.h	/^	int action_fd;$/;"	m	struct:active_array	access:public
active_array::check_degraded	libmdadm/mdmon.h	/^	int check_degraded; \/* flag set by mon, read by manage *\/$/;"	m	struct:active_array	access:public
active_array::check_reshape	libmdadm/mdmon.h	/^	int check_reshape; \/* flag set by mon, read by manage *\/$/;"	m	struct:active_array	access:public
active_array::container	libmdadm/mdmon.h	/^	struct supertype *container;$/;"	m	struct:active_array	typeref:struct:active_array::supertype	access:public
active_array::curr_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
active_array::curr_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
active_array::info	libmdadm/mdmon.h	/^	struct mdinfo info;$/;"	m	struct:active_array	typeref:struct:active_array::mdinfo	access:public
active_array::last_checkpoint	libmdadm/mdmon.h	/^	unsigned long long last_checkpoint; \/* sync_completed fires for many$/;"	m	struct:active_array	access:public
active_array::metadata_fd	libmdadm/mdmon.h	/^	int metadata_fd; \/* for monitoring rw\/ro status *\/$/;"	m	struct:active_array	access:public
active_array::next	libmdadm/mdmon.h	/^	struct active_array *next, *replaces;$/;"	m	struct:active_array	typeref:struct:active_array::active_array	access:public
active_array::next_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
active_array::next_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
active_array::prev_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::sync_action	access:public
active_array::prev_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::array_state	access:public
active_array::replaces	libmdadm/mdmon.h	/^	struct active_array *next, *replaces;$/;"	m	struct:active_array	typeref:struct:active_array::	access:public
active_array::resync_start_fd	libmdadm/mdmon.h	/^	int resync_start_fd;$/;"	m	struct:active_array	access:public
active_array::sync_completed_fd	libmdadm/mdmon.h	/^	int sync_completed_fd; \/* for checkpoint notification events *\/$/;"	m	struct:active_array	access:public
active_array::to_remove	libmdadm/mdmon.h	/^	int to_remove;$/;"	m	struct:active_array	access:public
active_arrays_by_format	libmdadm/super-intel.c	/^active_arrays_by_format(char *name, char* hba, struct md_list **devlist,$/;"	f	file:	signature:(char *name, char* hba, struct md_list **devlist, int dpa, int verbose)
active_disks	libmdadm/md_p.h	/^	__u32 active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:mdp_superblock_s	access:public
active_disks	libmdadm/md_u.h	/^	int active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:mdu_array_info_s	access:public
active_idle	libmdadm/mdmon.h	/^		   clean, active, write_pending, active_idle, bad_word};$/;"	e	enum:array_state
adapter_rom_resources	libmdadm/probe_roms.c	/^static struct resource adapter_rom_resources[] = { {$/;"	v	typeref:struct:resource	file:
add_data_to_buffer	libmke2fs/profile.c	/^static void add_data_to_buffer(struct prof_buf *b, const void *d, size_t len)$/;"	f	file:	signature:(struct prof_buf *b, const void *d, size_t len)
add_detached	libmdadm/Manage.c	/^static void add_detached(struct mddev_dev *dv, int fd, char disp)$/;"	f	file:	signature:(struct mddev_dev *dv, int fd, char disp)
add_dev	libmdadm/lib.c	/^int add_dev(const char *name, const struct stat *stb, int flag, struct FTW *s)$/;"	f	signature:(const char *name, const struct stat *stb, int flag, struct FTW *s)
add_dev	libmdadm/mdadm.h	/^extern int add_dev(const char *name, const struct stat *stb, int flag, struct FTW *s);$/;"	p	signature:(const char *name, const struct stat *stb, int flag, struct FTW *s)
add_dev_1	libmdadm/lib.c	/^int add_dev_1(const char *name, const struct stat *stb, int flag)$/;"	f	signature:(const char *name, const struct stat *stb, int flag)
add_device	libmdadm/Detail.c	/^static int add_device(const char *dev, char ***p_devices,$/;"	f	file:	signature:(const char *dev, char ***p_devices, int *p_max_devices, int n_devices)
add_disk	libmdadm/mdadm.h	/^extern int add_disk(int mdfd, struct supertype *st,$/;"	p	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, struct mdinfo *info)
add_disk	libmdadm/util.c	/^int add_disk(int mdfd, struct supertype *st,$/;"	f	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, struct mdinfo *info)
add_disk_to_container	libmdadm/managemon.c	/^static void add_disk_to_container(struct supertype *st, struct mdinfo *sd)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *sd)
add_faulty	libmdadm/Manage.c	/^static void add_faulty(struct mddev_dev *dv, int fd, char disp)$/;"	f	file:	signature:(struct mddev_dev *dv, int fd, char disp)
add_fd	libmdadm/monitor.c	/^static void add_fd(fd_set *fds, int *maxfd, int fd)$/;"	f	file:	signature:(fd_set *fds, int *maxfd, int fd)
add_internal_bitmap	libmdadm/mdadm.h	/^	int (*add_internal_bitmap)(struct supertype *st, int *chunkp,$/;"	m	struct:superswitch	access:public
add_internal_bitmap0	libmdadm/super0.c	/^static int add_internal_bitmap0(struct supertype *st, int *chunkp,$/;"	f	file:	signature:(struct supertype *st, int *chunkp, int delay, int write_behind, unsigned long long size, int may_change, int major)
add_internal_bitmap1	libmdadm/super1.c	/^add_internal_bitmap1(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, int *chunkp, int delay, int write_behind, unsigned long long size, int may_change, int major)
add_list	libmdadm/super-ddf.c	/^	} *dlist, *add_list;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::dl	file:	access:public
add_member_devname	libmdadm/mdstat.c	/^static int add_member_devname(struct dev_member **m, char *name)$/;"	f	file:	signature:(struct dev_member **m, char *name)
add_new_arrays	libmdadm/Monitor.c	/^static int add_new_arrays(struct mdstat_ent *mdstat, struct state **statelist,$/;"	f	file:	signature:(struct mdstat_ent *mdstat, struct state **statelist, int test, struct alert_info *info)
add_new_arrays	libmdadm/Monitor.c	/^static int add_new_arrays(struct mdstat_ent *mdstat, struct state **statelist,$/;"	p	file:	signature:(struct mdstat_ent *mdstat, struct state **statelist, int test, struct alert_info *info)
add_one	libmdadm/Manage.c	/^static struct mddev_dev *add_one(struct mddev_dev *dv, char *name, char disp)$/;"	f	file:	signature:(struct mddev_dev *dv, char *name, char disp)
add_other_bvd	libmdadm/super-ddf.c	/^static void add_other_bvd(struct vcl *vcl, struct vd_config *vd,$/;"	f	file:	signature:(struct vcl *vcl, struct vd_config *vd, unsigned int len)
add_remove_disk_update	libmdadm/super-intel.c	/^static int add_remove_disk_update(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
add_set	libmdadm/Manage.c	/^static void add_set(struct mddev_dev *dv, int fd, char set_char)$/;"	f	file:	signature:(struct mddev_dev *dv, int fd, char set_char)
add_to_super	libmdadm/mdadm.h	/^	int (*add_to_super)(struct supertype *st, mdu_disk_info_t *dinfo,$/;"	m	struct:superswitch	access:public
add_to_super0	libmdadm/super0.c	/^static int add_to_super0(struct supertype *st, mdu_disk_info_t *dinfo,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dinfo, int fd, char *devname, unsigned long long data_offset)
add_to_super1	libmdadm/super1.c	/^static int add_to_super1(struct supertype *st, mdu_disk_info_t *dk,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk, int fd, char *devname, unsigned long long data_offset)
add_to_super_ddf	libmdadm/super-ddf.c	/^static int add_to_super_ddf(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk, int fd, char *devname, unsigned long long data_offset)
add_to_super_ddf_bvd	libmdadm/super-ddf.c	/^static void add_to_super_ddf_bvd(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk, int fd, char *devname, unsigned long long data_offset)
add_to_super_imsm	libmdadm/super-intel.c	/^static int add_to_super_imsm(struct supertype *st, mdu_disk_info_t *dk,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk, int fd, char *devname, unsigned long long data_offset)
add_to_super_imsm_volume	libmdadm/super-intel.c	/^static int add_to_super_imsm_volume(struct supertype *st, mdu_disk_info_t *dk,$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk, int fd, char *devname)
after	libmdadm/mdadm.h	/^	} before, after;$/;"	m	struct:reshape	typeref:struct:reshape::__anon16	access:public
ahci_enumerate_ports	libmdadm/super-intel.c	/^static int ahci_enumerate_ports(const char *hba_path, int port_count, int host_base, int verbose)$/;"	f	file:	signature:(const char *hba_path, int port_count, int host_base, int verbose)
ahci_get_port_count	libmdadm/super-intel.c	/^static int ahci_get_port_count(const char *hba_path, int *port_count)$/;"	f	file:	signature:(const char *hba_path, int *port_count)
alert	libmdadm/Monitor.c	/^static void alert(char *event, char *dev, char *disc, struct alert_info *info)$/;"	f	file:	signature:(char *event, char *dev, char *disc, struct alert_info *info)
alert	libmdadm/Monitor.c	/^static void alert(char *event, char *dev, char *disc, struct alert_info *info);$/;"	p	file:	signature:(char *event, char *dev, char *disc, struct alert_info *info)
alert_cmd	libmdadm/Monitor.c	/^	char *alert_cmd;$/;"	m	struct:alert_info	file:	access:public
alert_email	libmdadm/config.c	/^static char *alert_email = NULL;$/;"	v	file:
alert_info	libmdadm/Monitor.c	/^struct alert_info {$/;"	s	file:
alert_info::alert_cmd	libmdadm/Monitor.c	/^	char *alert_cmd;$/;"	m	struct:alert_info	file:	access:public
alert_info::dosyslog	libmdadm/Monitor.c	/^	int dosyslog;$/;"	m	struct:alert_info	file:	access:public
alert_info::mailaddr	libmdadm/Monitor.c	/^	char *mailaddr;$/;"	m	struct:alert_info	file:	access:public
alert_info::mailfrom	libmdadm/Monitor.c	/^	char *mailfrom;$/;"	m	struct:alert_info	file:	access:public
alert_mail_from	libmdadm/config.c	/^static char *alert_mail_from = NULL;$/;"	v	file:
alert_program	libmdadm/config.c	/^static char *alert_program = NULL;$/;"	v	file:
align	libmdadm/probe_roms.c	/^static unsigned long align(unsigned long addr, unsigned long alignment)$/;"	f	file:	signature:(unsigned long addr, unsigned long alignment)
align_fd	libmdadm/super1.c	/^struct align_fd {$/;"	s	file:
align_fd::blk_sz	libmdadm/super1.c	/^	int blk_sz;$/;"	m	struct:align_fd	file:	access:public
align_fd::fd	libmdadm/super1.c	/^	int fd;$/;"	m	struct:align_fd	file:	access:public
alignof	libmdadm/sha1.c	232;"	d	file:
all_ff	libmdadm/super-ddf.c	/^static int all_ff(const char *guid)$/;"	f	file:	signature:(const char *guid)
all_ff	libmdadm/super-ddf.c	/^static int all_ff(const char *guid);$/;"	p	file:	signature:(const char *guid)
alloc_intel_hba	libmdadm/super-intel.c	/^static struct intel_hba * alloc_intel_hba(struct sys_dev *device)$/;"	f	file:	signature:(struct sys_dev *device)
alloc_other_bvds	libmdadm/super-ddf.c	/^static int alloc_other_bvds(const struct ddf_super *ddf, struct vcl *vcl)$/;"	f	file:	signature:(const struct ddf_super *ddf, struct vcl *vcl)
alloc_super	libmdadm/super-intel.c	/^static struct intel_super *alloc_super(void)$/;"	f	file:	signature:(void)
analyse_change	libmdadm/Grow.c	/^char *analyse_change(char *devname, struct mdinfo *info, struct reshape *re)$/;"	f	signature:(char *devname, struct mdinfo *info, struct reshape *re)
anchor	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_header	file:	access:public
anchor	libmdadm/super-intel.c	/^		struct imsm_super *anchor; \/* immovable parameters *\/$/;"	m	union:intel_super::__anon10	typeref:struct:intel_super::__anon10::imsm_super	file:	access:public
anchor	libmdadm/super-intel.c	/^	struct imsm_super anchor;$/;"	m	union:__anon12	typeref:struct:__anon12::imsm_super	file:	access:public
append_dlist	libmdadm/config.c	/^static void append_dlist(struct mddev_dev **dlp, struct mddev_dev *list)$/;"	f	file:	signature:(struct mddev_dev **dlp, struct mddev_dev *list)
append_metadata_update	libmdadm/mdadm.h	/^extern void append_metadata_update(struct supertype *st, void *buf, int len);$/;"	p	signature:(struct supertype *st, void *buf, int len)
append_metadata_update	libmdadm/util.c	/^void append_metadata_update(struct supertype *st, void *buf, int len)$/;"	f	signature:(struct supertype *st, void *buf, int len)
apply_reshape_container_disks_update	libmdadm/super-intel.c	/^static int apply_reshape_container_disks_update(struct imsm_update_reshape *u,$/;"	f	file:	signature:(struct imsm_update_reshape *u, struct intel_super *super, void ***space_list)
apply_reshape_migration_update	libmdadm/super-intel.c	/^static int apply_reshape_migration_update(struct imsm_update_reshape_migration *u,$/;"	f	file:	signature:(struct imsm_update_reshape_migration *u, struct intel_super *super, void ***space_list)
apply_size_change_update	libmdadm/super-intel.c	/^static int apply_size_change_update(struct imsm_update_size_change *u,$/;"	f	file:	signature:(struct imsm_update_size_change *u, struct intel_super *super)
apply_takeover_update	libmdadm/super-intel.c	/^static int apply_takeover_update(struct imsm_update_takeover *u,$/;"	f	file:	signature:(struct imsm_update_takeover *u, struct intel_super *super, void ***space_list)
apply_update_activate_spare	libmdadm/super-intel.c	/^static int apply_update_activate_spare(struct imsm_update_activate_spare *u,$/;"	f	file:	signature:(struct imsm_update_activate_spare *u, struct intel_super *super, struct active_array *active_array)
aread	libmdadm/super1.c	/^static int aread(struct align_fd *afd, void *buf, int len)$/;"	f	file:	signature:(struct align_fd *afd, void *buf, int len)
array	libmdadm/mdadm.h	/^	mdu_array_info_t	array;$/;"	m	struct:mdinfo	access:public
array	libmdadm/super-intel.c	/^	int array;$/;"	m	struct:imsm_update_activate_spare	file:	access:public
arrayDisks	libmdadm/mdadm_other.h	/^	struct array_disk_info arrayDisks[MAX_DISK_NUM];$/;"	m	struct:array_detail	typeref:struct:array_detail::array_disk_info	access:public
arrayInfo	libmdadm/mdadm_other.h	/^	mdu_array_info_t arrayInfo;$/;"	m	struct:array_detail	access:public
arrayUUID	libmdadm/mdadm_other.h	/^	int arrayUUID[4];$/;"	m	struct:examine_result	access:public
array_blocks	libmdadm/super-ddf.c	/^	be64	array_blocks;	\/* blocks in array *\/$/;"	m	struct:vd_config	file:	access:public
array_detail	libmdadm/mdadm_other.h	/^struct array_detail {$/;"	s
array_detail::arrayDisks	libmdadm/mdadm_other.h	/^	struct array_disk_info arrayDisks[MAX_DISK_NUM];$/;"	m	struct:array_detail	typeref:struct:array_detail::array_disk_info	access:public
array_detail::arrayInfo	libmdadm/mdadm_other.h	/^	mdu_array_info_t arrayInfo;$/;"	m	struct:array_detail	access:public
array_detail::bInactive	libmdadm/mdadm_other.h	/^	int bInactive;$/;"	m	struct:array_detail	access:public
array_detail::bIsRebuilding	libmdadm/mdadm_other.h	/^	int bIsRebuilding;$/;"	m	struct:array_detail	access:public
array_detail::bIsSuperBlockPersistent	libmdadm/mdadm_other.h	/^	int bIsSuperBlockPersistent;$/;"	m	struct:array_detail	access:public
array_detail::bReshapeActive	libmdadm/mdadm_other.h	/^	int bReshapeActive;$/;"	m	struct:array_detail	access:public
array_detail::iDeltaDisks	libmdadm/mdadm_other.h	/^	int iDeltaDisks;$/;"	m	struct:array_detail	access:public
array_detail::iNewChunkSize	libmdadm/mdadm_other.h	/^	int iNewChunkSize; \/* Byte *\/$/;"	m	struct:array_detail	access:public
array_detail::iRaidNewLevel	libmdadm/mdadm_other.h	/^	int iRaidNewLevel;$/;"	m	struct:array_detail	access:public
array_detail::iRebuildProgress	libmdadm/mdadm_other.h	/^	int iRebuildProgress; \/* -1 if no resync *\/$/;"	m	struct:array_detail	access:public
array_detail::strArrayDevName	libmdadm/mdadm_other.h	/^	char strArrayDevName[32];$/;"	m	struct:array_detail	access:public
array_detail::strArraySize	libmdadm/mdadm_other.h	/^	char strArraySize[32];$/;"	m	struct:array_detail	access:public
array_detail::strArrayState	libmdadm/mdadm_other.h	/^	char strArrayState[128];$/;"	m	struct:array_detail	access:public
array_detail::strContainer	libmdadm/mdadm_other.h	/^	char strContainer[32];$/;"	m	struct:array_detail	access:public
array_detail::strMember	libmdadm/mdadm_other.h	/^	char strMember[32];$/;"	m	struct:array_detail	access:public
array_detail::strRaidLayout	libmdadm/mdadm_other.h	/^	char strRaidLayout[32];$/;"	m	struct:array_detail	access:public
array_detail::strRaidLevel	libmdadm/mdadm_other.h	/^	char strRaidLevel[16];$/;"	m	struct:array_detail	access:public
array_detail::strRaidNewLayout	libmdadm/mdadm_other.h	/^	char strRaidNewLayout[32];$/;"	m	struct:array_detail	access:public
array_detail::strRebuildOperation	libmdadm/mdadm_other.h	/^	char strRebuildOperation[16];$/;"	m	struct:array_detail	access:public
array_detail::strUsedSize	libmdadm/mdadm_other.h	/^	char strUsedSize[32];$/;"	m	struct:array_detail	access:public
array_detail::ullArraySize	libmdadm/mdadm_other.h	/^	unsigned long long ullArraySize;$/;"	m	struct:array_detail	access:public
array_detail::ullReshapeProgress	libmdadm/mdadm_other.h	/^	unsigned long long ullReshapeProgress;$/;"	m	struct:array_detail	access:public
array_detail::ullUsedSize	libmdadm/mdadm_other.h	/^	unsigned long long ullUsedSize;$/;"	m	struct:array_detail	access:public
array_detail::uuid	libmdadm/mdadm_other.h	/^	int uuid[4];$/;"	m	struct:array_detail	access:public
array_disk_info	libmdadm/mdadm_other.h	/^struct array_disk_info {$/;"	s
array_disk_info::diskInfo	libmdadm/mdadm_other.h	/^	mdu_disk_info_t diskInfo;$/;"	m	struct:array_disk_info	access:public
array_disk_info::strDevName	libmdadm/mdadm_other.h	/^	char strDevName[64];$/;"	m	struct:array_disk_info	access:public
array_disk_info::strState	libmdadm/mdadm_other.h	/^	char strState[256];$/;"	m	struct:array_disk_info	access:public
array_state	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	g
array_states	libmdadm/monitor.c	/^static char *array_states[] = {$/;"	v	file:
array_try_spare	libmdadm/Incremental.c	/^static int array_try_spare(char *devname, int *dfdp, struct dev_policy *pol,$/;"	f	file:	signature:(char *devname, int *dfdp, struct dev_policy *pol, struct map_ent *target, int bare, struct supertype *st, int verbose)
arrayline	libmdadm/config.c	/^void arrayline(char *line)$/;"	f	signature:(char *line)
arrays	libmdadm/mdadm.h	/^	struct active_array *arrays;$/;"	m	struct:supertype	typeref:struct:supertype::active_array	access:public
arraystart	libmdadm/Grow.c	/^	__u64	arraystart;$/;"	m	struct:mdp_backup_super	file:	access:public
arraystart2	libmdadm/Grow.c	/^	__u64	arraystart2;$/;"	m	struct:mdp_backup_super	file:	access:public
ascending_migr	libmdadm/super-intel.c	/^	__u32 ascending_migr;	    \/* True if migrating in increasing$/;"	m	struct:migr_record	file:	access:public
ask	libmdadm/mdadm.h	/^extern int ask(char *mesg);$/;"	p	signature:(char *mesg)
ask	libmdadm/util.c	/^int ask(char *mesg)$/;"	f	signature:(char *mesg)
assemble_container_content	libmdadm/Assemble.c	/^int assemble_container_content(struct supertype *st, int mdfd,$/;"	f	signature:(struct supertype *st, int mdfd, struct mdinfo *content, struct context *c, char *chosen_name, int *result)
assemble_container_content	libmdadm/mdadm.h	/^extern int assemble_container_content(struct supertype *st, int mdfd,$/;"	p	signature:(struct supertype *st, int mdfd, struct mdinfo *content, struct context *c, char *chosen_name, int *result)
assembled	libmdadm/mdadm.h	/^		int assembled;	\/* set when assembly succeeds *\/$/;"	m	union:mddev_ident::__anon15	access:public
assume_clean	libmdadm/mdadm.h	/^	int	assume_clean;$/;"	m	struct:shape	access:public
attach_hba_to_super	libmdadm/super-intel.c	/^static int attach_hba_to_super(struct intel_super *super, struct sys_dev *device)$/;"	f	file:	signature:(struct intel_super *super, struct sys_dev *device)
attempt_re_add	libmdadm/Manage.c	/^int attempt_re_add(int fd, int tfd, struct mddev_dev *dv,$/;"	f	signature:(int fd, int tfd, struct mddev_dev *dv, struct supertype *dev_st, struct supertype *tst, unsigned long rdev, char *update, char *devname, int verbose, mdu_array_info_t *array)
attr	libmdadm/platform-intel.h	/^	__u32 attr;$/;"	m	struct:imsm_orom	access:public
attr_bits	libmdadm/part.h	/^	unsigned char attr_bits[8];$/;"	m	struct:GPT_part_entry	access:public
attributes	libmdadm/super-intel.c	/^	__u32 attributes;		\/* 0x34 - 0x37 *\/$/;"	m	struct:imsm_super	file:	access:public
auto_homehost	libmdadm/config.c	/^char auto_homehost[] = "homehost";$/;"	v
auto_no	libmdadm/config.c	/^char auto_no[] = "no";$/;"	v
auto_seen	libmdadm/config.c	/^static int auto_seen = 0;$/;"	v	file:
auto_yes	libmdadm/config.c	/^char auto_yes[] = "yes";$/;"	v
autodetect	libmdadm/Manage.c	/^int autodetect(void)$/;"	f	signature:(void)
autodetect	libmdadm/mdadm.h	/^extern int autodetect(void);$/;"	p	signature:(void)
autof	libmdadm/mdadm.h	/^	int	autof;		\/* 1 for normal, 2 for partitioned *\/$/;"	m	struct:mddev_ident	access:public
autof	libmdadm/mdadm.h	/^	int	autof;$/;"	m	struct:context	access:public
autof	libmdadm/mdadm.h	/^	int	autof;$/;"	m	struct:createinfo	access:public
autoline	libmdadm/config.c	/^void autoline(char *line)$/;"	f	signature:(char *line)
avail_size	libmdadm/mdadm.h	/^	__u64 (*avail_size)(struct supertype *st, __u64 size,$/;"	m	struct:superswitch	access:public
avail_size0	libmdadm/super0.c	/^static __u64 avail_size0(struct supertype *st, __u64 devsize,$/;"	f	file:	signature:(struct supertype *st, __u64 devsize, unsigned long long data_offset)
avail_size1	libmdadm/super1.c	/^static __u64 avail_size1(struct supertype *st, __u64 devsize,$/;"	f	file:	signature:(struct supertype *st, __u64 devsize, unsigned long long data_offset)
avail_size_ddf	libmdadm/super-ddf.c	/^static __u64 avail_size_ddf(struct supertype *st, __u64 devsize,$/;"	f	file:	signature:(struct supertype *st, __u64 devsize, unsigned long long data_offset)
avail_size_imsm	libmdadm/super-intel.c	/^static __u64 avail_size_imsm(struct supertype *st, __u64 devsize,$/;"	f	file:	signature:(struct supertype *st, __u64 devsize, unsigned long long data_offset)
awrite	libmdadm/super1.c	/^static int awrite(struct align_fd *afd, void *buf, int len)$/;"	f	file:	signature:(struct align_fd *afd, void *buf, int len)
b	libmdadm/platform-intel.h	/^	__u8 b[16];$/;"	m	struct:efi_guid	access:public
bHasBadblock	libmdadm/mdadm_other.h	/^	unsigned bHasBadblock;$/;"	m	struct:examine_result	access:public
bHasMDDetail	libmdadm/mdadm_other.h	/^	int bHasMDDetail;$/;"	m	struct:query_result	access:public
bHasMDError	libmdadm/mdadm_other.h	/^	int bHasMDError;$/;"	m	struct:query_result	access:public
bInactive	libmdadm/mdadm_other.h	/^	int bInactive;$/;"	m	struct:array_detail	access:public
bIsMD	libmdadm/mdadm_other.h	/^	int bIsMD;$/;"	m	struct:query_result	access:public
bIsMDActive	libmdadm/mdadm_other.h	/^	int bIsMDActive;$/;"	m	struct:query_result	access:public
bIsRebuilding	libmdadm/mdadm_other.h	/^	int bIsRebuilding;$/;"	m	struct:array_detail	access:public
bIsSuperBlockPersistent	libmdadm/mdadm_other.h	/^	int bIsSuperBlockPersistent;$/;"	m	struct:array_detail	access:public
bIsValid	libmdadm/mdadm_other.h	/^	unsigned bIsValid;$/;"	m	struct:examine_result	access:public
bReshapeActive	libmdadm/mdadm_other.h	/^	int bReshapeActive;$/;"	m	struct:array_detail	access:public
bSBChkSumError	libmdadm/mdadm_other.h	/^	unsigned bSBChkSumError;$/;"	m	struct:examine_result	access:public
backup_blocks	libmdadm/mdadm.h	/^	unsigned long long backup_blocks;$/;"	m	struct:reshape	access:public
backup_file	libmdadm/mdadm.h	/^	char	*backup_file;$/;"	m	struct:context	access:public
backup_lba	libmdadm/part.h	/^	__u64 backup_lba;$/;"	m	struct:GPT	access:public
bad	libmdadm/mdadm.h	/^	int	bad;$/;"	m	struct:map_ent	access:public
bad_action	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
bad_block_log	libmdadm/super-ddf.c	/^struct bad_block_log {$/;"	s	file:
bad_block_log::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:bad_block_log	file:	access:public
bad_block_log::entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:bad_block_log	typeref:struct:bad_block_log::mapped_block	file:	access:public
bad_block_log::entry_count	libmdadm/super-ddf.c	/^	be16	entry_count;$/;"	m	struct:bad_block_log	file:	access:public
bad_block_log::first_spare	libmdadm/super-ddf.c	/^	be64	first_spare;$/;"	m	struct:bad_block_log	file:	access:public
bad_block_log::magic	libmdadm/super-ddf.c	/^	be32	magic;$/;"	m	struct:bad_block_log	file:	access:public
bad_block_log::mapped_block	libmdadm/super-ddf.c	/^	struct mapped_block {$/;"	s	struct:bad_block_log	file:	access:public
bad_block_log::mapped_block::defective_start	libmdadm/super-ddf.c	/^		be64	defective_start;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
bad_block_log::mapped_block::pad	libmdadm/super-ddf.c	/^		__u8	pad[2];$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
bad_block_log::mapped_block::remap_count	libmdadm/super-ddf.c	/^		be16	remap_count;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
bad_block_log::mapped_block::replacement_start	libmdadm/super-ddf.c	/^		be32	replacement_start;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
bad_block_log::pad	libmdadm/super-ddf.c	/^	__u8	pad[10];$/;"	m	struct:bad_block_log	file:	access:public
bad_block_log::spare_count	libmdadm/super-ddf.c	/^	be32	spare_count;$/;"	m	struct:bad_block_log	file:	access:public
bad_blocks	libmdadm/super-intel.c	/^	__u16 bad_blocks;	\/* number of bad blocks during verify *\/$/;"	m	struct:imsm_vol	file:	access:public
bad_blocks_filename	libmke2fs/mke2fs.c	/^static char	*bad_blocks_filename = NULL;$/;"	v	file:
bad_blocks_filename	libmke2fs/mke2fs.h	/^	char bad_blocks_filename[512];$/;"	m	struct:e2fs_cfg	access:public
bad_word	libmdadm/mdmon.h	/^		   clean, active, write_pending, active_idle, bad_word};$/;"	e	enum:array_state
badblocks	libmke2fs/ext2fs.h	/^	ext2_badblocks_list		badblocks;$/;"	m	struct:struct_ext2_filsys	access:public
badblocks_flags	libmke2fs/ext2fsP.h	/^	int	badblocks_flags;$/;"	m	struct:ext2_struct_u32_list	access:public
badblocks_iterate	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_iterate *badblocks_iterate;$/;"	t	typeref:struct:ext2_struct_u32_iterate
badblocks_list	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_list *badblocks_list;$/;"	t	typeref:struct:ext2_struct_u32_list
badblocks_list_add	libmke2fs/ext2fs.h	/^extern errcode_t badblocks_list_add(badblocks_list bb, blk_t blk);$/;"	p	signature:(badblocks_list bb, blk_t blk)
badblocks_list_create	libmke2fs/ext2fs.h	/^extern errcode_t badblocks_list_create(badblocks_list *ret, int size);$/;"	p	signature:(badblocks_list *ret, int size)
badblocks_list_free	libmke2fs/ext2fs.h	/^extern void badblocks_list_free(badblocks_list bb);$/;"	p	signature:(badblocks_list bb)
badblocks_list_iterate	libmke2fs/ext2fs.h	/^extern int badblocks_list_iterate(badblocks_iterate iter, blk_t *blk);$/;"	p	signature:(badblocks_iterate iter, blk_t *blk)
badblocks_list_iterate_begin	libmke2fs/ext2fs.h	/^extern errcode_t badblocks_list_iterate_begin(badblocks_list bb,$/;"	p	signature:(badblocks_list bb, badblocks_iterate *ret)
badblocks_list_iterate_end	libmke2fs/ext2fs.h	/^extern void badblocks_list_iterate_end(badblocks_iterate iter);$/;"	p	signature:(badblocks_iterate iter)
badblocks_list_test	libmke2fs/ext2fs.h	/^extern int badblocks_list_test(badblocks_list bb, blk_t blk);$/;"	p	signature:(badblocks_list bb, blk_t blk)
base	libmke2fs/prof_err.c	/^    long base;$/;"	m	struct:error_table	file:	access:public
base	libmke2fs/profile.c	/^	char *base;$/;"	m	struct:prof_buf	file:	access:public
bb	libmke2fs/ext2fsP.h	/^	ext2_u32_list		bb;$/;"	m	struct:ext2_struct_u32_iterate	access:public
bblist	libmdadm/mdadm.h	/^	int	bblist;$/;"	m	struct:createinfo	access:public
bblog_offset	libmdadm/super1.c	/^	__u32	bblog_offset;	\/* sector offset from superblock to bblog, signed *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
bblog_shift	libmdadm/super1.c	/^	__u8	bblog_shift;	\/* shift from sectors to block size for badblocklist *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
bblog_size	libmdadm/super1.c	/^	__u16	bblog_size;	\/* number of sectors reserved for badblocklist *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
bbm_log	libmdadm/super-intel.c	/^	struct bbm_log *bbm_log;$/;"	m	struct:intel_super	typeref:struct:intel_super::bbm_log	file:	access:public
bbm_log	libmdadm/super-intel.c	/^struct bbm_log {$/;"	s	file:
bbm_log::entry_count	libmdadm/super-intel.c	/^	__u32 entry_count;$/;"	m	struct:bbm_log	file:	access:public
bbm_log::first_spare_lba	libmdadm/super-intel.c	/^	__u64 first_spare_lba;$/;"	m	struct:bbm_log	file:	access:public
bbm_log::mapped_block_entries	libmdadm/super-intel.c	/^	struct bbm_log_entry mapped_block_entries[BBM_LOG_MAX_ENTRIES];$/;"	m	struct:bbm_log	typeref:struct:bbm_log::bbm_log_entry	file:	access:public
bbm_log::reserved	libmdadm/super-intel.c	/^	__u32 reserved; \/* 0xFFFF *\/$/;"	m	struct:bbm_log	file:	access:public
bbm_log::reserved_spare_block_count	libmdadm/super-intel.c	/^	__u32 reserved_spare_block_count; \/* 0 *\/$/;"	m	struct:bbm_log	file:	access:public
bbm_log::signature	libmdadm/super-intel.c	/^	__u32 signature; \/* 0xABADB10C *\/$/;"	m	struct:bbm_log	file:	access:public
bbm_log_entry	libmdadm/super-intel.c	/^struct bbm_log_entry {$/;"	s	file:
bbm_log_entry::defective_block_start	libmdadm/super-intel.c	/^	__u64 defective_block_start;$/;"	m	struct:bbm_log_entry	file:	access:public
bbm_log_entry::disk_ordinal	libmdadm/super-intel.c	/^	__u16 disk_ordinal;$/;"	m	struct:bbm_log_entry	file:	access:public
bbm_log_entry::remapped_marked_count	libmdadm/super-intel.c	/^	__u16 remapped_marked_count;$/;"	m	struct:bbm_log_entry	file:	access:public
bbm_log_entry::spare_block_offset	libmdadm/super-intel.c	/^	__u32 spare_block_offset;$/;"	m	struct:bbm_log_entry	file:	access:public
bbm_log_size	libmdadm/super-intel.c	/^	__u32 bbm_log_size;		\/* 0x48 - 0x4B - size of bad Block Mgmt Log in bytes *\/$/;"	m	struct:imsm_super	file:	access:public
bbm_section_length	libmdadm/super-ddf.c	/^	be32	bbm_section_length;$/;"	m	struct:ddf_header	file:	access:public
bbm_section_offset	libmdadm/super-ddf.c	/^	be32	bbm_section_offset;$/;"	m	struct:ddf_header	file:	access:public
bbuf	libmdadm/Grow.c	/^static char *abuf, *bbuf;$/;"	v	file:
be16	libmdadm/super-ddf.c	/^} be16;$/;"	t	typeref:struct:__be16	file:
be16_and	libmdadm/super-ddf.c	70;"	d	file:
be16_clear	libmdadm/super-ddf.c	72;"	d	file:
be16_eq	libmdadm/super-ddf.c	69;"	d	file:
be16_or	libmdadm/super-ddf.c	71;"	d	file:
be16_set	libmdadm/super-ddf.c	73;"	d	file:
be16_to_cpu	libmdadm/super-ddf.c	85;"	d	file:
be32	libmdadm/super-ddf.c	/^} be32;$/;"	t	typeref:struct:__be32	file:
be32_eq	libmdadm/super-ddf.c	78;"	d	file:
be32_to_cpu	libmdadm/super-ddf.c	92;"	d	file:
be64	libmdadm/super-ddf.c	/^} be64;$/;"	t	typeref:struct:__be64	file:
be64_eq	libmdadm/super-ddf.c	83;"	d	file:
be64_to_cpu	libmdadm/super-ddf.c	99;"	d	file:
before	libmdadm/mdadm.h	/^	} before, after;$/;"	m	struct:reshape	typeref:struct:reshape::__anon16	access:public
bg_rate	libmdadm/super-ddf.c	/^	__u8	bg_rate;$/;"	m	struct:vd_config	file:	access:public
bitmap	libmdadm/bitmap.h	/^struct bitmap {$/;"	s
bitmap::bp	libmdadm/bitmap.h	/^	struct bitmap_page *bp;$/;"	m	struct:bitmap	typeref:struct:bitmap::bitmap_page	access:public
bitmap::chunks	libmdadm/bitmap.h	/^	unsigned long chunks; \/* total number of data chunks for the array *\/$/;"	m	struct:bitmap	access:public
bitmap::chunkshift	libmdadm/bitmap.h	/^	unsigned long chunkshift; \/* chunksize = 2^chunkshift (for bitops) *\/$/;"	m	struct:bitmap	access:public
bitmap::chunksize	libmdadm/bitmap.h	/^	unsigned long chunksize;$/;"	m	struct:bitmap	access:public
bitmap::complete_pages	libmdadm/bitmap.h	/^	struct list_head complete_pages;$/;"	m	struct:bitmap	typeref:struct:bitmap::list_head	access:public
bitmap::counter_bits	libmdadm/bitmap.h	/^	int counter_bits; \/* how many bits per block counter *\/$/;"	m	struct:bitmap	access:public
bitmap::daemon	libmdadm/bitmap.h	/^	mdk_thread_t *daemon;$/;"	m	struct:bitmap	access:public
bitmap::daemon_sleep	libmdadm/bitmap.h	/^	unsigned long daemon_sleep; \/* how many seconds between updates? *\/$/;"	m	struct:bitmap	access:public
bitmap::events_cleared	libmdadm/bitmap.h	/^	__u64	events_cleared;$/;"	m	struct:bitmap	access:public
bitmap::file	libmdadm/bitmap.h	/^	struct file *file; \/* backing disk file *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::file	access:public
bitmap::file_pages	libmdadm/bitmap.h	/^	unsigned long file_pages; \/* number of pages in the file *\/$/;"	m	struct:bitmap	access:public
bitmap::filemap	libmdadm/bitmap.h	/^	struct page **filemap; \/* list of cache pages for the file *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::page	access:public
bitmap::filemap_attr	libmdadm/bitmap.h	/^	unsigned long *filemap_attr; \/* attributes associated w\/ filemap pages *\/$/;"	m	struct:bitmap	access:public
bitmap::flags	libmdadm/bitmap.h	/^	unsigned long flags;$/;"	m	struct:bitmap	access:public
bitmap::lock	libmdadm/bitmap.h	/^	spinlock_t lock;$/;"	m	struct:bitmap	access:public
bitmap::mddev	libmdadm/bitmap.h	/^	mddev_t *mddev; \/* the md device that the bitmap is for *\/$/;"	m	struct:bitmap	access:public
bitmap::missing_pages	libmdadm/bitmap.h	/^	unsigned long missing_pages; \/* number of pages not yet allocated *\/$/;"	m	struct:bitmap	access:public
bitmap::pages	libmdadm/bitmap.h	/^	unsigned long pages; \/* total number of pages in the bitmap *\/$/;"	m	struct:bitmap	access:public
bitmap::sb_page	libmdadm/bitmap.h	/^	struct page *sb_page; \/* cached copy of the bitmap file superblock *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::page	access:public
bitmap::syncchunk	libmdadm/bitmap.h	/^	unsigned long syncchunk;$/;"	m	struct:bitmap	access:public
bitmap::write_daemon	libmdadm/bitmap.h	/^	mdk_thread_t *write_daemon;$/;"	m	struct:bitmap	access:public
bitmap::write_done	libmdadm/bitmap.h	/^	struct semaphore write_done;$/;"	m	struct:bitmap	typeref:struct:bitmap::semaphore	access:public
bitmap::write_lock	libmdadm/bitmap.h	/^	spinlock_t write_lock;$/;"	m	struct:bitmap	access:public
bitmap::write_pages	libmdadm/bitmap.h	/^	struct list_head write_pages;$/;"	m	struct:bitmap	typeref:struct:bitmap::list_head	access:public
bitmap::write_pool	libmdadm/bitmap.h	/^	mempool_t *write_pool;$/;"	m	struct:bitmap	access:public
bitmap::write_ready	libmdadm/bitmap.h	/^	struct semaphore write_ready;$/;"	m	struct:bitmap	typeref:struct:bitmap::semaphore	access:public
bitmap::write_wait	libmdadm/bitmap.h	/^	wait_queue_head_t write_wait;$/;"	m	struct:bitmap	access:public
bitmap::writeback_daemon	libmdadm/bitmap.h	/^	mdk_thread_t *writeback_daemon;$/;"	m	struct:bitmap	access:public
bitmap::writes_pending	libmdadm/bitmap.h	/^	unsigned long writes_pending;$/;"	m	struct:bitmap	access:public
bitmap_active	libmdadm/bitmap.h	/^int  bitmap_active(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_bits	libmdadm/bitmap.c	/^unsigned long long bitmap_bits(unsigned long long array_size,$/;"	f	signature:(unsigned long long array_size, unsigned long chunksize)
bitmap_chunk	libmdadm/mdadm.h	/^	int	bitmap_chunk;$/;"	m	struct:shape	access:public
bitmap_close_sync	libmdadm/bitmap.h	/^void bitmap_close_sync(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_counter_t	libmdadm/bitmap.h	/^typedef __u16 bitmap_counter_t;$/;"	t
bitmap_create	libmdadm/bitmap.h	/^int  bitmap_create(mddev_t *mddev);$/;"	p	signature:(mddev_t *mddev)
bitmap_destroy	libmdadm/bitmap.h	/^void bitmap_destroy(mddev_t *mddev);$/;"	p	signature:(mddev_t *mddev)
bitmap_end_sync	libmdadm/bitmap.h	/^void bitmap_end_sync(struct bitmap *bitmap, sector_t offset, int *blocks, int aborted);$/;"	p	signature:(struct bitmap *bitmap, sector_t offset, int *blocks, int aborted)
bitmap_endwrite	libmdadm/bitmap.h	/^void bitmap_endwrite(struct bitmap *bitmap, sector_t offset, unsigned long sectors,$/;"	p	signature:(struct bitmap *bitmap, sector_t offset, unsigned long sectors, int success)
bitmap_fd	libmdadm/mdadm.h	/^	int	bitmap_fd;$/;"	m	struct:mddev_ident	access:public
bitmap_fd_read	libmdadm/bitmap.c	/^bitmap_info_t *bitmap_fd_read(int fd, int brief)$/;"	f	signature:(int fd, int brief)
bitmap_file	libmdadm/mdadm.h	/^	char	*bitmap_file;$/;"	m	struct:mddev_ident	access:public
bitmap_file	libmdadm/mdadm.h	/^	char	*bitmap_file;$/;"	m	struct:shape	access:public
bitmap_file_open	libmdadm/bitmap.c	/^int bitmap_file_open(char *filename, struct supertype **stp)$/;"	f	signature:(char *filename, struct supertype **stp)
bitmap_info_s	libmdadm/bitmap.c	/^typedef struct bitmap_info_s {$/;"	s	file:
bitmap_info_s::dirty_bits	libmdadm/bitmap.c	/^	unsigned long long dirty_bits;$/;"	m	struct:bitmap_info_s	file:	access:public
bitmap_info_s::sb	libmdadm/bitmap.c	/^	bitmap_super_t sb;$/;"	m	struct:bitmap_info_s	file:	access:public
bitmap_info_s::total_bits	libmdadm/bitmap.c	/^	unsigned long long total_bits;$/;"	m	struct:bitmap_info_s	file:	access:public
bitmap_info_t	libmdadm/bitmap.c	/^} bitmap_info_t;$/;"	t	typeref:struct:bitmap_info_s	file:
bitmap_offset	libmdadm/mdadm.h	/^	long			bitmap_offset;	\/* 0 == none, 1 == a file *\/$/;"	m	struct:mdinfo	access:public
bitmap_offset	libmdadm/super1.c	/^	__u32	bitmap_offset;	\/* sectors after start of superblock that bitmap starts$/;"	m	struct:mdp_superblock_1	file:	access:public
bitmap_page	libmdadm/bitmap.h	/^struct bitmap_page {$/;"	s
bitmap_page::count	libmdadm/bitmap.h	/^	int count;$/;"	m	struct:bitmap_page	access:public
bitmap_page::hijacked	libmdadm/bitmap.h	/^	unsigned int hijacked;$/;"	m	struct:bitmap_page	access:public
bitmap_page::map	libmdadm/bitmap.h	/^	char *map;$/;"	m	struct:bitmap_page	access:public
bitmap_print_sb	libmdadm/bitmap.h	/^void bitmap_print_sb(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_sectors	libmdadm/bitmap.c	/^unsigned long bitmap_sectors(struct bitmap_super_s *bsb)$/;"	f	signature:(struct bitmap_super_s *bsb)
bitmap_sectors	libmdadm/mdadm.h	/^extern unsigned long bitmap_sectors(struct bitmap_super_s *bsb);$/;"	p	signature:(struct bitmap_super_s *bsb)
bitmap_setallbits	libmdadm/bitmap.h	/^int  bitmap_setallbits(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_start_sync	libmdadm/bitmap.h	/^int bitmap_start_sync(struct bitmap *bitmap, sector_t offset, int *blocks);$/;"	p	signature:(struct bitmap *bitmap, sector_t offset, int *blocks)
bitmap_startwrite	libmdadm/bitmap.h	/^void bitmap_startwrite(struct bitmap *bitmap, sector_t offset, unsigned long sectors);$/;"	p	signature:(struct bitmap *bitmap, sector_t offset, unsigned long sectors)
bitmap_state	libmdadm/bitmap.c	/^const char *bitmap_state(int state_num)$/;"	f	signature:(int state_num)
bitmap_state	libmdadm/bitmap.h	/^enum bitmap_state {$/;"	g
bitmap_states	libmdadm/bitmap.c	/^mapping_t bitmap_states[] = {$/;"	v
bitmap_super_s	libmdadm/bitmap.h	/^typedef struct bitmap_super_s {$/;"	s
bitmap_super_s::chunksize	libmdadm/bitmap.h	/^	__u32 chunksize;    \/* 52  the bitmap chunk size in bytes *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::daemon_sleep	libmdadm/bitmap.h	/^	__u32 daemon_sleep; \/* 56  seconds between disk flushes *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::events	libmdadm/bitmap.h	/^	__u64 events;       \/* 24  event counter for the bitmap (1)*\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::events_cleared	libmdadm/bitmap.h	/^	__u64 events_cleared;\/*32  event counter when last bit cleared (2) *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::magic	libmdadm/bitmap.h	/^	__u32 magic;        \/*  0  BITMAP_MAGIC *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::pad	libmdadm/bitmap.h	/^	__u8  pad[256 - 64]; \/* set to zero *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::state	libmdadm/bitmap.h	/^	__u32 state;        \/* 48  bitmap state information *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::sync_size	libmdadm/bitmap.h	/^	__u64 sync_size;    \/* 40  the size of the md device's sync range(3) *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::uuid	libmdadm/bitmap.h	/^	__u8  uuid[16];     \/*  8  128 bit uuid - must match md device uuid *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::version	libmdadm/bitmap.h	/^	__u32 version;      \/*  4  the bitmap major for now, could change... *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_s::write_behind	libmdadm/bitmap.h	/^	__u32 write_behind; \/* 60  number of outstanding write-behind writes *\/$/;"	m	struct:bitmap_super_s	access:public
bitmap_super_t	libmdadm/bitmap.h	/^} bitmap_super_t;$/;"	t	typeref:struct:bitmap_super_s
bitmap_unplug	libmdadm/bitmap.h	/^int bitmap_unplug(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_update_sb	libmdadm/bitmap.h	/^int bitmap_update_sb(struct bitmap *bitmap);$/;"	p	signature:(struct bitmap *bitmap)
bitmap_update_uuid	libmdadm/bitmap.c	/^int bitmap_update_uuid(int fd, int *uuid, int swap)$/;"	f	signature:(int fd, int *uuid, int swap)
bitmap_update_uuid	libmdadm/mdadm.h	/^extern int bitmap_update_uuid(int fd, int *uuid, int swap);$/;"	p	signature:(int fd, int *uuid, int swap)
blk	libmke2fs/ext2fs.h	/^	blk64_t	blk;$/;"	m	struct:ext2_db_entry2	access:public
blk	libmke2fs/ext2fs.h	/^	blk_t	blk;$/;"	m	struct:ext2_db_entry	access:public
blk64_t	libmke2fs/ext2fs.h	/^typedef __u64 __bitwise		blk64_t;$/;"	t
blk_sz	libmdadm/super1.c	/^	int blk_sz;$/;"	m	struct:align_fd	file:	access:public
blk_t	libmke2fs/ext2fs.h	/^typedef __u32 __bitwise		blk_t;$/;"	t
blkid	FilesystemManager.cpp	/^int FilesystemManager::blkid()$/;"	f	class:FilesystemManager	signature:()
blkid	FilesystemManager.h	/^	int blkid();$/;"	p	class:FilesystemManager	access:private	signature:()
blkpg_ioctl_arg	libmdadm/util.c	/^struct blkpg_ioctl_arg {$/;"	s	file:
blkpg_ioctl_arg::data	libmdadm/util.c	/^	void *data;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
blkpg_ioctl_arg::datalen	libmdadm/util.c	/^	int datalen;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
blkpg_ioctl_arg::flags	libmdadm/util.c	/^	int flags;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
blkpg_ioctl_arg::op	libmdadm/util.c	/^	int op;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
blkpg_partition	libmdadm/util.c	/^struct blkpg_partition {$/;"	s	file:
blkpg_partition::devname	libmdadm/util.c	/^	char devname[BLKPG_DEVNAMELTH];	\/* partition name, like sda5 or c0d1p2,$/;"	m	struct:blkpg_partition	file:	access:public
blkpg_partition::length	libmdadm/util.c	/^	long long length;		\/* length in bytes *\/$/;"	m	struct:blkpg_partition	file:	access:public
blkpg_partition::pno	libmdadm/util.c	/^	int pno;			\/* partition number *\/$/;"	m	struct:blkpg_partition	file:	access:public
blkpg_partition::start	libmdadm/util.c	/^	long long start;		\/* starting offset in bytes *\/$/;"	m	struct:blkpg_partition	file:	access:public
blkpg_partition::volname	libmdadm/util.c	/^	char volname[BLKPG_VOLNAMELTH];	\/* volume label *\/$/;"	m	struct:blkpg_partition	file:	access:public
block_alloc_stats	libmke2fs/ext2fs.h	/^	void (*block_alloc_stats)(ext2_filsys fs, blk64_t blk, int inuse);$/;"	m	struct:struct_ext2_filsys	access:public
block_map	libmke2fs/ext2fs.h	/^	ext2fs_block_bitmap		block_map;$/;"	m	struct:struct_ext2_filsys	access:public
block_monitor	libmdadm/msg.c	/^int block_monitor(char *container, const int freeze)$/;"	f	signature:(char *container, const int freeze)
block_monitor	libmdadm/msg.h	/^extern int block_monitor(char *container, const int freeze);$/;"	p	signature:(char *container, const int freeze)
block_sizes	libmdadm/super-ddf.c	/^				__u64		*block_sizes; \/* NULL if all the same *\/$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	file:	access:public
block_subarray	libmdadm/msg.c	/^int block_subarray(struct mdinfo *sra)$/;"	f	signature:(struct mdinfo *sra)
block_subarray	libmdadm/msg.h	/^extern int block_subarray(struct mdinfo *sra);$/;"	p	signature:(struct mdinfo *sra)
blockcnt	libmke2fs/ext2fs.h	/^	e2_blkcnt_t	blockcnt;$/;"	m	struct:ext2_db_entry2	access:public
blockcnt	libmke2fs/ext2fs.h	/^	int	blockcnt;$/;"	m	struct:ext2_db_entry	access:public
blocks	libmdadm/super-ddf.c	/^	be64	blocks;		\/* blocks per component could be different$/;"	m	struct:vd_config	file:	access:public
blocks_num	libmdadm/part.h	/^  __u32 blocks_num;$/;"	m	struct:MBR_part_record	access:public
blocks_per_group	libmke2fs/mke2fs.h	/^	__u32 blocks_per_group;$/;"	m	struct:e2fs_cfg	access:public
blocks_per_member	libmdadm/super-intel.c	/^static unsigned long long blocks_per_member(struct imsm_map *map)$/;"	f	file:	signature:(struct imsm_map *map)
blocks_per_member_hi	libmdadm/super-intel.c	/^	__u32 blocks_per_member_hi;$/;"	m	struct:imsm_map	file:	access:public
blocks_per_member_lo	libmdadm/super-intel.c	/^	__u32 blocks_per_member_lo;\/* blocks per member *\/$/;"	m	struct:imsm_map	file:	access:public
blocks_per_migr_unit	libmdadm/super-intel.c	/^static __u64 blocks_per_migr_unit(struct intel_super *super,$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev)
blocks_per_migr_unit	libmdadm/super-intel.c	/^static __u64 blocks_per_migr_unit(struct intel_super *super,$/;"	p	file:	signature:(struct intel_super *super, struct imsm_dev *dev)
blocks_per_strip	libmdadm/super-intel.c	/^	__u16 blocks_per_strip;$/;"	m	struct:imsm_map	file:	access:public
blocks_per_unit	libmdadm/super-intel.c	/^	__u32 blocks_per_unit;      \/* Num disk blocks per unit of operation *\/$/;"	m	struct:migr_record	file:	access:public
blocksize	libmke2fs/ext2fs.h	/^	unsigned int			blocksize;$/;"	m	struct:struct_ext2_filsys	access:public
blocksize	libmke2fs/mke2fs.h	/^	int blocksize;$/;"	m	struct:e2fs_cfg	access:public
bootable	libmdadm/part.h	/^  __u8 bootable;$/;"	m	struct:MBR_part_record	access:public
bp	libmdadm/bitmap.h	/^	struct bitmap_page *bp;$/;"	m	struct:bitmap	typeref:struct:bitmap::bitmap_page	access:public
brief	libmdadm/mdadm.h	/^	int	brief;$/;"	m	struct:context	access:public
brief_detail_super	libmdadm/mdadm.h	/^	void (*brief_detail_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
brief_detail_super0	libmdadm/super0.c	/^static void brief_detail_super0(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
brief_detail_super1	libmdadm/super1.c	/^static void brief_detail_super1(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
brief_detail_super_ddf	libmdadm/super-ddf.c	/^static void brief_detail_super_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
brief_detail_super_imsm	libmdadm/super-intel.c	/^static void brief_detail_super_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
brief_examine_subarrays	libmdadm/mdadm.h	/^	void (*brief_examine_subarrays)(struct supertype *st, int verbose);$/;"	m	struct:superswitch	access:public
brief_examine_subarrays_ddf	libmdadm/super-ddf.c	/^static void brief_examine_subarrays_ddf(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
brief_examine_subarrays_imsm	libmdadm/super-intel.c	/^static void brief_examine_subarrays_imsm(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
brief_examine_super	libmdadm/mdadm.h	/^	void (*brief_examine_super)(struct supertype *st, int verbose);$/;"	m	struct:superswitch	access:public
brief_examine_super0	libmdadm/super0.c	/^static void brief_examine_super0(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
brief_examine_super1	libmdadm/super1.c	/^static void brief_examine_super1(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
brief_examine_super_ddf	libmdadm/super-ddf.c	/^static void brief_examine_super_ddf(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
brief_examine_super_imsm	libmdadm/super-intel.c	/^static void brief_examine_super_imsm(struct supertype *st, int verbose)$/;"	f	file:	signature:(struct supertype *st, int verbose)
bsb	libmdadm/Grow.c	/^} __attribute__((aligned(512))) bsb, bsb2;$/;"	v	typeref:struct:mdp_backup_super	file:
bsb2	libmdadm/Grow.c	/^} __attribute__((aligned(512))) bsb, bsb2;$/;"	v	typeref:struct:mdp_backup_super	file:
bsb_csum	libmdadm/Grow.c	/^static __u32 bsb_csum(char *buf, int len)$/;"	f	file:	signature:(char *buf, int len)
bswap_16	libmdadm/mdadm.h	117;"	d
bswap_32	libmdadm/mdadm.h	119;"	d
bswap_64	libmdadm/mdadm.h	123;"	d
buf	libmdadm/mdadm.h	/^	char	*buf;$/;"	m	struct:metadata_update	access:public
buf	libmdadm/super-intel.c	/^		void *buf; \/* O_DIRECT buffer for reading\/writing metadata *\/$/;"	m	union:intel_super::__anon10	file:	access:public
buf	libmdadm/super-intel.c	/^	char buf[512];$/;"	m	union:__anon12	file:	access:public
buf	libmke2fs/ext2fsP.h	/^	char		*buf;$/;"	m	struct:dir_context	access:public
buf	libmke2fs/mke2fs.h	/^	char *buf;$/;"	m	struct:mke2fs_handle	access:public
buffer	libmdadm/sha1.h	/^  sha1_uint32 buffer[32];$/;"	m	struct:sha1_ctx	access:public
buffer	libmke2fs/ext2fsP.h	/^	void *				buffer;$/;"	m	struct:ext2_inode_cache	access:public
buffer_blk	libmke2fs/ext2fsP.h	/^	blk64_t				buffer_blk;$/;"	m	struct:ext2_inode_cache	access:public
buflen	libmdadm/sha1.h	/^  sha1_uint32 buflen;$/;"	m	struct:sha1_ctx	access:public
build	libmdadm/platform-intel.h	/^	__u16 build; \/* Example: 1020 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
bytes_avail	libmke2fs/ext2fs.h	/^	int		bytes_avail;$/;"	m	struct:ext2_extent_info	access:public
cState	libmdadm/mdadm_other.h	/^	char cState; \/* Active: 'A', Spare: 'S', Replacement: 'R' *\/$/;"	m	struct:examine_result	access:public
cache	libmke2fs/ext2fsP.h	/^	struct ext2_inode_cache_ent	*cache;$/;"	m	struct:ext2_inode_cache	typeref:struct:ext2_inode_cache::ext2_inode_cache_ent	access:public
cache_last	libmke2fs/ext2fsP.h	/^	int				cache_last;$/;"	m	struct:ext2_inode_cache	access:public
cache_pol	libmdadm/super-ddf.c	/^	__u8	cache_pol[8];$/;"	m	struct:vd_config	file:	access:public
cache_policy	libmdadm/super-intel.c	/^	__u16 cache_policy;$/;"	m	struct:imsm_dev	file:	access:public
cache_size	libmdadm/mdadm.h	/^	unsigned long		cache_size; \/* size of raid456 stripe cache*\/$/;"	m	struct:mdinfo	access:public
cache_size	libmdadm/super-intel.c	/^	__u32 cache_size;		\/* 0x3c - 0x40 in mb *\/$/;"	m	struct:imsm_super	file:	access:public
cache_size	libmke2fs/ext2fsP.h	/^	int				cache_size;$/;"	m	struct:ext2_inode_cache	access:public
calc_array_size	libmdadm/mdadm.h	/^extern unsigned long long calc_array_size(int level, int raid_disks, int layout,$/;"	p	signature:(int level, int raid_disks, int layout, int chunksize, unsigned long long devsize)
calc_array_size	libmdadm/util.c	/^unsigned long long calc_array_size(int level, int raid_disks, int layout,$/;"	f	signature:(int level, int raid_disks, int layout, int chunksize, unsigned long long devsize)
calc_crc	libmdadm/super-ddf.c	/^static be32 calc_crc(void *buf, int len)$/;"	f	file:	signature:(void *buf, int len)
calc_csum	libmdadm/mdadm.h	/^extern unsigned long calc_csum(void *super, int bytes);$/;"	p	signature:(void *super, int bytes)
calc_csum	libmdadm/util.c	/^unsigned long calc_csum(void *super, int bytes)$/;"	f	signature:(void *super, int bytes)
calc_sb0_csum	libmdadm/super0.c	/^static unsigned long calc_sb0_csum(mdp_super_t *super)$/;"	f	file:	signature:(mdp_super_t *super)
calc_sb_1_csum	libmdadm/super1.c	/^static unsigned int calc_sb_1_csum(struct mdp_superblock_1 * sb)$/;"	f	file:	signature:(struct mdp_superblock_1 * sb)
capabilities	libmdadm/platform-intel.h	/^	__u32 capabilities;$/;"	m	struct:imsm_orom	access:public
catch_term	libmdadm/Grow.c	/^static void catch_term(int sig)$/;"	f	file:	signature:(int sig)
cb_func	libmke2fs/mke2fs.h	/^	mke2fs_cb_func cb_func;$/;"	m	struct:mke2fs_handle	access:public
cdevlist	libmdadm/config.c	/^} *cdevlist = NULL;$/;"	v	typeref:struct:conf_dev
cfg	libmke2fs/mke2fs.h	/^	struct e2fs_cfg cfg;$/;"	m	struct:mke2fs_handle	typeref:struct:mke2fs_handle::e2fs_cfg	access:public
cflag	libmke2fs/mke2fs.c	/^static int	cflag;$/;"	v	file:
cflag	libmke2fs/mke2fs.h	/^	int cflag;$/;"	m	struct:e2fs_cfg	access:public
check	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
check_array	libmdadm/Monitor.c	/^static int check_array(struct state *st, struct mdstat_ent *mdstat,$/;"	f	file:	signature:(struct state *st, struct mdstat_ent *mdstat, int test, struct alert_info *ainfo, int increments, char *prefer)
check_array	libmdadm/Monitor.c	/^static int check_array(struct state *st, struct mdstat_ent *mdstat,$/;"	p	file:	signature:(struct state *st, struct mdstat_ent *mdstat, int test, struct alert_info *info, int increments, char *prefer)
check_degradation_change	libmdadm/super-intel.c	/^int check_degradation_change(struct mdinfo *info,$/;"	f	signature:(struct mdinfo *info, int *sources, int degraded)
check_degraded	libmdadm/mdmon.h	/^	int check_degraded; \/* flag set by mon, read by manage *\/$/;"	m	struct:active_array	access:public
check_directory	libmke2fs/ext2fs.h	/^	errcode_t (*check_directory)(ext2_filsys fs, ext2_ino_t ino);$/;"	m	struct:struct_ext2_filsys	access:public
check_donor	libmdadm/Monitor.c	/^static int check_donor(struct state *from, struct state *to)$/;"	f	file:	signature:(struct state *from, struct state *to)
check_env	libmdadm/lib.c	/^int check_env(char *name)$/;"	f	signature:(char *name)
check_env	libmdadm/mdadm.h	/^extern int check_env(char *name);$/;"	p	signature:(char *name)
check_ext2	libmdadm/mdadm.h	/^extern int check_ext2(int fd, char *name);$/;"	p	signature:(int fd, char *name)
check_ext2	libmdadm/util.c	/^int check_ext2(int fd, char *name)$/;"	f	signature:(int fd, char *name)
check_idle	libmdadm/Grow.c	/^static int check_idle(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
check_mdmon_version	libmdadm/msg.c	/^int check_mdmon_version(char *container)$/;"	f	signature:(char *container)
check_mount	libmke2fs/util.c	/^int check_mount(const char *device, int force, const char *type)$/;"	f	signature:(const char *device, int force, const char *type)
check_mount	libmke2fs/util.h	/^extern int check_mount(const char *device, int force, const char *type);$/;"	p	signature:(const char *device, int force, const char *type)
check_mpb_migr_compatibility	libmdadm/super-intel.c	/^int check_mpb_migr_compatibility(struct intel_super *super)$/;"	f	signature:(struct intel_super *super)
check_name	libmdadm/super-intel.c	/^static int check_name(struct intel_super *super, char *name, int quiet)$/;"	f	file:	signature:(struct intel_super *super, char *name, int quiet)
check_one_sharer	libmdadm/Monitor.c	/^static int check_one_sharer(int scan)$/;"	f	file:	signature:(int scan)
check_one_sharer	libmdadm/Monitor.c	/^static int check_one_sharer(int scan);$/;"	p	file:	signature:(int scan)
check_partitions	libmdadm/mdadm.h	/^extern int check_partitions(int fd, char *dname,$/;"	p	signature:(int fd, char *dname, unsigned long long freesize, unsigned long long size)
check_partitions	libmdadm/util.c	/^int check_partitions(int fd, char *dname, unsigned long long freesize,$/;"	f	signature:(int fd, char *dname, unsigned long long freesize, unsigned long long size)
check_plausibility	libmke2fs/util.c	/^void check_plausibility(const char *device)$/;"	f	signature:(const char *device)
check_plausibility	libmke2fs/util.h	/^extern void check_plausibility(const char *device);$/;"	p	signature:(const char *device)
check_raid	libmdadm/mdadm.h	/^extern int check_raid(int fd, char *name);$/;"	p	signature:(int fd, char *name)
check_raid	libmdadm/util.c	/^int check_raid(int fd, char *name)$/;"	f	signature:(int fd, char *name)
check_reiser	libmdadm/mdadm.h	/^extern int check_reiser(int fd, char *name);$/;"	p	signature:(int fd, char *name)
check_reiser	libmdadm/util.c	/^int check_reiser(int fd, char *name)$/;"	f	signature:(int fd, char *name)
check_reshape	libmdadm/mdmon.h	/^	int check_reshape; \/* flag set by mon, read by manage *\/$/;"	m	struct:active_array	access:public
check_secondary	libmdadm/super-ddf.c	/^static int check_secondary(const struct vcl *vc)$/;"	f	file:	signature:(const struct vcl *vc)
check_sum	libmdadm/super-intel.c	/^	__u32 check_sum;		\/* 0x20 - 0x23 MPB Checksum *\/$/;"	m	struct:imsm_super	file:	access:public
check_update_queue	libmdadm/managemon.c	/^void check_update_queue(struct supertype *container)$/;"	f	signature:(struct supertype *container)
checkpoint_id	libmdadm/super-intel.c	/^	__u32 checkpoint_id;	\/* id to access curr_migr_unit *\/$/;"	m	struct:imsm_vol	file:	access:public
checksum	libmdadm/platform-intel.h	/^	__u8 checksum; \/* checksum of all the bytes in this table *\/$/;"	m	struct:imsm_orom	access:public
child_monitor	libmdadm/Grow.c	/^int child_monitor(int afd, struct mdinfo *sra, struct reshape *reshape,$/;"	f	signature:(int afd, struct mdinfo *sra, struct reshape *reshape, struct supertype *st, unsigned long blocks, int *fds, unsigned long long *offsets, int dests, int *destfd, unsigned long long *destoffsets)
child_monitor	libmdadm/mdadm.h	/^extern int child_monitor(int afd, struct mdinfo *sra, struct reshape *reshape,$/;"	p	signature:(int afd, struct mdinfo *sra, struct reshape *reshape, struct supertype *st, unsigned long stripes, int *fds, unsigned long long *offsets, int dests, int *destfd, unsigned long long *destoffsets)
choose_bm_space	libmdadm/super1.c	/^static unsigned long choose_bm_space(unsigned long devsize)$/;"	f	file:	signature:(unsigned long devsize)
choose_offset	libmdadm/Grow.c	/^static unsigned long long choose_offset(unsigned long long lo,$/;"	f	file:	signature:(unsigned long long lo, unsigned long long hi, unsigned long long min, unsigned long long max)
choose_spare	libmdadm/Monitor.c	/^static dev_t choose_spare(struct state *from, struct state *to,$/;"	f	file:	signature:(struct state *from, struct state *to, struct domainlist *domlist, unsigned long long min_size)
chunk	libmdadm/mdadm.h	/^	int	chunk;$/;"	m	struct:shape	access:public
chunk_shift	libmdadm/super-ddf.c	/^	__u8	chunk_shift;	\/* 0 == 512, 1==1024 etc *\/$/;"	m	struct:vd_config	file:	access:public
chunk_size	libmdadm/md_p.h	/^	__u32 chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:mdp_superblock_s	access:public
chunk_size	libmdadm/md_u.h	/^	int			chunk_size;	\/* in bytes *\/$/;"	m	struct:mdu_param_s	access:public
chunk_size	libmdadm/md_u.h	/^	int chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:mdu_array_info_s	access:public
chunk_to_shift	libmdadm/super-ddf.c	/^static int chunk_to_shift(int chunksize)$/;"	f	file:	signature:(int chunksize)
chunks	libmdadm/bitmap.h	/^	unsigned long chunks; \/* total number of data chunks for the array *\/$/;"	m	struct:bitmap	access:public
chunkshift	libmdadm/bitmap.h	/^	unsigned long chunkshift; \/* chunksize = 2^chunkshift (for bitops) *\/$/;"	m	struct:bitmap	access:public
chunksize	libmdadm/bitmap.h	/^	__u32 chunksize;    \/* 52  the bitmap chunk size in bytes *\/$/;"	m	struct:bitmap_super_s	access:public
chunksize	libmdadm/bitmap.h	/^	unsigned long chunksize;$/;"	m	struct:bitmap	access:public
chunksize	libmdadm/super-intel.c	/^	int chunksize;$/;"	m	struct:geo_params	file:	access:public
chunksize	libmdadm/super1.c	/^	__u32	chunksize;	\/* in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
ckpt_area_pba	libmdadm/super-intel.c	/^	__u32 ckpt_area_pba;	    \/* Pba of first block of ckpt copy area *\/$/;"	m	struct:migr_record	file:	access:public
ckpt_read_disk_num	libmdadm/super-intel.c	/^	__u32 ckpt_read_disk_num;   \/* Which member disk in destSubMap[0] the$/;"	m	struct:migr_record	file:	access:public
clean	libmdadm/mdmon.h	/^		   clean, active, write_pending, active_idle, bad_word};$/;"	e	enum:array_state
clean_migration_record_by_mdmon	libmdadm/super-intel.c	/^	int clean_migration_record_by_mdmon; \/* when reshape is switched to next$/;"	m	struct:intel_super	file:	access:public
clean_states	libmdadm/Monitor.c	/^static char *clean_states[] = {$/;"	v	file:
clear	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	e	enum:array_state
clear_hi	libmdadm/super-intel.c	/^static void clear_hi(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
close_aa	libmdadm/managemon.c	/^static void close_aa(struct active_array *aa)$/;"	f	file:	signature:(struct active_array *aa)
close_targets	libmdadm/super-intel.c	/^static void close_targets(int *targets, int new_disks)$/;"	f	file:	signature:(int *targets, int new_disks)
cluster_ratio_bits	libmke2fs/ext2fs.h	/^	int				cluster_ratio_bits;$/;"	m	struct:struct_ext2_filsys	access:public
cluster_size	libmke2fs/mke2fs.h	/^	int cluster_size;$/;"	m	struct:e2fs_cfg	access:public
cmp_extent	libmdadm/super-ddf.c	/^static int cmp_extent(const void *av, const void *bv)$/;"	f	file:	signature:(const void *av, const void *bv)
cmp_extent	libmdadm/super-intel.c	/^static int cmp_extent(const void *av, const void *bv)$/;"	f	file:	signature:(const void *av, const void *bv)
cmpstringp	libmdadm/Detail.c	/^static int cmpstringp(const void *p1, const void *p2)$/;"	f	file:	signature:(const void *p1, const void *p2)
cng_master_disk	libmdadm/super-intel.c	/^	__u8  cng_master_disk;$/;"	m	struct:imsm_dev	file:	access:public
cng_state	libmdadm/super-intel.c	/^	__u8  cng_state;$/;"	m	struct:imsm_dev	file:	access:public
cng_sub_state	libmdadm/super-intel.c	/^	__u8  cng_sub_state;$/;"	m	struct:imsm_dev	file:	access:public
cnt_corrected_read	libmdadm/super1.c	/^	__u32	cnt_corrected_read; \/* number of read errors that were corrected by re-writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
compare_paths	libmdadm/mdadm.h	/^extern int compare_paths (char* path1,char* path2);$/;"	p	signature:(char* path1,char* path2)
compare_paths	libmdadm/util.c	/^int compare_paths (char* path1, char* path2)$/;"	f	signature:(char* path1, char* path2)
compare_super	libmdadm/mdadm.h	/^	int (*compare_super)(struct supertype *st, struct supertype *tst);$/;"	m	struct:superswitch	access:public
compare_super0	libmdadm/super0.c	/^static int compare_super0(struct supertype *st, struct supertype *tst)$/;"	f	file:	signature:(struct supertype *st, struct supertype *tst)
compare_super1	libmdadm/super1.c	/^static int compare_super1(struct supertype *st, struct supertype *tst)$/;"	f	file:	signature:(struct supertype *st, struct supertype *tst)
compare_super_ddf	libmdadm/super-ddf.c	/^static int compare_super_ddf(struct supertype *st, struct supertype *tst)$/;"	f	file:	signature:(struct supertype *st, struct supertype *tst)
compare_super_imsm	libmdadm/super-intel.c	/^static int compare_super_imsm(struct supertype *st, struct supertype *tst)$/;"	f	file:	signature:(struct supertype *st, struct supertype *tst)
complete_pages	libmdadm/bitmap.h	/^	struct list_head complete_pages;$/;"	m	struct:bitmap	typeref:struct:bitmap::list_head	access:public
component_size	libmdadm/mdadm.h	/^	unsigned long long	component_size; \/* same as array.size, except in$/;"	m	struct:mdinfo	access:public
compstr	libmke2fs/profile.c	/^static int compstr(const void *m1, const void *m2)$/;"	f	file:	signature:(const void *m1, const void *m2)
compute_backup_blocks	libmdadm/Grow.c	/^unsigned long compute_backup_blocks(int nchunk, int ochunk,$/;"	f	signature:(int nchunk, int ochunk, unsigned int ndata, unsigned int odata)
compute_backup_blocks	libmdadm/mdadm.h	/^extern unsigned long compute_backup_blocks(int nchunk, int ochunk,$/;"	p	signature:(int nchunk, int ochunk, unsigned int ndata, unsigned int odata)
conf	libmdadm/super-ddf.c	/^		struct vd_config conf;$/;"	m	struct:ddf_super::vcl	typeref:struct:ddf_super::vcl::vd_config	file:	access:public
conf	libmdadm/super-ddf.c	/^	char			*conf;$/;"	m	struct:ddf_super	file:	access:public
conf_dev	libmdadm/config.c	/^struct conf_dev {$/;"	s	file:
conf_dev::name	libmdadm/config.c	/^	char *name;$/;"	m	struct:conf_dev	file:	access:public
conf_dev::next	libmdadm/config.c	/^	struct conf_dev *next;$/;"	m	struct:conf_dev	typeref:struct:conf_dev::conf_dev	file:	access:public
conf_file	libmdadm/config.c	/^void conf_file(FILE *f)$/;"	f	signature:(FILE *f)
conf_file_or_dir	libmdadm/config.c	/^void conf_file_or_dir(FILE *f)$/;"	f	signature:(FILE *f)
conf_get_create_info	libmdadm/config.c	/^struct createinfo *conf_get_create_info(void)$/;"	f	signature:(void)
conf_get_create_info	libmdadm/mdadm.h	/^extern struct createinfo *conf_get_create_info(void);$/;"	p	signature:(void)
conf_get_devs	libmdadm/config.c	/^struct mddev_dev *conf_get_devs()$/;"	f
conf_get_devs	libmdadm/mdadm.h	/^extern struct mddev_dev *conf_get_devs(void);$/;"	p	signature:(void)
conf_get_homehost	libmdadm/config.c	/^char *conf_get_homehost(int *require_homehostp)$/;"	f	signature:(int *require_homehostp)
conf_get_homehost	libmdadm/mdadm.h	/^extern char *conf_get_homehost(int *require_homehostp);$/;"	p	signature:(int *require_homehostp)
conf_get_ident	libmdadm/config.c	/^struct mddev_ident *conf_get_ident(char *dev)$/;"	f	signature:(char *dev)
conf_get_ident	libmdadm/mdadm.h	/^extern struct mddev_ident *conf_get_ident(char *dev);$/;"	p	signature:(char *dev)
conf_get_mailaddr	libmdadm/config.c	/^char *conf_get_mailaddr(void)$/;"	f	signature:(void)
conf_get_mailaddr	libmdadm/mdadm.h	/^extern char *conf_get_mailaddr(void);$/;"	p	signature:(void)
conf_get_mailfrom	libmdadm/config.c	/^char *conf_get_mailfrom(void)$/;"	f	signature:(void)
conf_get_mailfrom	libmdadm/mdadm.h	/^extern char *conf_get_mailfrom(void);$/;"	p	signature:(void)
conf_get_program	libmdadm/config.c	/^char *conf_get_program(void)$/;"	f	signature:(void)
conf_get_program	libmdadm/mdadm.h	/^extern char *conf_get_program(void);$/;"	p	signature:(void)
conf_line	libmdadm/lib.c	/^char *conf_line(FILE *file)$/;"	f	signature:(FILE *file)
conf_line	libmdadm/mdadm.h	/^extern char *conf_line(FILE *file);$/;"	p	signature:(FILE *file)
conf_match	libmdadm/config.c	/^struct mddev_ident *conf_match(struct supertype *st,$/;"	f	signature:(struct supertype *st, struct mdinfo *info, char *devname, int verbose, int *rvp)
conf_match	libmdadm/mdadm.h	/^extern struct mddev_ident *conf_match(struct supertype *st,$/;"	p	signature:(struct supertype *st, struct mdinfo *info, char *devname, int verbose, int *rvp)
conf_name_is_free	libmdadm/config.c	/^int conf_name_is_free(char *name)$/;"	f	signature:(char *name)
conf_name_is_free	libmdadm/mdadm.h	/^extern int conf_name_is_free(char *name);$/;"	p	signature:(char *name)
conf_no	libmke2fs/profile.c	/^static const char *const conf_no[] = {$/;"	v	file:
conf_rec_len	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
conf_test_dev	libmdadm/config.c	/^int conf_test_dev(char *devname)$/;"	f	signature:(char *devname)
conf_test_dev	libmdadm/mdadm.h	/^extern int conf_test_dev(char *devname);$/;"	p	signature:(char *devname)
conf_test_metadata	libmdadm/config.c	/^int conf_test_metadata(const char *version, struct dev_policy *pol, int is_homehost)$/;"	f	signature:(const char *version, struct dev_policy *pol, int is_homehost)
conf_test_metadata	libmdadm/mdadm.h	/^extern int conf_test_metadata(const char *version, struct dev_policy *pol, int is_homehost);$/;"	p	signature:(const char *version, struct dev_policy *pol, int is_homehost)
conf_verify_devnames	libmdadm/config.c	/^int conf_verify_devnames(struct mddev_ident *array_list)$/;"	f	signature:(struct mddev_ident *array_list)
conf_verify_devnames	libmdadm/mdadm.h	/^extern int conf_verify_devnames(struct mddev_ident *array_list);$/;"	p	signature:(struct mddev_ident *array_list)
conf_word	libmdadm/lib.c	/^char *conf_word(FILE *file, int allow_key)$/;"	f	signature:(FILE *file, int allow_key)
conf_word	libmdadm/mdadm.h	/^extern char *conf_word(FILE *file, int allow_key);$/;"	p	signature:(FILE *file, int allow_key)
conf_yes	libmke2fs/profile.c	/^static const char *const conf_yes[] = {$/;"	v	file:
conffile	libmdadm/config.c	/^static char *conffile = NULL;$/;"	v	file:
config_fn	libmke2fs/mke2fs.c	/^static const char *config_fn[] = {  "\/etc\/mke2fs.conf", 0 };$/;"	v	file:
config_record_len	libmdadm/super-ddf.c	/^	be16	config_record_len; \/* 1 +ROUNDUP(max_primary_element_entries$/;"	m	struct:ddf_header	file:	access:public
config_rules	libmdadm/policy.c	/^static struct pol_rule *config_rules = NULL;$/;"	v	typeref:struct:pol_rule	file:
config_rules_end	libmdadm/policy.c	/^static struct pol_rule **config_rules_end = NULL;$/;"	v	typeref:struct:pol_rule	file:
config_rules_has_path	libmdadm/policy.c	/^static int config_rules_has_path = 0;$/;"	v	file:
config_section_length	libmdadm/super-ddf.c	/^	be32	config_section_length;$/;"	m	struct:ddf_header	file:	access:public
config_section_offset	libmdadm/super-ddf.c	/^	be32	config_section_offset;$/;"	m	struct:ddf_header	file:	access:public
config_size	libmdadm/super-ddf.c	/^		be64	config_size;	\/* DDF structures must be after here *\/$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
conflist	libmdadm/super-ddf.c	/^	} *conflist, *currentconf;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::vcl	file:	access:public
connect_monitor	libmdadm/msg.c	/^int connect_monitor(char *devname)$/;"	f	signature:(char *devname)
connect_monitor	libmdadm/msg.h	/^extern int connect_monitor(char *devname);$/;"	p	signature:(char *devname)
cont_err	libmdadm/mdadm.h	1401;"	d
cont_err	libmdadm/mdadm.h	1404;"	d
container	libmdadm/mdadm.h	/^	char	*container;	\/* \/dev\/whatever name of container, or$/;"	m	struct:mddev_ident	access:public
container	libmdadm/mdmon.h	/^	struct supertype *container;$/;"	m	struct:active_array	typeref:struct:active_array::supertype	access:public
container	libmdadm/super-intel.c	/^	int   container;$/;"	m	struct:md_list	file:	access:public
container2devname	libmdadm/Incremental.c	/^static char *container2devname(char *devname)$/;"	f	file:	signature:(char *devname)
container_choose_spare	libmdadm/Monitor.c	/^static dev_t container_choose_spare(struct state *from, struct state *to,$/;"	f	file:	signature:(struct state *from, struct state *to, struct domainlist *domlist, unsigned long long min_size, int active)
container_choose_spares	libmdadm/mdadm.h	/^extern struct mdinfo *container_choose_spares(struct supertype *st,$/;"	p	signature:(struct supertype *st, unsigned long long min_size, struct domainlist *domlist, char *spare_group, const char *metadata, int get_one)
container_choose_spares	libmdadm/util.c	/^struct mdinfo *container_choose_spares(struct supertype *st,$/;"	f	signature:(struct supertype *st, unsigned long long min_size, struct domainlist *domlist, char *spare_group, const char *metadata, int get_one)
container_content	libmdadm/mdadm.h	/^	struct mdinfo *(*container_content)(struct supertype *st, char *subarray);$/;"	m	struct:superswitch	typeref:struct:superswitch::container_content	access:public
container_content0	libmdadm/super0.c	/^static struct mdinfo *container_content0(struct supertype *st, char *subarray)$/;"	f	file:	signature:(struct supertype *st, char *subarray)
container_content1	libmdadm/super1.c	/^static struct mdinfo *container_content1(struct supertype *st, char *subarray)$/;"	f	file:	signature:(struct supertype *st, char *subarray)
container_content_ddf	libmdadm/super-ddf.c	/^static struct mdinfo *container_content_ddf(struct supertype *st, char *subarray)$/;"	f	file:	signature:(struct supertype *st, char *subarray)
container_content_imsm	libmdadm/super-intel.c	/^static struct mdinfo *container_content_imsm(struct supertype *st, char *subarray)$/;"	f	file:	signature:(struct supertype *st, char *subarray)
container_devnm	libmdadm/mdadm.h	/^	char container_devnm[32];    \/* devnm of container *\/$/;"	m	struct:supertype	access:public
container_enough	libmdadm/mdadm.h	/^	int container_enough; \/* flag external handlers can set to$/;"	m	struct:mdinfo	access:public
container_member	libmdadm/mdadm.h	/^	int container_member; \/* for assembling external-metatdata arrays$/;"	m	struct:mdinfo	access:public
container_members_max_degradation	libmdadm/Incremental.c	/^static int container_members_max_degradation(struct map_ent *map, struct map_ent *me)$/;"	f	file:	signature:(struct map_ent *map, struct map_ent *me)
context	libmdadm/mdadm.h	/^struct context {$/;"	s
context::SparcAdjust	libmdadm/mdadm.h	/^	int	SparcAdjust;$/;"	m	struct:context	access:public
context::_export	libmdadm/mdadm.h	/^	int	_export;$/;"	m	struct:context	access:public
context::action	libmdadm/mdadm.h	/^	char	*action;$/;"	m	struct:context	access:public
context::autof	libmdadm/mdadm.h	/^	int	autof;$/;"	m	struct:context	access:public
context::backup_file	libmdadm/mdadm.h	/^	char	*backup_file;$/;"	m	struct:context	access:public
context::brief	libmdadm/mdadm.h	/^	int	brief;$/;"	m	struct:context	access:public
context::delay	libmdadm/mdadm.h	/^	int	delay;$/;"	m	struct:context	access:public
context::force	libmdadm/mdadm.h	/^	int	force;$/;"	m	struct:context	access:public
context::freeze_reshape	libmdadm/mdadm.h	/^	int	freeze_reshape;$/;"	m	struct:context	access:public
context::homehost	libmdadm/mdadm.h	/^	char	*homehost;$/;"	m	struct:context	access:public
context::invalid_backup	libmdadm/mdadm.h	/^	int	invalid_backup;$/;"	m	struct:context	access:public
context::prefer	libmdadm/mdadm.h	/^	char	*prefer;$/;"	m	struct:context	access:public
context::readonly	libmdadm/mdadm.h	/^	int	readonly;$/;"	m	struct:context	access:public
context::require_homehost	libmdadm/mdadm.h	/^	int	require_homehost;$/;"	m	struct:context	access:public
context::runstop	libmdadm/mdadm.h	/^	int	runstop;$/;"	m	struct:context	access:public
context::scan	libmdadm/mdadm.h	/^	int	scan;$/;"	m	struct:context	access:public
context::subarray	libmdadm/mdadm.h	/^	char	*subarray;$/;"	m	struct:context	access:public
context::test	libmdadm/mdadm.h	/^	int	test;$/;"	m	struct:context	access:public
context::update	libmdadm/mdadm.h	/^	char	*update;$/;"	m	struct:context	access:public
context::verbose	libmdadm/mdadm.h	/^	int	verbose;$/;"	m	struct:context	access:public
continue_via_systemd	libmdadm/Grow.c	/^static int continue_via_systemd(char *devnm)$/;"	f	file:	signature:(char *devnm)
controller	libmdadm/super-ddf.c	/^	struct ddf_controller_data controller;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_controller_data	file:	access:public
controller_section_length	libmdadm/super-ddf.c	/^	be32	controller_section_length;$/;"	m	struct:ddf_header	file:	access:public
controller_section_offset	libmdadm/super-ddf.c	/^	be32	controller_section_offset;$/;"	m	struct:ddf_header	file:	access:public
controller_type	libmdadm/super-ddf.c	/^	struct controller_type {$/;"	s	struct:ddf_controller_data	file:	access:public
copy_matching_bvd	libmdadm/super-ddf.c	/^static void copy_matching_bvd(struct ddf_super *ddf,$/;"	f	file:	signature:(struct ddf_super *ddf, struct vd_config *conf, const struct metadata_update *update)
copy_metadata	libmdadm/mdadm.h	/^	int (*copy_metadata)(struct supertype *st, int from, int to);$/;"	m	struct:superswitch	access:public
copy_metadata0	libmdadm/super0.c	/^static int copy_metadata0(struct supertype *st, int from, int to)$/;"	f	file:	signature:(struct supertype *st, int from, int to)
copy_metadata1	libmdadm/super1.c	/^static int copy_metadata1(struct supertype *st, int from, int to)$/;"	f	file:	signature:(struct supertype *st, int from, int to)
copy_metadata_ddf	libmdadm/super-ddf.c	/^static int copy_metadata_ddf(struct supertype *st, int from, int to)$/;"	f	file:	signature:(struct supertype *st, int from, int to)
copy_metadata_imsm	libmdadm/super-intel.c	/^static int copy_metadata_imsm(struct supertype *st, int from, int to)$/;"	f	file:	signature:(struct supertype *st, int from, int to)
copy_uuid	libmdadm/mdadm.h	/^extern void copy_uuid(void *a, int b[4], int swapuuid);$/;"	p	signature:(void *a, int b[4], int swapuuid)
copy_uuid	libmdadm/util.c	/^void copy_uuid(void *a, int b[4], int swapuuid)$/;"	f	signature:(void *a, int b[4], int swapuuid)
count	libmdadm/bitmap.h	/^	int count;$/;"	m	struct:bitmap_page	access:public
count	libmke2fs/ext2fsP.h	/^	unsigned long long	count;$/;"	m	struct:ext2_struct_dblist	access:public
count_active	libmdadm/Incremental.c	/^static int count_active(struct supertype *st, struct mdinfo *sra,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *sra, int mdfd, char **availp, struct mdinfo *bestinfo)
count_active	libmdadm/Incremental.c	/^static int count_active(struct supertype *st, struct mdinfo *sra,$/;"	p	file:	signature:(struct supertype *st, struct mdinfo *sra, int mdfd, char **availp, struct mdinfo *info)
count_dirty_bits	libmdadm/bitmap.c	/^int count_dirty_bits(char *buf, int num_bits)$/;"	f	signature:(char *buf, int num_bits)
count_dirty_bits_byte	libmdadm/bitmap.c	/^inline int count_dirty_bits_byte(char byte, int num_bits)$/;"	f	signature:(char byte, int num_bits)
count_memberships	libmdadm/super-intel.c	/^static int count_memberships(struct dl *dl, struct intel_super *super)$/;"	f	file:	signature:(struct dl *dl, struct intel_super *super)
count_volumes	libmdadm/super-intel.c	/^count_volumes(char *hba, int dpa, int verbose)$/;"	f	file:	signature:(char *hba, int dpa, int verbose)
count_volumes_list	libmdadm/super-intel.c	/^count_volumes_list(struct md_list *devlist, char *homehost,$/;"	f	file:	signature:(struct md_list *devlist, char *homehost, int verbose, int *found)
counter_bits	libmdadm/bitmap.h	/^	int counter_bits; \/* how many bits per block counter *\/$/;"	m	struct:bitmap	access:public
cp_events_hi	libmdadm/md_p.h	/^	__u32 cp_events_hi;	\/*  9 high-order of checkpoint update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
cp_events_hi	libmdadm/md_p.h	/^	__u32 cp_events_hi;	\/* 10 high-order of checkpoint update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
cp_events_lo	libmdadm/md_p.h	/^	__u32 cp_events_lo;	\/*  9 low-order of checkpoint update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
cp_events_lo	libmdadm/md_p.h	/^	__u32 cp_events_lo;	\/* 10 low-order of checkpoint update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
cpu_to_be16	libmdadm/super-ddf.c	/^static inline be16 cpu_to_be16(__u16 x)$/;"	f	file:	signature:(__u16 x)
cpu_to_be32	libmdadm/super-ddf.c	/^static inline be32 cpu_to_be32(__u32 x)$/;"	f	file:	signature:(__u32 x)
cpu_to_be64	libmdadm/super-ddf.c	/^static inline be64 cpu_to_be64(__u64 x)$/;"	f	file:	signature:(__u64 x)
crc	libmdadm/part.h	/^	__u32 crc;$/;"	m	struct:GPT	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:bad_block_log	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:ddf_controller_data	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:ddf_header	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:disk_data	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:phys_disk	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:spare_assign	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:vd_config	file:	access:public
crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:virtual_disk	file:	access:public
crc32	libmdadm/crc32.c	/^unsigned long ZEXPORT crc32($/;"	f	signature:( unsigned long crc, const unsigned char FAR *buf, unsigned len)
crc32	libmdadm/super-ddf.c	/^unsigned long crc32($/;"	p	file:	signature:( unsigned long crc, const unsigned char *buf, unsigned len)
crc32_big	libmdadm/crc32.c	/^   local unsigned long crc32_big OF((unsigned long,$/;"	p	file:	signature:(unsigned long, const unsigned char FAR *, unsigned)
crc32_big	libmdadm/crc32.c	/^local unsigned long crc32_big(crc, buf, len)$/;"	f
crc32_little	libmdadm/crc32.c	/^   local unsigned long crc32_little OF((unsigned long,$/;"	p	file:	signature:(unsigned long, const unsigned char FAR *, unsigned)
crc32_little	libmdadm/crc32.c	/^local unsigned long crc32_little(crc, buf, len)$/;"	f
crc_table	libmdadm/crc32.c	/^local unsigned long FAR crc_table[TBLS][256];$/;"	v
crc_table	libmdadm/crc32.h	/^local const unsigned long FAR crc_table[TBLS][256] =$/;"	v
crc_table_empty	libmdadm/crc32.c	/^local volatile int crc_table_empty = 1;$/;"	v
create_array	libmdadm/super-intel.c	/^static int create_array(struct supertype *st, int dev_idx)$/;"	f	file:	signature:(struct supertype *st, int dev_idx)
create_bad_block_inode	libmke2fs/mke2fs.c	/^static int create_bad_block_inode(ext2_filsys fs, badblocks_list bb_list)$/;"	f	file:	signature:(ext2_filsys fs, badblocks_list bb_list)
create_journal_dev	libmke2fs/mke2fs.c	/^static int create_journal_dev(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
create_lost_and_found	libmke2fs/mke2fs.c	/^static void create_lost_and_found(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
create_mddev	libmdadm/mdadm.h	/^extern int create_mddev(char *dev, char *name, int autof, int trustworthy,$/;"	p	signature:(char *dev, char *name, int autof, int trustworthy, char *chosen)
create_mddev	libmdadm/mdopen.c	/^int create_mddev(char *dev, char *name, int autof, int trustworthy,$/;"	f	signature:(char *dev, char *name, int autof, int trustworthy, char *chosen)
create_offset	libmdadm/super-intel.c	/^	unsigned long long create_offset; \/* common start for 'current_vol' *\/$/;"	m	struct:intel_super	file:	access:public
create_root_dir	libmke2fs/mke2fs.c	/^static int create_root_dir(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
createinfo	libmdadm/config.c	/^struct createinfo createinfo = {$/;"	v	typeref:struct:createinfo
createinfo	libmdadm/mdadm.h	/^struct createinfo {$/;"	s
createinfo::autof	libmdadm/mdadm.h	/^	int	autof;$/;"	m	struct:createinfo	access:public
createinfo::bblist	libmdadm/mdadm.h	/^	int	bblist;$/;"	m	struct:createinfo	access:public
createinfo::gid	libmdadm/mdadm.h	/^	int	gid;$/;"	m	struct:createinfo	access:public
createinfo::mode	libmdadm/mdadm.h	/^	int	mode;$/;"	m	struct:createinfo	access:public
createinfo::names	libmdadm/mdadm.h	/^	int	names;$/;"	m	struct:createinfo	access:public
createinfo::supertype	libmdadm/mdadm.h	/^	struct supertype *supertype;$/;"	m	struct:createinfo	typeref:struct:createinfo::supertype	access:public
createinfo::symlinks	libmdadm/mdadm.h	/^	int	symlinks;$/;"	m	struct:createinfo	access:public
createinfo::uid	libmdadm/mdadm.h	/^	int	uid;$/;"	m	struct:createinfo	access:public
createline	libmdadm/config.c	/^static void createline(char *line)$/;"	f	file:	signature:(char *line)
creator_os	libmke2fs/mke2fs.c	/^static char *creator_os;$/;"	v	file:
creator_os	libmke2fs/mke2fs.h	/^	__u32 creator_os;$/;"	m	struct:e2fs_cfg	access:public
ctime	libmdadm/md_p.h	/^	__u32 ctime;		\/*  6 Creation time			      *\/$/;"	m	struct:mdp_superblock_s	access:public
ctime	libmdadm/md_u.h	/^	int ctime;$/;"	m	struct:mdu_array_info_s	access:public
ctime	libmdadm/super1.c	/^	__u64	ctime;		\/* lo 40 bits are seconds, top 24 are microseconds or 0*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
cur	libmke2fs/profile.c	/^	size_t cur, max;$/;"	m	struct:prof_buf	file:	access:public
curr_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
curr_entry	libmke2fs/ext2fs.h	/^	int		curr_entry;$/;"	m	struct:ext2_extent_info	access:public
curr_level	libmke2fs/ext2fs.h	/^	int		curr_level;$/;"	m	struct:ext2_extent_info	access:public
curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;	    \/* 0..numMigrUnits-1 *\/$/;"	m	struct:migr_record	file:	access:public
curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;$/;"	m	struct:imsm_update_general_migration_checkpoint	file:	access:public
curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;$/;"	m	struct:imsm_vol	file:	access:public
curr_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
curr_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
current_disk	libmdadm/super-intel.c	/^	} *disks, *current_disk;$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
current_lba	libmdadm/part.h	/^	__u64 current_lba;$/;"	m	struct:GPT	access:public
current_section	libmke2fs/profile.c	/^	struct profile_node *current_section;$/;"	m	struct:parse_state	typeref:struct:parse_state::profile_node	file:	access:public
current_vol	libmdadm/super-intel.c	/^	int current_vol; \/* index of raid device undergoing creation *\/$/;"	m	struct:intel_super	file:	access:public
currentconf	libmdadm/super-ddf.c	/^	} *conflist, *currentconf;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::vcl	file:	access:public
currentdev	libmdadm/super-ddf.c	/^	int			currentdev;$/;"	m	struct:ddf_super	file:	access:public
custom_array_size	libmdadm/mdadm.h	/^	unsigned long long	custom_array_size; \/* size for non-default sized$/;"	m	struct:mdinfo	access:public
daemon	libmdadm/bitmap.h	/^	mdk_thread_t *daemon;$/;"	m	struct:bitmap	access:public
daemon_sleep	libmdadm/bitmap.h	/^	__u32 daemon_sleep; \/* 56  seconds between disk flushes *\/$/;"	m	struct:bitmap_super_s	access:public
daemon_sleep	libmdadm/bitmap.h	/^	unsigned long daemon_sleep; \/* how many seconds between updates? *\/$/;"	m	struct:bitmap	access:public
data	libmdadm/probe_roms.c	/^	unsigned long data;$/;"	m	struct:resource	file:	access:public
data	libmdadm/util.c	/^	void *data;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
data_disks	libmdadm/mdadm.h	/^		int data_disks;$/;"	m	struct:reshape::__anon16	access:public
data_offset	libmdadm/mdadm.h	/^	long long data_offset;$/;"	m	struct:mddev_dev	access:public
data_offset	libmdadm/mdadm.h	/^	unsigned long long	data_offset;$/;"	m	struct:mdinfo	access:public
data_offset	libmdadm/mdadm.h	/^	unsigned long long data_offset; \/* used by v1.x only *\/$/;"	m	struct:supertype	access:public
data_offset	libmdadm/super1.c	/^	__u64	data_offset;	\/* sector start of data, often 0 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
data_offset	libmdadm/super1.c	/^	long long data_offset;$/;"	m	struct:devinfo	file:	access:public
data_section_length	libmdadm/super-ddf.c	/^	be32	data_section_length;$/;"	m	struct:ddf_header	file:	access:public
data_section_offset	libmdadm/super-ddf.c	/^	be32	data_section_offset;$/;"	m	struct:ddf_header	file:	access:public
data_size	libmdadm/super1.c	/^	__u64	data_size;	\/* sectors in this device that can be used for data *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
datalen	libmdadm/util.c	/^	int datalen;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
dblist	libmke2fs/ext2fs.h	/^	ext2_dblist			dblist;$/;"	m	struct:struct_ext2_filsys	access:public
ddf	libmdadm/super-intel.c	/^	__u8  ddf;$/;"	m	struct:imsm_map	file:	access:public
ddf_access	libmdadm/super-ddf.c	/^static mapping_t ddf_access[] = {$/;"	v	file:
ddf_activate_spare	libmdadm/super-ddf.c	/^static struct mdinfo *ddf_activate_spare(struct active_array *a,$/;"	f	file:	signature:(struct active_array *a, struct metadata_update **updates)
ddf_controller_data	libmdadm/super-ddf.c	/^struct ddf_controller_data {$/;"	s	file:
ddf_controller_data::controller_type	libmdadm/super-ddf.c	/^	struct controller_type {$/;"	s	struct:ddf_controller_data	file:	access:public
ddf_controller_data::controller_type::device_id	libmdadm/super-ddf.c	/^		be16 device_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
ddf_controller_data::controller_type::sub_device_id	libmdadm/super-ddf.c	/^		be16 sub_device_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
ddf_controller_data::controller_type::sub_vendor_id	libmdadm/super-ddf.c	/^		be16 sub_vendor_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
ddf_controller_data::controller_type::vendor_id	libmdadm/super-ddf.c	/^		be16 vendor_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
ddf_controller_data::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_controller_data::guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_controller_data::magic	libmdadm/super-ddf.c	/^	be32	magic;			\/* DDF_CONTROLLER_MAGIC *\/$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_controller_data::pad	libmdadm/super-ddf.c	/^	__u8	pad[8];	\/* 0xff *\/$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_controller_data::product_id	libmdadm/super-ddf.c	/^	char	product_id[16];$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_controller_data::type	libmdadm/super-ddf.c	/^	} type;$/;"	m	struct:ddf_controller_data	typeref:struct:ddf_controller_data::controller_type	file:	access:public
ddf_controller_data::vendor_data	libmdadm/super-ddf.c	/^	__u8	vendor_data[448];$/;"	m	struct:ddf_controller_data	file:	access:public
ddf_header	libmdadm/super-ddf.c	/^struct ddf_header {$/;"	s	file:
ddf_header::bbm_section_length	libmdadm/super-ddf.c	/^	be32	bbm_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::bbm_section_offset	libmdadm/super-ddf.c	/^	be32	bbm_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::config_record_len	libmdadm/super-ddf.c	/^	be16	config_record_len; \/* 1 +ROUNDUP(max_primary_element_entries$/;"	m	struct:ddf_header	file:	access:public
ddf_header::config_section_length	libmdadm/super-ddf.c	/^	be32	config_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::config_section_offset	libmdadm/super-ddf.c	/^	be32	config_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::controller_section_length	libmdadm/super-ddf.c	/^	be32	controller_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::controller_section_offset	libmdadm/super-ddf.c	/^	be32	controller_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::data_section_length	libmdadm/super-ddf.c	/^	be32	data_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::data_section_offset	libmdadm/super-ddf.c	/^	be32	data_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::diag_space_length	libmdadm/super-ddf.c	/^	be32	diag_space_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::diag_space_offset	libmdadm/super-ddf.c	/^	be32	diag_space_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::enforcegroups	libmdadm/super-ddf.c	/^	__u8	enforcegroups;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::foreignflag	libmdadm/super-ddf.c	/^	__u8	foreignflag;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:ddf_header	file:	access:public
ddf_header::header_ext	libmdadm/super-ddf.c	/^	__u8	header_ext[32];	\/* reserved: fill with 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_HEADER_MAGIC *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::max_partitions	libmdadm/super-ddf.c	/^	be16	max_partitions; \/* i.e. max num of configuration$/;"	m	struct:ddf_header	file:	access:public
ddf_header::max_pd_entries	libmdadm/super-ddf.c	/^	be16	max_pd_entries;	\/* one of 15, 63, 255, 1023, 4095 *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::max_primary_element_entries	libmdadm/super-ddf.c	/^	be16	max_primary_element_entries; \/* 16, 64, 256, 1024, or 4096 *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::max_vd_entries	libmdadm/super-ddf.c	/^	be16	max_vd_entries; \/* 2^(4,6,8,10,12)-1 : i.e. as above *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::openflag	libmdadm/super-ddf.c	/^	__u8	openflag;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::pad0	libmdadm/super-ddf.c	/^	__u8	pad0;		\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::pad1	libmdadm/super-ddf.c	/^	__u8	pad1[12];	\/* 12 * 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::pad2	libmdadm/super-ddf.c	/^	__u8	pad2[3];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::pad3	libmdadm/super-ddf.c	/^	__u8	pad3[54];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::pad4	libmdadm/super-ddf.c	/^	__u8	pad4[256];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::phys_section_length	libmdadm/super-ddf.c	/^	be32	phys_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::phys_section_offset	libmdadm/super-ddf.c	/^	be32	phys_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::primary_lba	libmdadm/super-ddf.c	/^	be64	primary_lba;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::revision	libmdadm/super-ddf.c	/^	char	revision[8];	\/* 01.02.00 *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::secondary_lba	libmdadm/super-ddf.c	/^	be64	secondary_lba;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::seq	libmdadm/super-ddf.c	/^	be32	seq;		\/* starts at '1' *\/$/;"	m	struct:ddf_header	file:	access:public
ddf_header::timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::type	libmdadm/super-ddf.c	/^	__u8	type;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::vendor_length	libmdadm/super-ddf.c	/^	be32	vendor_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::vendor_offset	libmdadm/super-ddf.c	/^	be32	vendor_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::virt_section_length	libmdadm/super-ddf.c	/^	be32	virt_section_length;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::virt_section_offset	libmdadm/super-ddf.c	/^	be32	virt_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::workspace_lba	libmdadm/super-ddf.c	/^	be64	workspace_lba;$/;"	m	struct:ddf_header	file:	access:public
ddf_header::workspace_len	libmdadm/super-ddf.c	/^	be32	workspace_len;	\/* sectors for vendor space -$/;"	m	struct:ddf_header	file:	access:public
ddf_init_state	libmdadm/super-ddf.c	/^static mapping_t ddf_init_state[] = {$/;"	v	file:
ddf_level	libmdadm/super-ddf.c	/^static mapping_t ddf_level[] = {$/;"	v	file:
ddf_level_to_layout	libmdadm/super-ddf.c	/^static int ddf_level_to_layout(int level)$/;"	f	file:	signature:(int level)
ddf_open_new	libmdadm/super-ddf.c	/^static int ddf_open_new(struct supertype *c, struct active_array *a, char *inst)$/;"	f	file:	signature:(struct supertype *c, struct active_array *a, char *inst)
ddf_prepare_update	libmdadm/super-ddf.c	/^static int ddf_prepare_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
ddf_process_conf_update	libmdadm/super-ddf.c	/^static void ddf_process_conf_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
ddf_process_phys_update	libmdadm/super-ddf.c	/^static void ddf_process_phys_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
ddf_process_update	libmdadm/super-ddf.c	/^static void ddf_process_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
ddf_process_virt_update	libmdadm/super-ddf.c	/^static void ddf_process_virt_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
ddf_remove_failed	libmdadm/super-ddf.c	/^static void ddf_remove_failed(struct ddf_super *ddf)$/;"	f	file:	signature:(struct ddf_super *ddf)
ddf_sec_level	libmdadm/super-ddf.c	/^static mapping_t ddf_sec_level[] = {$/;"	v	file:
ddf_set_array_state	libmdadm/super-ddf.c	/^static int ddf_set_array_state(struct active_array *a, int consistent)$/;"	f	file:	signature:(struct active_array *a, int consistent)
ddf_set_disk	libmdadm/super-ddf.c	/^static void ddf_set_disk(struct active_array *a, int n, int state)$/;"	f	file:	signature:(struct active_array *a, int n, int state)
ddf_set_updates_pending	libmdadm/super-ddf.c	572;"	d	file:
ddf_state	libmdadm/super-ddf.c	/^static mapping_t ddf_state[] = {$/;"	v	file:
ddf_super	libmdadm/super-ddf.c	/^struct ddf_super {$/;"	s	file:
ddf_super::active	libmdadm/super-ddf.c	/^	struct ddf_header	*active;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_header	file:	access:public
ddf_super::add_list	libmdadm/super-ddf.c	/^	} *dlist, *add_list;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::dl	file:	access:public
ddf_super::anchor	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_header	file:	access:public
ddf_super::conf	libmdadm/super-ddf.c	/^	char			*conf;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::conf_rec_len	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::conflist	libmdadm/super-ddf.c	/^	} *conflist, *currentconf;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::vcl	file:	access:public
ddf_super::controller	libmdadm/super-ddf.c	/^	struct ddf_controller_data controller;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::ddf_controller_data	file:	access:public
ddf_super::currentconf	libmdadm/super-ddf.c	/^	} *conflist, *currentconf;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::vcl	file:	access:public
ddf_super::currentdev	libmdadm/super-ddf.c	/^	int			currentdev;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::dl	libmdadm/super-ddf.c	/^	struct dl {$/;"	s	struct:ddf_super	file:	access:public
ddf_super::dl::__anon8::__anon9::devname	libmdadm/super-ddf.c	/^				char *devname;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::displayed	libmdadm/super-ddf.c	/^				int displayed;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::esize	libmdadm/super-ddf.c	/^				__u64 esize;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::fd	libmdadm/super-ddf.c	/^				int fd;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::major	libmdadm/super-ddf.c	/^				int major, minor;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::mdupdate	libmdadm/super-ddf.c	/^				void *mdupdate; \/* hold metadata update *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::minor	libmdadm/super-ddf.c	/^				int major, minor;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::next	libmdadm/super-ddf.c	/^				struct dl	*next;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	typeref:struct:ddf_super::dl::__anon8::__anon9::dl	file:	access:public
ddf_super::dl::__anon8::__anon9::pdnum	libmdadm/super-ddf.c	/^				int pdnum;	\/* index in ->phys *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::primary_lba	libmdadm/super-ddf.c	/^				be64 primary_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::raiddisk	libmdadm/super-ddf.c	/^				int raiddisk; \/* slot to fill in autolayout *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::secondary_lba	libmdadm/super-ddf.c	/^				be64 secondary_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::size	libmdadm/super-ddf.c	/^				unsigned long long size; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::__anon9::spare	libmdadm/super-ddf.c	/^				struct spare_assign *spare;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	typeref:struct:ddf_super::dl::__anon8::__anon9::spare_assign	file:	access:public
ddf_super::dl::__anon8::__anon9::workspace_lba	libmdadm/super-ddf.c	/^				be64 workspace_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
ddf_super::dl::__anon8::space	libmdadm/super-ddf.c	/^			char space[512];$/;"	m	union:ddf_super::dl::__anon8	file:	access:public
ddf_super::dl::disk	libmdadm/super-ddf.c	/^		struct disk_data disk;$/;"	m	struct:ddf_super::dl	typeref:struct:ddf_super::dl::disk_data	file:	access:public
ddf_super::dl::vlist	libmdadm/super-ddf.c	/^		struct vcl *vlist[0]; \/* max_part in size *\/$/;"	m	struct:ddf_super::dl	typeref:struct:ddf_super::dl::vcl	file:	access:public
ddf_super::dlist	libmdadm/super-ddf.c	/^	} *dlist, *add_list;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::dl	file:	access:public
ddf_super::max_part	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::mppe	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::pdsize	libmdadm/super-ddf.c	/^	int			pdsize, vdsize;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::phys	libmdadm/super-ddf.c	/^	struct phys_disk	*phys;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::phys_disk	file:	access:public
ddf_super::primary	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::	file:	access:public
ddf_super::secondary	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::	file:	access:public
ddf_super::updates_pending	libmdadm/super-ddf.c	/^	int			updates_pending;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::vcl	libmdadm/super-ddf.c	/^	struct vcl {$/;"	s	struct:ddf_super	file:	access:public
ddf_super::vcl::__anon6::__anon7::block_sizes	libmdadm/super-ddf.c	/^				__u64		*block_sizes; \/* NULL if all the same *\/$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	file:	access:public
ddf_super::vcl::__anon6::__anon7::next	libmdadm/super-ddf.c	/^				struct vcl	*next;$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	typeref:struct:ddf_super::vcl::__anon6::__anon7::vcl	file:	access:public
ddf_super::vcl::__anon6::__anon7::other_bvds	libmdadm/super-ddf.c	/^				struct vd_config **other_bvds;$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	typeref:struct:ddf_super::vcl::__anon6::__anon7::vd_config	file:	access:public
ddf_super::vcl::__anon6::__anon7::vcnum	libmdadm/super-ddf.c	/^				unsigned int	vcnum; \/* index into ->virt *\/$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	file:	access:public
ddf_super::vcl::__anon6::space	libmdadm/super-ddf.c	/^			char space[512];$/;"	m	union:ddf_super::vcl::__anon6	file:	access:public
ddf_super::vcl::conf	libmdadm/super-ddf.c	/^		struct vd_config conf;$/;"	m	struct:ddf_super::vcl	typeref:struct:ddf_super::vcl::vd_config	file:	access:public
ddf_super::vdsize	libmdadm/super-ddf.c	/^	int			pdsize, vdsize;$/;"	m	struct:ddf_super	file:	access:public
ddf_super::virt	libmdadm/super-ddf.c	/^	struct virtual_disk	*virt;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::virtual_disk	file:	access:public
ddf_sync_metadata	libmdadm/super-ddf.c	/^static void ddf_sync_metadata(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
ddf_update_vlist	libmdadm/super-ddf.c	/^static void ddf_update_vlist(struct ddf_super *ddf, struct dl *dl)$/;"	f	file:	signature:(struct ddf_super *ddf, struct dl *dl)
default_bitmap_type	libmke2fs/ext2fs.h	/^	__u16				default_bitmap_type;$/;"	m	struct:struct_ext2_filsys	access:public
default_filename	libmke2fs/profile.c	/^static const char *default_filename = "<default>";$/;"	v	file:
default_files	libmke2fs/mke2fs.c	/^static const char *default_files[] = { "<default>", 0 };$/;"	v	file:
default_geometry	libmdadm/mdadm.h	/^	void (*default_geometry)(struct supertype *st, int *level, int *layout, int *chunk); \/* optional *\/$/;"	m	struct:superswitch	access:public
default_geometry_ddf	libmdadm/super-ddf.c	/^static void default_geometry_ddf(struct supertype *st, int *level, int *layout, int *chunk)$/;"	f	file:	signature:(struct supertype *st, int *level, int *layout, int *chunk)
default_geometry_imsm	libmdadm/super-intel.c	/^static void default_geometry_imsm(struct supertype *st, int *level, int *layout, int *chunk)$/;"	f	file:	signature:(struct supertype *st, int *level, int *layout, int *chunk)
default_layout	libmdadm/Create.c	/^static int default_layout(struct supertype *st, int level, int verbose)$/;"	f	file:	signature:(struct supertype *st, int level, int verbose)
default_str	libmke2fs/profile.c	/^const char *default_str = "[foo]\\n\\tbar=quux\\n\\tsub = {\\n\\t\\twin = true\\n}\\n";$/;"	v
defective_block_start	libmdadm/super-intel.c	/^	__u64 defective_block_start;$/;"	m	struct:bbm_log_entry	file:	access:public
defective_start	libmdadm/super-ddf.c	/^		be64	defective_start;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
del_from_conflist	libmdadm/super-ddf.c	/^static int del_from_conflist(struct vcl **list, const char *guid)$/;"	f	file:	signature:(struct vcl **list, const char *guid)
delay	libmdadm/mdadm.h	/^	int	delay;$/;"	m	struct:context	access:public
deleted	libmke2fs/profile.c	/^	unsigned int deleted:1;$/;"	m	struct:profile_node	file:	access:public
delta_disks	libmdadm/md_p.h	/^	__u32 delta_disks;	\/* 15 change in number of raid_disks	      *\/$/;"	m	struct:mdp_superblock_s	access:public
delta_disks	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
delta_disks	libmdadm/super1.c	/^	__u32	delta_disks;	\/* change in number of raid_disks		*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
desc_blocks	libmke2fs/ext2fs.h	/^	unsigned long			desc_blocks;$/;"	m	struct:struct_ext2_filsys	access:public
desc_size	libmke2fs/mke2fs.h	/^	__u16 desc_size;$/;"	m	struct:extended_opt	access:public
dest_1st_member_lba	libmdadm/super-intel.c	/^	__u32 dest_1st_member_lba;  \/* First member lba on first$/;"	m	struct:migr_record	file:	access:public
dest_depth_per_unit	libmdadm/super-intel.c	/^	__u32 dest_depth_per_unit;  \/* Num member blocks each destMap$/;"	m	struct:migr_record	file:	access:public
detail_platform	libmdadm/mdadm.h	/^	int (*detail_platform)(int verbose, int enumerate_only, char *controller_path);$/;"	m	struct:superswitch	access:public
detail_platform_imsm	libmdadm/super-intel.c	/^static int detail_platform_imsm(int verbose, int enumerate_only, char *controller_path)$/;"	f	file:	signature:(int verbose, int enumerate_only, char *controller_path)
detail_super	libmdadm/mdadm.h	/^	void (*detail_super)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
detail_super0	libmdadm/super0.c	/^static void detail_super0(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
detail_super1	libmdadm/super1.c	/^static void detail_super1(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
detail_super_ddf	libmdadm/super-ddf.c	/^static void detail_super_ddf(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
detail_super_imsm	libmdadm/super-intel.c	/^static void detail_super_imsm(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
dev	libmdadm/mdadm.h	/^	char		*dev;$/;"	m	struct:mdstat_ent	access:public
dev	libmdadm/super-intel.c	/^	struct imsm_dev *dev;$/;"	m	struct:intel_dev	typeref:struct:intel_dev::imsm_dev	file:	access:public
dev	libmdadm/super-intel.c	/^	struct imsm_dev dev;$/;"	m	struct:imsm_update_create_array	typeref:struct:imsm_update_create_array::imsm_dev	file:	access:public
dev_id	libmdadm/platform-intel.h	/^	__u16  dev_id;$/;"	m	struct:sys_dev	access:public
dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_create_array	file:	access:public
dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_kill_array	file:	access:public
dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_rename_array	file:	access:public
dev_member	libmdadm/mdadm.h	/^	struct dev_member {$/;"	s	struct:mdstat_ent	access:public
dev_name	libmdadm/super-intel.c	/^	char *dev_name;$/;"	m	struct:geo_params	file:	access:public
dev_number	libmdadm/super1.c	/^	__u32	dev_number;	\/* permanent identifier of this  device - not role in raid *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
dev_open	libmdadm/mdadm.h	/^extern int dev_open(char *dev, int flags);$/;"	p	signature:(char *dev, int flags)
dev_open	libmdadm/util.c	/^int dev_open(char *dev, int flags)$/;"	f	signature:(char *dev, int flags)
dev_policy	libmdadm/mdadm.h	/^struct dev_policy {$/;"	s
dev_policy::metadata	libmdadm/mdadm.h	/^	const char *metadata;$/;"	m	struct:dev_policy	access:public
dev_policy::name	libmdadm/mdadm.h	/^	char *name;	\/* None of these strings are allocated.  They are$/;"	m	struct:dev_policy	access:public
dev_policy::next	libmdadm/mdadm.h	/^	struct dev_policy *next;$/;"	m	struct:dev_policy	typeref:struct:dev_policy::dev_policy	access:public
dev_policy::value	libmdadm/mdadm.h	/^	const char *value;$/;"	m	struct:dev_policy	access:public
dev_policy_free	libmdadm/mdadm.h	/^extern void dev_policy_free(struct dev_policy *p);$/;"	p	signature:(struct dev_policy *p)
dev_policy_free	libmdadm/policy.c	/^void dev_policy_free(struct dev_policy *p)$/;"	f	signature:(struct dev_policy *p)
dev_roles	libmdadm/super1.c	/^	__u16	dev_roles[0];	\/* role in array, or 0xffff for a spare, or 0xfffe for faulty *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
dev_size_from_id	libmdadm/mdadm.h	/^extern int dev_size_from_id(dev_t id, unsigned long long *size);$/;"	p	signature:(dev_t id, unsigned long long *size)
dev_size_from_id	libmdadm/util.c	/^int dev_size_from_id(dev_t id, unsigned long long *size)$/;"	f	signature:(dev_t id, unsigned long long *size)
devcnt	libmdadm/mdadm.h	/^	int		devcnt;$/;"	m	struct:mdstat_ent	access:public
devcnt	libmdadm/mdadm.h	/^	int devcnt;$/;"	m	struct:supertype	access:public
devflags	libmdadm/super1.c	/^	__u8    devflags;        \/* per-device flags.  Only one defined...*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
deviceID	libmdadm/platform-intel.c	/^	__u16 deviceID;$/;"	m	struct:pciExpDataStructFormat	file:	access:public
device_id	libmdadm/super-ddf.c	/^		be16 device_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
device_name	libmke2fs/ext2fs.h	/^	char *				device_name;$/;"	m	struct:struct_ext2_filsys	access:public
device_name	libmke2fs/mke2fs.c	/^static const char * device_name \/* = NULL *\/;$/;"	v	file:
device_name	libmke2fs/mke2fs.h	/^	char device_name[32];$/;"	m	struct:mke2fs_handle	access:public
device_size	libmdadm/super1.c	/^	__u64 device_size;$/;"	m	struct:misc_dev_info	file:	access:public
device_type_by_id	libmdadm/platform-intel.c	/^static enum sys_dev_type device_type_by_id(__u16 device_id)$/;"	f	file:	signature:(__u16 device_id)
device_uuid	libmdadm/super1.c	/^	__u8	device_uuid[16]; \/* user-space setable, ignored by kernel *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
devices	libmdadm/mdadm.h	/^	char	*devices;	\/* comma separated list of device$/;"	m	struct:mddev_ident	access:public
devid	libmdadm/Monitor.c	/^	dev_t devid[MAX_DISKS];$/;"	m	struct:state	file:	access:public
devid2devnm	libmdadm/lib.c	/^char *devid2devnm(int devid)$/;"	f	signature:(int devid)
devid2devnm	libmdadm/mdadm.h	/^extern char *devid2devnm(int devid);$/;"	p	signature:(int devid)
devid2kname	libmdadm/lib.c	/^char *devid2kname(int devid)$/;"	f	signature:(int devid)
devid2kname	libmdadm/mdadm.h	/^extern char *devid2kname(int devid);$/;"	p	signature:(int devid)
devid_policy	libmdadm/mdadm.h	/^extern struct dev_policy *devid_policy(int devid);$/;"	p	signature:(int devid)
devid_policy	libmdadm/policy.c	/^struct dev_policy *devid_policy(int dev)$/;"	f	signature:(int dev)
devinfo	libmdadm/super0.c	/^struct devinfo {$/;"	s	file:
devinfo	libmdadm/super1.c	/^struct devinfo {$/;"	s	file:
devinfo::data_offset	libmdadm/super1.c	/^	long long data_offset;$/;"	m	struct:devinfo	file:	access:public
devinfo::devname	libmdadm/super0.c	/^	char *devname;$/;"	m	struct:devinfo	file:	access:public
devinfo::devname	libmdadm/super1.c	/^	char *devname;$/;"	m	struct:devinfo	file:	access:public
devinfo::disk	libmdadm/super0.c	/^	mdu_disk_info_t disk;$/;"	m	struct:devinfo	file:	access:public
devinfo::disk	libmdadm/super1.c	/^	mdu_disk_info_t disk;$/;"	m	struct:devinfo	file:	access:public
devinfo::fd	libmdadm/super0.c	/^	int fd;$/;"	m	struct:devinfo	file:	access:public
devinfo::fd	libmdadm/super1.c	/^	int fd;$/;"	m	struct:devinfo	file:	access:public
devinfo::next	libmdadm/super0.c	/^	struct devinfo *next;$/;"	m	struct:devinfo	typeref:struct:devinfo::devinfo	file:	access:public
devinfo::next	libmdadm/super1.c	/^	struct devinfo *next;$/;"	m	struct:devinfo	typeref:struct:devinfo::devinfo	file:	access:public
devline	libmdadm/config.c	/^void devline(char *line)$/;"	f	signature:(char *line)
devlist	libmdadm/lib.c	/^} *devlist = NULL;$/;"	v	typeref:struct:devmap
devlist	libmdadm/super-intel.c	/^	struct intel_dev *devlist;$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_dev	file:	access:public
devlist_ready	libmdadm/lib.c	/^int devlist_ready = 0;$/;"	v
devmap	libmdadm/lib.c	/^struct devmap {$/;"	s	file:
devmap::major	libmdadm/lib.c	/^	int major, minor;$/;"	m	struct:devmap	file:	access:public
devmap::minor	libmdadm/lib.c	/^	int major, minor;$/;"	m	struct:devmap	file:	access:public
devmap::name	libmdadm/lib.c	/^	char *name;$/;"	m	struct:devmap	file:	access:public
devmap::next	libmdadm/lib.c	/^	struct devmap *next;$/;"	m	struct:devmap	typeref:struct:devmap::devmap	file:	access:public
devname	libmdadm/Assemble.c	/^	char *devname;$/;"	m	struct:devs	file:	access:public
devname	libmdadm/Monitor.c	/^	char *devname;$/;"	m	struct:state	file:	access:public
devname	libmdadm/mdadm.h	/^	char	*devname;$/;"	m	struct:mddev_ident	access:public
devname	libmdadm/mdadm.h	/^	char *devname;$/;"	m	struct:mddev_dev	access:public
devname	libmdadm/super-ddf.c	/^				char *devname;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
devname	libmdadm/super-intel.c	/^		char *devname;$/;"	m	struct:intel_super::dl	file:	access:public
devname	libmdadm/super-intel.c	/^	char  *devname;$/;"	m	struct:md_list	file:	access:public
devname	libmdadm/super0.c	/^	char *devname;$/;"	m	struct:devinfo	file:	access:public
devname	libmdadm/super1.c	/^	char *devname;$/;"	m	struct:devinfo	file:	access:public
devname	libmdadm/util.c	/^	char devname[BLKPG_DEVNAMELTH];	\/* partition name, like sda5 or c0d1p2,$/;"	m	struct:blkpg_partition	file:	access:public
devname_matches	libmdadm/config.c	/^int devname_matches(char *name, char *match)$/;"	f	signature:(char *name, char *match)
devname_matches	libmdadm/mdadm.h	/^extern int devname_matches(char *name, char *match);$/;"	p	signature:(char *name, char *match)
devnm	libmdadm/Monitor.c	/^	char devnm[32];	\/* to sync with mdstat info *\/$/;"	m	struct:state	file:	access:public
devnm	libmdadm/mdadm.h	/^	char		devnm[32];$/;"	m	struct:mdstat_ent	access:public
devnm	libmdadm/mdadm.h	/^	char	devnm[32];$/;"	m	struct:map_ent	access:public
devnm	libmdadm/mdadm.h	/^	char devnm[32]; \/* e.g. md0.  This appears in metadata_version:$/;"	m	struct:supertype	access:public
devnm	libmdadm/super-intel.c	/^	char devnm[32];$/;"	m	struct:geo_params	file:	access:public
devnm2devid	libmdadm/mdadm.h	/^extern int devnm2devid(char *devnm);$/;"	p	signature:(char *devnm)
devnm2devid	libmdadm/util.c	/^int devnm2devid(char *devnm)$/;"	f	signature:(char *devnm)
devpath_to_ll	libmdadm/platform-intel.c	/^static int devpath_to_ll(const char *dev_path, const char *entry, unsigned long long *val)$/;"	f	file:	signature:(const char *dev_path, const char *entry, unsigned long long *val)
devpath_to_ll	libmdadm/platform-intel.c	/^static int devpath_to_ll(const char *dev_path, const char *entry,$/;"	p	file:	signature:(const char *dev_path, const char *entry, unsigned long long *val)
devpath_to_vendor	libmdadm/platform-intel.c	/^static __u16 devpath_to_vendor(const char *dev_path)$/;"	f	file:	signature:(const char *dev_path)
devpath_to_vendor	libmdadm/platform-intel.c	/^static __u16 devpath_to_vendor(const char *dev_path);$/;"	p	file:	signature:(const char *dev_path)
devs	libmdadm/Assemble.c	/^struct devs {$/;"	s	file:
devs	libmdadm/mdadm.h	/^	struct mdinfo *devs;$/;"	m	struct:mdinfo	typeref:struct:mdinfo::mdinfo	access:public
devs	libmdadm/mdadm.h	/^	struct mdinfo *devs;$/;"	m	struct:supertype	typeref:struct:supertype::mdinfo	access:public
devs::devname	libmdadm/Assemble.c	/^	char *devname;$/;"	m	struct:devs	file:	access:public
devs::i	libmdadm/Assemble.c	/^	struct mdinfo i;$/;"	m	struct:devs	typeref:struct:devs::mdinfo	file:	access:public
devs::included	libmdadm/Assemble.c	/^	int included; \/* set if the device is already in the array$/;"	m	struct:devs	file:	access:public
devs::uptodate	libmdadm/Assemble.c	/^	int uptodate; \/* set once we decide that this device is as$/;"	m	struct:devs	file:	access:public
devsize	libmdadm/mdadm.h	/^	unsigned long long devsize;$/;"	m	struct:supertype	access:public
devstart	libmdadm/Grow.c	/^	__u64	devstart;	\/* address on backup device\/file of data *\/$/;"	m	struct:mdp_backup_super	file:	access:public
devstart2	libmdadm/Grow.c	/^	__u64	devstart2;	\/* offset in to data of second section *\/$/;"	m	struct:mdp_backup_super	file:	access:public
devstate	libmdadm/Monitor.c	/^	int devstate[MAX_DISKS];$/;"	m	struct:state	file:	access:public
devt_attached_to_hba	libmdadm/platform-intel.c	/^int devt_attached_to_hba(dev_t dev, const char *hba_path)$/;"	f	signature:(dev_t dev, const char *hba_path)
devt_attached_to_hba	libmdadm/platform-intel.h	/^int devt_attached_to_hba(dev_t dev, const char *hba_path);$/;"	p	signature:(dev_t dev, const char *hba_path)
devt_to_devpath	libmdadm/platform-intel.c	/^char *devt_to_devpath(dev_t dev)$/;"	f	signature:(dev_t dev)
devt_to_devpath	libmdadm/platform-intel.h	/^char *devt_to_devpath(dev_t dev);$/;"	p	signature:(dev_t dev)
dgrp_t	libmke2fs/ext2fs.h	/^typedef __u32 __bitwise		dgrp_t;$/;"	t
dh_next	libmdadm/dlink.h	/^    void * dh_next;$/;"	m	struct:__dl_head	access:public
dh_prev	libmdadm/dlink.h	/^    void * dh_prev;$/;"	m	struct:__dl_head	access:public
diag_space_length	libmdadm/super-ddf.c	/^	be32	diag_space_length;$/;"	m	struct:ddf_header	file:	access:public
diag_space_offset	libmdadm/super-ddf.c	/^	be32	diag_space_offset;$/;"	m	struct:ddf_header	file:	access:public
dir	libmke2fs/ext2fsP.h	/^	ext2_ino_t		dir;$/;"	m	struct:dir_context	access:public
dir_context	libmke2fs/ext2fsP.h	/^struct dir_context {$/;"	s
dir_context::buf	libmke2fs/ext2fsP.h	/^	char		*buf;$/;"	m	struct:dir_context	access:public
dir_context::dir	libmke2fs/ext2fsP.h	/^	ext2_ino_t		dir;$/;"	m	struct:dir_context	access:public
dir_context::errcode	libmke2fs/ext2fsP.h	/^	errcode_t	errcode;$/;"	m	struct:dir_context	access:public
dir_context::flags	libmke2fs/ext2fsP.h	/^	int		flags;$/;"	m	struct:dir_context	access:public
dir_context::func	libmke2fs/ext2fsP.h	/^	int (*func)(ext2_ino_t	dir,$/;"	m	struct:dir_context	access:public
dir_context::priv_data	libmke2fs/ext2fsP.h	/^	void		*priv_data;$/;"	m	struct:dir_context	access:public
direct_io	libmke2fs/mke2fs.c	/^static int	direct_io;$/;"	v	file:
direct_io	libmke2fs/mke2fs.h	/^	int direct_io;	$/;"	m	struct:e2fs_cfg	access:public
direction	libmdadm/super-intel.c	/^	enum takeover_direction direction;$/;"	m	struct:imsm_update_takeover	typeref:enum:imsm_update_takeover::takeover_direction	file:	access:public
dirty	libmdadm/super-intel.c	/^	__u8  dirty;$/;"	m	struct:imsm_vol	file:	access:public
dirty_bits	libmdadm/bitmap.c	/^	unsigned long long dirty_bits;$/;"	m	struct:bitmap_info_s	file:	access:public
discard	libmke2fs/mke2fs.c	/^static int	discard = 1;	\/* attempt to discard device before fs creation *\/$/;"	v	file:
discard	libmke2fs/mke2fs.h	/^	int discard;	$/;"	m	struct:extended_opt	access:public
disk	libmdadm/mdadm.h	/^	mdu_disk_info_t		disk;$/;"	m	struct:mdinfo	access:public
disk	libmdadm/super-ddf.c	/^		struct disk_data disk;$/;"	m	struct:ddf_super::dl	typeref:struct:ddf_super::dl::disk_data	file:	access:public
disk	libmdadm/super-intel.c	/^		struct imsm_disk disk;$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::imsm_disk	file:	access:public
disk	libmdadm/super-intel.c	/^	struct imsm_disk disk;$/;"	m	struct:intel_disk	typeref:struct:intel_disk::imsm_disk	file:	access:public
disk	libmdadm/super-intel.c	/^	struct imsm_disk disk[1];	\/* 0xD8 diskTbl[numDisks] *\/$/;"	m	struct:imsm_super	typeref:struct:imsm_super::imsm_disk	file:	access:public
disk	libmdadm/super0.c	/^	mdu_disk_info_t disk;$/;"	m	struct:devinfo	file:	access:public
disk	libmdadm/super1.c	/^	mdu_disk_info_t disk;$/;"	m	struct:devinfo	file:	access:public
diskInfo	libmdadm/mdadm_other.h	/^	mdu_disk_info_t diskInfo;$/;"	m	struct:array_disk_info	access:public
disk_action_allows	libmdadm/mdadm.h	/^extern int disk_action_allows(struct mdinfo *disk, const char *metadata,$/;"	p	signature:(struct mdinfo *disk, const char *metadata, enum policy_action want)
disk_action_allows	libmdadm/policy.c	/^int disk_action_allows(struct mdinfo *disk, const char *metadata, enum policy_action want)$/;"	f	signature:(struct mdinfo *disk, const char *metadata, enum policy_action want)
disk_attached_to_hba	libmdadm/platform-intel.c	/^int disk_attached_to_hba(int fd, const char *hba_path)$/;"	f	signature:(int fd, const char *hba_path)
disk_attached_to_hba	libmdadm/platform-intel.h	/^int disk_attached_to_hba(int fd, const char *hba_path);$/;"	p	signature:(int fd, const char *hba_path)
disk_by_path	libmdadm/super-intel.c	/^static char disk_by_path[] = "\/dev\/disk\/by-path\/";$/;"	v	file:
disk_data	libmdadm/super-ddf.c	/^struct disk_data {$/;"	s	file:
disk_data::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:disk_data	file:	access:public
disk_data::forced_guid	libmdadm/super-ddf.c	/^	__u8	forced_guid;	\/* set if guid was forced rather than magic *\/$/;"	m	struct:disk_data	file:	access:public
disk_data::forced_ref	libmdadm/super-ddf.c	/^	__u8	forced_ref;	\/* set when above was not result of magic *\/$/;"	m	struct:disk_data	file:	access:public
disk_data::guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:disk_data	file:	access:public
disk_data::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_PHYS_DATA_MAGIC *\/$/;"	m	struct:disk_data	file:	access:public
disk_data::pad	libmdadm/super-ddf.c	/^	__u8	pad[442];$/;"	m	struct:disk_data	file:	access:public
disk_data::refnum	libmdadm/super-ddf.c	/^	be32	refnum;		\/* crc of some magic drive data ... *\/$/;"	m	struct:disk_data	file:	access:public
disk_data::vendor	libmdadm/super-ddf.c	/^	__u8	vendor[32];$/;"	m	struct:disk_data	file:	access:public
disk_info	libmdadm/super-intel.c	/^struct disk_info {$/;"	s	file:
disk_info::serial	libmdadm/super-intel.c	/^	__u8 serial[MAX_RAID_SERIAL_LEN];$/;"	m	struct:disk_info	file:	access:public
disk_init_and_add	libmdadm/managemon.c	/^static int disk_init_and_add(struct mdinfo *disk, struct mdinfo *clone,$/;"	f	file:	signature:(struct mdinfo *disk, struct mdinfo *clone, struct active_array *aa)
disk_list_get	libmdadm/super-intel.c	/^static struct intel_disk *disk_list_get(__u8 *serial, struct intel_disk *disk_list)$/;"	f	file:	signature:(__u8 *serial, struct intel_disk *disk_list)
disk_mgmt_list	libmdadm/super-intel.c	/^	struct dl *disk_mgmt_list; \/* list of disks to add\/remove while mdmon$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
disk_ord_tbl	libmdadm/super-intel.c	/^	__u32 disk_ord_tbl[1];	\/* disk_ord_tbl[num_members],$/;"	m	struct:imsm_map	file:	access:public
disk_ordinal	libmdadm/super-intel.c	/^	__u16 disk_ordinal;$/;"	m	struct:bbm_log_entry	file:	access:public
disk_path	libmdadm/policy.c	/^static char *disk_path(struct mdinfo *disk)$/;"	f	file:	signature:(struct mdinfo *disk)
disk_policy	libmdadm/mdadm.h	/^extern struct dev_policy *disk_policy(struct mdinfo *disk);$/;"	p	signature:(struct mdinfo *disk)
disk_policy	libmdadm/policy.c	/^struct dev_policy *disk_policy(struct mdinfo *disk)$/;"	f	signature:(struct mdinfo *disk)
disk_type	libmdadm/policy.c	/^static char *disk_type(struct mdinfo *disk)$/;"	f	file:	signature:(struct mdinfo *disk)
diskfd_to_devpath	libmdadm/platform-intel.c	/^char *diskfd_to_devpath(int fd)$/;"	f	signature:(int fd)
diskfd_to_devpath	libmdadm/platform-intel.h	/^char *diskfd_to_devpath(int fd);$/;"	p	signature:(int fd)
disks	libmdadm/md_p.h	/^	mdp_disk_t disks[MD_SB_DISKS];$/;"	m	struct:mdp_superblock_s	access:public
disks	libmdadm/super-intel.c	/^	} *disks, *current_disk;$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
disks_overlap	libmdadm/super-intel.c	/^static int disks_overlap(struct intel_super *super, int idx, struct imsm_update_create_array *u)$/;"	f	file:	signature:(struct intel_super *super, int idx, struct imsm_update_create_array *u)
disks_to_mpb_size	libmdadm/super-intel.c	/^static size_t disks_to_mpb_size(int disks)$/;"	f	file:	signature:(int disks)
displayed	libmdadm/super-ddf.c	/^				int displayed;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
disposition	libmdadm/mdadm.h	/^	int disposition;	\/* 'a' for add, 'r' for remove, 'f' for fail,$/;"	m	struct:mddev_dev	access:public
dl	libmdadm/super-ddf.c	/^	struct dl {$/;"	s	struct:ddf_super	file:	access:public
dl	libmdadm/super-intel.c	/^	struct dl *dl;$/;"	m	struct:imsm_update_activate_spare	typeref:struct:imsm_update_activate_spare::dl	file:	access:public
dl	libmdadm/super-intel.c	/^	struct dl {$/;"	s	struct:intel_super	file:	access:public
dl_add	libmdadm/dlink.c	/^void dl_add(void *head, void *val)$/;"	f	signature:(void *head, void *val)
dl_add	libmdadm/dlink.h	/^void dl_add(void*, void*);$/;"	p	signature:(void*, void*)
dl_alloc	libmdadm/dlink.h	11;"	d
dl_del	libmdadm/dlink.c	/^void dl_del(void *val)$/;"	f	signature:(void *val)
dl_del	libmdadm/dlink.h	/^void dl_del(void*);$/;"	p	signature:(void*)
dl_free	libmdadm/dlink.c	/^void dl_free(void *v)$/;"	f	signature:(void *v)
dl_free	libmdadm/dlink.h	/^void dl_free(void*);$/;"	p	signature:(void*)
dl_head	libmdadm/dlink.c	/^void *dl_head()$/;"	f
dl_head	libmdadm/dlink.h	/^void *dl_head(void);$/;"	p	signature:(void)
dl_init	libmdadm/dlink.c	/^void dl_init(void *v)$/;"	f	signature:(void *v)
dl_init	libmdadm/dlink.h	/^void dl_init(void*);$/;"	p	signature:(void*)
dl_insert	libmdadm/dlink.c	/^void dl_insert(void *head, void *val)$/;"	f	signature:(void *head, void *val)
dl_insert	libmdadm/dlink.h	/^void dl_insert(void*, void*);$/;"	p	signature:(void*, void*)
dl_new	libmdadm/dlink.h	12;"	d
dl_newv	libmdadm/dlink.h	13;"	d
dl_next	libmdadm/dlink.h	15;"	d
dl_prev	libmdadm/dlink.h	16;"	d
dl_strdup	libmdadm/dlink.c	/^char *dl_strdup(char *s)$/;"	f	signature:(char *s)
dl_strdup	libmdadm/dlink.h	/^char *dl_strdup(char *);$/;"	p	signature:(char *)
dl_strndup	libmdadm/dlink.c	/^char *dl_strndup(char *s, int l)$/;"	f	signature:(char *s, int l)
dl_strndup	libmdadm/dlink.h	/^char *dl_strndup(char *, int);$/;"	p	signature:(char *, int)
dlist	libmdadm/super-ddf.c	/^	} *dlist, *add_list;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::dl	file:	access:public
do_batchmode	libmke2fs/profile.c	/^static void do_batchmode(profile_t profile)$/;"	f	file:	signature:(profile_t profile)
do_cmd	libmke2fs/profile.c	/^static void do_cmd(profile_t profile, char **argv)$/;"	f	file:	signature:(profile_t profile, char **argv)
do_manager	libmdadm/managemon.c	/^void do_manager(struct supertype *container)$/;"	f	signature:(struct supertype *container)
do_manager	libmdadm/mdmon.h	/^void do_manager(struct supertype *container);$/;"	p	signature:(struct supertype *container)
do_monitor	libmdadm/mdmon.h	/^void do_monitor(struct supertype *container);$/;"	p	signature:(struct supertype *container)
do_monitor	libmdadm/monitor.c	/^void do_monitor(struct supertype *container)$/;"	f	signature:(struct supertype *container)
dom	libmdadm/mdadm.h	/^	const char *dom;$/;"	m	struct:domainlist	access:public
domain_add	libmdadm/mdadm.h	/^void domain_add(struct domainlist **domp, char *domain);$/;"	p	signature:(struct domainlist **domp, char *domain)
domain_add	libmdadm/policy.c	/^void domain_add(struct domainlist **domp, char *domain)$/;"	f	signature:(struct domainlist **domp, char *domain)
domain_free	libmdadm/mdadm.h	/^extern void domain_free(struct domainlist *dl);$/;"	p	signature:(struct domainlist *dl)
domain_free	libmdadm/policy.c	/^void domain_free(struct domainlist *dl)$/;"	f	signature:(struct domainlist *dl)
domain_from_array	libmdadm/mdadm.h	/^extern struct domainlist *domain_from_array(struct mdinfo *mdi,$/;"	p	signature:(struct mdinfo *mdi, const char *metadata)
domain_from_array	libmdadm/policy.c	/^struct domainlist *domain_from_array(struct mdinfo *mdi, const char *metadata)$/;"	f	signature:(struct mdinfo *mdi, const char *metadata)
domain_merge	libmdadm/mdadm.h	/^extern void domain_merge(struct domainlist **domp, struct dev_policy *pol,$/;"	p	signature:(struct domainlist **domp, struct dev_policy *pol, const char *metadata)
domain_merge	libmdadm/policy.c	/^void domain_merge(struct domainlist **domp, struct dev_policy *pollist,$/;"	f	signature:(struct domainlist **domp, struct dev_policy *pollist, const char *metadata)
domain_merge_one	libmdadm/policy.c	/^static struct domainlist **domain_merge_one(struct domainlist **domp,$/;"	f	file:	signature:(struct domainlist **domp, const char *domain)
domain_test	libmdadm/mdadm.h	/^extern int domain_test(struct domainlist *dom, struct dev_policy *pol,$/;"	p	signature:(struct domainlist *dom, struct dev_policy *pol, const char *metadata)
domain_test	libmdadm/policy.c	/^int domain_test(struct domainlist *dom, struct dev_policy *pol,$/;"	f	signature:(struct domainlist *dom, struct dev_policy *pol, const char *metadata)
domainlist	libmdadm/mdadm.h	/^struct domainlist {$/;"	s
domainlist::dom	libmdadm/mdadm.h	/^	const char *dom;$/;"	m	struct:domainlist	access:public
domainlist::next	libmdadm/mdadm.h	/^	struct domainlist *next;$/;"	m	struct:domainlist	typeref:struct:domainlist::domainlist	access:public
domainlist_add_dev	libmdadm/mdadm.h	/^extern void domainlist_add_dev(struct domainlist **dom, int devid,$/;"	p	signature:(struct domainlist **dom, int devid, const char *metadata)
domainlist_add_dev	libmdadm/policy.c	/^void domainlist_add_dev(struct domainlist **dom, int devid, const char *metadata)$/;"	f	signature:(struct domainlist **dom, int devid, const char *metadata)
done_idx	libmke2fs/profile.c	/^	int			done_idx;$/;"	m	struct:profile_iterator	file:	access:public
dostat	FilesystemManager.cpp	/^bool FilesystemManager::dostat(const string& path, struct stat *st,$/;"	f	class:FilesystemManager	signature:(const string& path, struct stat *st, int do_lstat, int quiet)
dostat	FilesystemManager.h	/^	static bool dostat(const string& path, struct stat *st,$/;"	p	class:FilesystemManager	access:public	signature:(const string& path, struct stat *st, int do_lstat, int quiet)
dosyslog	libmdadm/Monitor.c	/^	int dosyslog;$/;"	m	struct:alert_info	file:	access:public
dpa	libmdadm/platform-intel.h	/^	__u16 dpa; \/* Disks Per Array supported *\/$/;"	m	struct:imsm_orom	access:public
dprint_wake_reasons	libmdadm/monitor.c	/^static void dprint_wake_reasons(fd_set *fds)$/;"	f	file:	signature:(fd_set *fds)
dprintf	libmdadm/mdadm.h	1381;"	d
dprintf	libmdadm/mdadm.h	1384;"	d
driver_features	libmdadm/platform-intel.h	/^	__u32 driver_features;$/;"	m	struct:imsm_orom	access:public
dump_mmp_msg	libmke2fs/util.c	/^void dump_mmp_msg(struct mmp_struct *mmp, const char *msg)$/;"	f	signature:(struct mmp_struct *mmp, const char *msg)
dump_mmp_msg	libmke2fs/util.h	/^extern void dump_mmp_msg(struct mmp_struct *mmp, const char *msg);$/;"	p	signature:(struct mmp_struct *mmp, const char *msg)
dump_policy	libmdadm/policy.c	/^void dump_policy(struct dev_policy *policy)$/;"	f	signature:(struct dev_policy *policy)
dump_profile	libmke2fs/profile.c	/^static void dump_profile(struct profile_node *root, int level,$/;"	f	file:	signature:(struct profile_node *root, int level, void (*cb)(const char *, void *), void *data)
dump_profile_to_buffer_cb	libmke2fs/profile.c	/^static void dump_profile_to_buffer_cb(const char *str, void *data)$/;"	f	file:	signature:(const char *str, void *data)
dump_profile_to_file_cb	libmke2fs/profile.c	/^static void dump_profile_to_file_cb(const char *str, void *data)$/;"	f	file:	signature:(const char *str, void *data)
dup_super	libmdadm/mdadm.h	/^extern struct supertype *dup_super(struct supertype *st);$/;"	p	signature:(struct supertype *st)
dup_super	libmdadm/util.c	/^struct supertype *dup_super(struct supertype *orig)$/;"	f	signature:(struct supertype *orig)
duplicate_aa	libmdadm/managemon.c	/^static struct active_array *duplicate_aa(struct active_array *aa)$/;"	f	file:	signature:(struct active_array *aa)
dups	libmdadm/mdadm.h	/^		char *dups; \/* duplicates of 'value' with a partNN appended *\/$/;"	m	struct:pol_rule::rule	access:public
e	libmdadm/super-intel.c	/^		struct extent *e; \/* for determining freespace @ create *\/$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::extent	file:	access:public
e2_blkcnt_t	libmke2fs/ext2fs.h	/^typedef __s64 __bitwise		e2_blkcnt_t;$/;"	t
e2fs_cfg	libmke2fs/mke2fs.h	/^struct e2fs_cfg {$/;"	s
e2fs_cfg::bad_blocks_filename	libmke2fs/mke2fs.h	/^	char bad_blocks_filename[512];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::blocks_per_group	libmke2fs/mke2fs.h	/^	__u32 blocks_per_group;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::blocksize	libmke2fs/mke2fs.h	/^	int blocksize;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::cflag	libmke2fs/mke2fs.h	/^	int cflag;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::cluster_size	libmke2fs/mke2fs.h	/^	int cluster_size;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::creator_os	libmke2fs/mke2fs.h	/^	__u32 creator_os;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::direct_io	libmke2fs/mke2fs.h	/^	int direct_io;	$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::ext_opts	libmke2fs/mke2fs.h	/^	struct extended_opt ext_opts;$/;"	m	struct:e2fs_cfg	typeref:struct:e2fs_cfg::extended_opt	access:public
e2fs_cfg::flex_bg_size	libmke2fs/mke2fs.h	/^	unsigned long flex_bg_size;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::force	libmke2fs/mke2fs.h	/^	int force;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::fs_features	libmke2fs/mke2fs.h	/^	char fs_features[256];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::fs_type	libmke2fs/mke2fs.h	/^	char fs_type[16];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::fs_uuid	libmke2fs/mke2fs.h	/^	char fs_uuid[64];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::inode_ratio	libmke2fs/mke2fs.h	/^	int inode_ratio;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::inode_size	libmke2fs/mke2fs.h	/^	int inode_size;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::journal_size	libmke2fs/mke2fs.h	/^	int journal_size;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::mount_dir	libmke2fs/mke2fs.h	/^	char mount_dir[64];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::noaction	libmke2fs/mke2fs.h	/^	int noaction;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::num_inodes	libmke2fs/mke2fs.h	/^	unsigned long long num_inodes;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::quiet	libmke2fs/mke2fs.h	/^	int quiet;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::r_opt	libmke2fs/mke2fs.h	/^	int r_opt;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::reserved_ratio	libmke2fs/mke2fs.h	/^	double reserved_ratio;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::super_only	libmke2fs/mke2fs.h	/^	int super_only;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::usage_types	libmke2fs/mke2fs.h	/^	char usage_types[256];$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::verbose	libmke2fs/mke2fs.h	/^	int verbose;$/;"	m	struct:e2fs_cfg	access:public
e2fs_cfg::volume_label	libmke2fs/mke2fs.h	/^	char volume_label[16];$/;"	m	struct:e2fs_cfg	access:public
eDiskType	RAIDManager.h	/^enum eDiskType {$/;"	g
e_flags	libmke2fs/ext2fs.h	/^	__u32	e_flags;	\/* extent flags *\/$/;"	m	struct:ext2fs_extent	access:public
e_lblk	libmke2fs/ext2fs.h	/^	blk64_t	e_lblk;		\/* first logical block extent covers *\/$/;"	m	struct:ext2fs_extent	access:public
e_len	libmke2fs/ext2fs.h	/^	__u32	e_len;		\/* number of blocks covered by extent *\/$/;"	m	struct:ext2fs_extent	access:public
e_pblk	libmke2fs/ext2fs.h	/^	blk64_t	e_pblk;		\/* first physical block *\/$/;"	m	struct:ext2fs_extent	access:public
edit_feature	libmke2fs/mke2fs.c	/^static int edit_feature(const char *str, __u32 *compat_array)$/;"	f	file:	signature:(const char *str, __u32 *compat_array)
edit_mntopts	libmke2fs/mke2fs.c	/^static int edit_mntopts(const char *str, __u32 *mntopts)$/;"	f	file:	signature:(const char *str, __u32 *mntopts)
efi_guid	libmdadm/platform-intel.h	/^struct efi_guid {$/;"	s
efi_guid::b	libmdadm/platform-intel.h	/^	__u8 b[16];$/;"	m	struct:efi_guid	access:public
enable_fds	libmdadm/mdadm.h	/^extern void enable_fds(int devices);$/;"	p	signature:(int devices)
enable_fds	libmdadm/util.c	/^void enable_fds(int devices)$/;"	f	signature:(int devices)
end	libmdadm/probe_roms.c	/^	unsigned long end;$/;"	m	struct:resource	file:	access:public
end_magic	libmdadm/msg.c	/^static const __u32 end_magic = 0xa5a55a5a;$/;"	v	file:
end_migration	libmdadm/super-intel.c	/^static void end_migration(struct imsm_dev *dev, struct intel_super *super,$/;"	f	file:	signature:(struct imsm_dev *dev, struct intel_super *super, __u8 map_state)
end_or_comment	libmke2fs/profile.c	/^static int end_or_comment(char ch)$/;"	f	file:	signature:(char ch)
ending_lba	libmdadm/part.h	/^	__u64 ending_lba;$/;"	m	struct:GPT_part_entry	access:public
enforcegroups	libmdadm/super-ddf.c	/^	__u8	enforcegroups;$/;"	m	struct:ddf_header	file:	access:public
enough	libmdadm/mdadm.h	/^extern int enough(int level, int raid_disks, int layout, int clean,$/;"	p	signature:(int level, int raid_disks, int layout, int clean, char *avail)
enough	libmdadm/util.c	/^int enough(int level, int raid_disks, int layout, int clean, char *avail)$/;"	f	signature:(int level, int raid_disks, int layout, int clean, char *avail)
enough_fd	libmdadm/mdadm.h	/^extern int enough_fd(int fd);$/;"	p	signature:(int fd)
enough_fd	libmdadm/util.c	/^int enough_fd(int fd)$/;"	f	signature:(int fd)
ensure_zero_has_size	libmdadm/restripe.c	/^void ensure_zero_has_size(int chunk_size)$/;"	f	signature:(int chunk_size)
entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:bad_block_log	typeref:struct:bad_block_log::mapped_block	file:	access:public
entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:phys_disk	typeref:struct:phys_disk::phys_disk_entry	file:	access:public
entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:virtual_disk	typeref:struct:virtual_disk::virtual_entry	file:	access:public
entry_count	libmdadm/super-ddf.c	/^	be16	entry_count;$/;"	m	struct:bad_block_log	file:	access:public
entry_count	libmdadm/super-intel.c	/^	__u32 entry_count;$/;"	m	struct:bbm_log	file:	access:public
err	libmdadm/Monitor.c	/^	int err;$/;"	m	struct:state	file:	access:public
err	libmke2fs/profile.c	/^	int err;$/;"	m	struct:prof_buf	file:	access:public
err_bad_ddf_layout	libmdadm/super-ddf.c	/^static int err_bad_ddf_layout(const struct vd_config *conf)$/;"	f	file:	signature:(const struct vd_config *conf)
err_bad_md_layout	libmdadm/super-ddf.c	/^static int err_bad_md_layout(const mdu_array_info_t *array)$/;"	f	file:	signature:(const mdu_array_info_t *array)
errcode	libmke2fs/ext2fsP.h	/^	errcode_t	errcode;$/;"	m	struct:dir_context	access:public
error_log_pos	libmdadm/super-intel.c	/^	__u8 error_log_pos;		\/* 0x3A  *\/$/;"	m	struct:imsm_super	file:	access:public
error_log_size	libmdadm/super-intel.c	/^	__u32 error_log_size;		\/* 0x30 - 0x33 in bytes *\/$/;"	m	struct:imsm_super	file:	access:public
error_table	libmke2fs/prof_err.c	/^struct error_table {$/;"	s	file:
error_table::base	libmke2fs/prof_err.c	/^    long base;$/;"	m	struct:error_table	file:	access:public
error_table::msgs	libmke2fs/prof_err.c	/^    char const * const * msgs;$/;"	m	struct:error_table	file:	access:public
error_table::n_msgs	libmke2fs/prof_err.c	/^    int n_msgs;$/;"	m	struct:error_table	file:	access:public
errors	libmdadm/mdadm.h	/^	int			errors;$/;"	m	struct:mdinfo	access:public
esize	libmdadm/super-ddf.c	/^				__u64 esize;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
et_list	libmke2fs/prof_err.c	/^struct et_list {$/;"	s	file:
et_list::next	libmke2fs/prof_err.c	/^    struct et_list *next;$/;"	m	struct:et_list	typeref:struct:et_list::et_list	file:	access:public
et_list::table	libmke2fs/prof_err.c	/^    const struct error_table * table;$/;"	m	struct:et_list	typeref:struct:et_list::error_table	file:	access:public
et_prof_error_table	libmke2fs/prof_err.c	/^const struct error_table et_prof_error_table = { text, -1429577728L, 31 };$/;"	v	typeref:struct:error_table
events	libmdadm/bitmap.h	/^	__u64 events;       \/* 24  event counter for the bitmap (1)*\/$/;"	m	struct:bitmap_super_s	access:public
events	libmdadm/mdadm.h	/^	__u64			events;$/;"	m	struct:mdinfo	access:public
events	libmdadm/super1.c	/^	__u64	events;		\/* incremented when superblock updated *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
events_cleared	libmdadm/bitmap.h	/^	__u64	events_cleared;$/;"	m	struct:bitmap	access:public
events_cleared	libmdadm/bitmap.h	/^	__u64 events_cleared;\/*32  event counter when last bit cleared (2) *\/$/;"	m	struct:bitmap_super_s	access:public
events_hi	libmdadm/md_p.h	/^	__u32 events_hi;	\/*  7 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
events_hi	libmdadm/md_p.h	/^	__u32 events_hi;	\/*  8 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
events_lo	libmdadm/md_p.h	/^	__u32 events_lo;	\/*  7 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
events_lo	libmdadm/md_p.h	/^	__u32 events_lo;	\/*  8 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
examine_badblocks	libmdadm/mdadm.h	/^	int (*examine_badblocks)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
examine_badblocks_super1	libmdadm/super1.c	/^static int examine_badblocks_super1(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
examine_gpt	libmdadm/super-gpt.c	/^static void examine_gpt(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_mbr	libmdadm/super-mbr.c	/^static void examine_mbr(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_migr_rec_imsm	libmdadm/super-intel.c	/^void examine_migr_rec_imsm(struct intel_super *super)$/;"	f	signature:(struct intel_super *super)
examine_pds	libmdadm/super-ddf.c	/^static void examine_pds(struct ddf_super *sb)$/;"	f	file:	signature:(struct ddf_super *sb)
examine_result	libmdadm/mdadm_other.h	/^struct examine_result {$/;"	s
examine_result::arrayUUID	libmdadm/mdadm_other.h	/^	int arrayUUID[4];$/;"	m	struct:examine_result	access:public
examine_result::bHasBadblock	libmdadm/mdadm_other.h	/^	unsigned bHasBadblock;$/;"	m	struct:examine_result	access:public
examine_result::bIsValid	libmdadm/mdadm_other.h	/^	unsigned bIsValid;$/;"	m	struct:examine_result	access:public
examine_result::bSBChkSumError	libmdadm/mdadm_other.h	/^	unsigned bSBChkSumError;$/;"	m	struct:examine_result	access:public
examine_result::cState	libmdadm/mdadm_other.h	/^	char cState; \/* Active: 'A', Spare: 'S', Replacement: 'R' *\/$/;"	m	struct:examine_result	access:public
examine_result::next	libmdadm/mdadm_other.h	/^	struct examine_result* next;$/;"	m	struct:examine_result	typeref:struct:examine_result::examine_result	access:public
examine_result::strDevName	libmdadm/mdadm_other.h	/^	char strDevName[32];$/;"	m	struct:examine_result	access:public
examine_result::uChkSum	libmdadm/mdadm_other.h	/^	unsigned uChkSum;$/;"	m	struct:examine_result	access:public
examine_result::uDevRole	libmdadm/mdadm_other.h	/^	unsigned uDevRole;$/;"	m	struct:examine_result	access:public
examine_result::uExpectedChkSum	libmdadm/mdadm_other.h	/^	unsigned uExpectedChkSum;$/;"	m	struct:examine_result	access:public
examine_result::uRaidDiskNum	libmdadm/mdadm_other.h	/^	unsigned uRaidDiskNum;$/;"	m	struct:examine_result	access:public
examine_result::uRaidLevel	libmdadm/mdadm_other.h	/^	unsigned uRaidLevel;$/;"	m	struct:examine_result	access:public
examine_super	libmdadm/mdadm.h	/^	void (*examine_super)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
examine_super0	libmdadm/super0.c	/^static void examine_super0(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_super1	libmdadm/super1.c	/^static void examine_super1(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_super1_result	libmdadm/super1.c	/^static void examine_super1_result(struct supertype *st, char *homehost, struct examine_result *result)$/;"	f	file:	signature:(struct supertype *st, char *homehost, struct examine_result *result)
examine_super_ddf	libmdadm/super-ddf.c	/^static void examine_super_ddf(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_super_imsm	libmdadm/super-intel.c	/^static void examine_super_imsm(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
examine_super_result	libmdadm/mdadm.h	/^	void (*examine_super_result)(struct supertype *st, char *homehost, struct examine_result *resultlist);$/;"	m	struct:superswitch	access:public
examine_vd	libmdadm/super-ddf.c	/^static void examine_vd(int n, struct ddf_super *sb, char *guid)$/;"	f	file:	signature:(int n, struct ddf_super *sb, char *guid)
examine_vds	libmdadm/super-ddf.c	/^static void examine_vds(struct ddf_super *sb)$/;"	f	file:	signature:(struct ddf_super *sb)
exit_now	libmdadm/managemon.c	/^int exit_now = 0;$/;"	v
expected_spares	libmdadm/Monitor.c	/^	int expected_spares;$/;"	m	struct:state	file:	access:public
experimental	libmdadm/mdadm.h	/^extern int experimental(void);$/;"	p	signature:(void)
experimental	libmdadm/util.c	/^int experimental(void)$/;"	f	signature:(void)
export_detail_platform	libmdadm/mdadm.h	/^	int (*export_detail_platform)(int verbose, char *controller_path);$/;"	m	struct:superswitch	access:public
export_detail_platform_imsm	libmdadm/super-intel.c	/^static int export_detail_platform_imsm(int verbose, char *controller_path)$/;"	f	file:	signature:(int verbose, char *controller_path)
export_detail_super	libmdadm/mdadm.h	/^	void (*export_detail_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
export_detail_super1	libmdadm/super1.c	/^static void export_detail_super1(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
export_examine_super	libmdadm/mdadm.h	/^	void (*export_examine_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
export_examine_super0	libmdadm/super0.c	/^static void export_examine_super0(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
export_examine_super1	libmdadm/super1.c	/^static void export_examine_super1(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
export_examine_super_ddf	libmdadm/super-ddf.c	/^static void export_examine_super_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
export_examine_super_imsm	libmdadm/super-intel.c	/^static void export_examine_super_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
ext2_badblocks_iterate	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_iterate *ext2_badblocks_iterate;$/;"	t	typeref:struct:ext2_struct_u32_iterate
ext2_badblocks_list	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_list *ext2_badblocks_list;$/;"	t	typeref:struct:ext2_struct_u32_list
ext2_db_entry	libmke2fs/ext2fs.h	/^struct ext2_db_entry {$/;"	s
ext2_db_entry2	libmke2fs/ext2fs.h	/^struct ext2_db_entry2 {$/;"	s
ext2_db_entry2::blk	libmke2fs/ext2fs.h	/^	blk64_t	blk;$/;"	m	struct:ext2_db_entry2	access:public
ext2_db_entry2::blockcnt	libmke2fs/ext2fs.h	/^	e2_blkcnt_t	blockcnt;$/;"	m	struct:ext2_db_entry2	access:public
ext2_db_entry2::ino	libmke2fs/ext2fs.h	/^	ext2_ino_t	ino;$/;"	m	struct:ext2_db_entry2	access:public
ext2_db_entry::blk	libmke2fs/ext2fs.h	/^	blk_t	blk;$/;"	m	struct:ext2_db_entry	access:public
ext2_db_entry::blockcnt	libmke2fs/ext2fs.h	/^	int	blockcnt;$/;"	m	struct:ext2_db_entry	access:public
ext2_db_entry::ino	libmke2fs/ext2fs.h	/^	ext2_ino_t	ino;$/;"	m	struct:ext2_db_entry	access:public
ext2_dblist	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_dblist *ext2_dblist;$/;"	t	typeref:struct:ext2_struct_dblist
ext2_dirhash_t	libmke2fs/ext2fs.h	/^typedef __u32 __bitwise		ext2_dirhash_t;$/;"	t
ext2_extent_handle_t	libmke2fs/ext2fs.h	/^typedef struct ext2_extent_handle *ext2_extent_handle_t;$/;"	t	typeref:struct:ext2_extent_handle
ext2_extent_info	libmke2fs/ext2fs.h	/^struct ext2_extent_info {$/;"	s
ext2_extent_info::bytes_avail	libmke2fs/ext2fs.h	/^	int		bytes_avail;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::curr_entry	libmke2fs/ext2fs.h	/^	int		curr_entry;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::curr_level	libmke2fs/ext2fs.h	/^	int		curr_level;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_depth	libmke2fs/ext2fs.h	/^	int		max_depth;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_entries	libmke2fs/ext2fs.h	/^	int		max_entries;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_lblk	libmke2fs/ext2fs.h	/^	blk64_t		max_lblk;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_len	libmke2fs/ext2fs.h	/^	__u32		max_len;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_pblk	libmke2fs/ext2fs.h	/^	blk64_t		max_pblk;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::max_uninit_len	libmke2fs/ext2fs.h	/^	__u32		max_uninit_len;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_info::num_entries	libmke2fs/ext2fs.h	/^	int		num_entries;$/;"	m	struct:ext2_extent_info	access:public
ext2_extent_path_t	libmke2fs/ext2fs.h	/^typedef struct ext2_extent_path *ext2_extent_path_t;$/;"	t	typeref:struct:ext2_extent_path
ext2_file_t	libmke2fs/ext2fs.h	/^typedef struct ext2_file *ext2_file_t;$/;"	t	typeref:struct:ext2_file
ext2_filsys	libmke2fs/ext2fs.h	/^typedef struct struct_ext2_filsys *ext2_filsys;$/;"	t	typeref:struct:struct_ext2_filsys
ext2_icount_t	libmke2fs/ext2fs.h	/^typedef struct ext2_icount *ext2_icount_t;$/;"	t	typeref:struct:ext2_icount
ext2_ino_t	libmke2fs/ext2fs.h	/^typedef __u32 __bitwise		ext2_ino_t;$/;"	t
ext2_inode_cache	libmke2fs/ext2fsP.h	/^struct ext2_inode_cache {$/;"	s
ext2_inode_cache::buffer	libmke2fs/ext2fsP.h	/^	void *				buffer;$/;"	m	struct:ext2_inode_cache	access:public
ext2_inode_cache::buffer_blk	libmke2fs/ext2fsP.h	/^	blk64_t				buffer_blk;$/;"	m	struct:ext2_inode_cache	access:public
ext2_inode_cache::cache	libmke2fs/ext2fsP.h	/^	struct ext2_inode_cache_ent	*cache;$/;"	m	struct:ext2_inode_cache	typeref:struct:ext2_inode_cache::ext2_inode_cache_ent	access:public
ext2_inode_cache::cache_last	libmke2fs/ext2fsP.h	/^	int				cache_last;$/;"	m	struct:ext2_inode_cache	access:public
ext2_inode_cache::cache_size	libmke2fs/ext2fsP.h	/^	int				cache_size;$/;"	m	struct:ext2_inode_cache	access:public
ext2_inode_cache::refcount	libmke2fs/ext2fsP.h	/^	int				refcount;$/;"	m	struct:ext2_inode_cache	access:public
ext2_inode_cache_ent	libmke2fs/ext2fsP.h	/^struct ext2_inode_cache_ent {$/;"	s
ext2_inode_cache_ent::ino	libmke2fs/ext2fsP.h	/^	ext2_ino_t		ino;$/;"	m	struct:ext2_inode_cache_ent	access:public
ext2_inode_cache_ent::inode	libmke2fs/ext2fsP.h	/^	struct ext2_inode	inode;$/;"	m	struct:ext2_inode_cache_ent	typeref:struct:ext2_inode_cache_ent::ext2_inode	access:public
ext2_inode_scan	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_inode_scan *ext2_inode_scan;$/;"	t	typeref:struct:ext2_struct_inode_scan
ext2_off64_t	libmke2fs/ext2fs.h	/^typedef __u64 __bitwise		ext2_off64_t;$/;"	t
ext2_off_t	libmke2fs/ext2fs.h	/^typedef __u32 __bitwise		ext2_off_t;$/;"	t
ext2_struct_dblist	libmke2fs/ext2fsP.h	/^struct ext2_struct_dblist {$/;"	s
ext2_struct_dblist::count	libmke2fs/ext2fsP.h	/^	unsigned long long	count;$/;"	m	struct:ext2_struct_dblist	access:public
ext2_struct_dblist::fs	libmke2fs/ext2fsP.h	/^	ext2_filsys		fs;$/;"	m	struct:ext2_struct_dblist	access:public
ext2_struct_dblist::list	libmke2fs/ext2fsP.h	/^	struct ext2_db_entry2 *	list;$/;"	m	struct:ext2_struct_dblist	typeref:struct:ext2_struct_dblist::ext2_db_entry2	access:public
ext2_struct_dblist::magic	libmke2fs/ext2fsP.h	/^	int			magic;$/;"	m	struct:ext2_struct_dblist	access:public
ext2_struct_dblist::size	libmke2fs/ext2fsP.h	/^	unsigned long long	size;$/;"	m	struct:ext2_struct_dblist	access:public
ext2_struct_dblist::sorted	libmke2fs/ext2fsP.h	/^	int			sorted;$/;"	m	struct:ext2_struct_dblist	access:public
ext2_struct_u32_iterate	libmke2fs/ext2fsP.h	/^struct ext2_struct_u32_iterate {$/;"	s
ext2_struct_u32_iterate::bb	libmke2fs/ext2fsP.h	/^	ext2_u32_list		bb;$/;"	m	struct:ext2_struct_u32_iterate	access:public
ext2_struct_u32_iterate::magic	libmke2fs/ext2fsP.h	/^	int			magic;$/;"	m	struct:ext2_struct_u32_iterate	access:public
ext2_struct_u32_iterate::ptr	libmke2fs/ext2fsP.h	/^	int			ptr;$/;"	m	struct:ext2_struct_u32_iterate	access:public
ext2_struct_u32_list	libmke2fs/ext2fsP.h	/^struct ext2_struct_u32_list {$/;"	s
ext2_struct_u32_list::badblocks_flags	libmke2fs/ext2fsP.h	/^	int	badblocks_flags;$/;"	m	struct:ext2_struct_u32_list	access:public
ext2_struct_u32_list::list	libmke2fs/ext2fsP.h	/^	__u32	*list;$/;"	m	struct:ext2_struct_u32_list	access:public
ext2_struct_u32_list::magic	libmke2fs/ext2fsP.h	/^	int	magic;$/;"	m	struct:ext2_struct_u32_list	access:public
ext2_struct_u32_list::num	libmke2fs/ext2fsP.h	/^	int	num;$/;"	m	struct:ext2_struct_u32_list	access:public
ext2_struct_u32_list::size	libmke2fs/ext2fsP.h	/^	int	size;$/;"	m	struct:ext2_struct_u32_list	access:public
ext2_u32_iterate	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_iterate *ext2_u32_iterate;$/;"	t	typeref:struct:ext2_struct_u32_iterate
ext2_u32_list	libmke2fs/ext2fs.h	/^typedef struct ext2_struct_u32_list *ext2_u32_list;$/;"	t	typeref:struct:ext2_struct_u32_list
ext2fs_add_dir_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_add_dir_block(ext2_dblist dblist, ext2_ino_t ino,$/;"	p	signature:(ext2_dblist dblist, ext2_ino_t ino, blk_t blk, int blockcnt)
ext2fs_add_dir_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_add_dir_block2(ext2_dblist dblist, ext2_ino_t ino,$/;"	p	signature:(ext2_dblist dblist, ext2_ino_t ino, blk64_t blk, e2_blkcnt_t blockcnt)
ext2fs_add_journal_device	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_add_journal_device(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_filsys journal_dev)
ext2fs_add_journal_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_add_journal_inode(ext2_filsys fs, blk_t num_blocks,$/;"	p	signature:(ext2_filsys fs, blk_t num_blocks, int flags)
ext2fs_adjust_ea_refcount	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_adjust_ea_refcount(ext2_filsys fs, blk_t blk,$/;"	p	signature:(ext2_filsys fs, blk_t blk, char *block_buf, int adjust, __u32 *newcount)
ext2fs_adjust_ea_refcount2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_adjust_ea_refcount2(ext2_filsys fs, blk64_t blk,$/;"	p	signature:(ext2_filsys fs, blk64_t blk, char *block_buf, int adjust, __u32 *newcount)
ext2fs_alloc_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_alloc_block(ext2_filsys fs, blk_t goal,$/;"	p	signature:(ext2_filsys fs, blk_t goal, char *block_buf, blk_t *ret)
ext2fs_alloc_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_alloc_block2(ext2_filsys fs, blk64_t goal,$/;"	p	signature:(ext2_filsys fs, blk64_t goal, char *block_buf, blk64_t *ret)
ext2fs_alloc_generic_bmap	libmke2fs/ext2fs.h	/^errcode_t ext2fs_alloc_generic_bmap(ext2_filsys fs, errcode_t magic,$/;"	p	signature:(ext2_filsys fs, errcode_t magic, int type, __u64 start, __u64 end, __u64 real_end, const char *descr, ext2fs_generic_bitmap *ret)
ext2fs_alloc_generic_bmap	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_alloc_generic_bmap(ext2_filsys fs, errcode_t magic,$/;"	p	signature:(ext2_filsys fs, errcode_t magic, int type, __u64 start, __u64 end, __u64 real_end, const char * description, ext2fs_generic_bitmap *bmap)
ext2fs_allocate_block_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_block_bitmap(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, const char *descr, ext2fs_block_bitmap *ret)
ext2fs_allocate_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_generic_bitmap(__u32 start,$/;"	p	signature:(__u32 start, __u32 end, __u32 real_end, const char *descr, ext2fs_generic_bitmap *ret)
ext2fs_allocate_group_table	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_group_table(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, ext2fs_block_bitmap bmap)
ext2fs_allocate_inode_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_inode_bitmap(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, const char *descr, ext2fs_inode_bitmap *ret)
ext2fs_allocate_subcluster_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_subcluster_bitmap(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, const char *descr, ext2fs_block_bitmap *ret)
ext2fs_allocate_tables	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_allocate_tables(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_badblocks_copy	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_badblocks_copy(ext2_badblocks_list src,$/;"	p	signature:(ext2_badblocks_list src, ext2_badblocks_list *dest)
ext2fs_badblocks_equal	libmke2fs/ext2fs.h	/^extern int ext2fs_badblocks_equal(ext2_badblocks_list bb1,$/;"	p	signature:(ext2_badblocks_list bb1, ext2_badblocks_list bb2)
ext2fs_badblocks_list_add	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_badblocks_list_add(ext2_badblocks_list bb,$/;"	p	signature:(ext2_badblocks_list bb, blk_t blk)
ext2fs_badblocks_list_create	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_badblocks_list_create(ext2_badblocks_list *ret,$/;"	p	signature:(ext2_badblocks_list *ret, int size)
ext2fs_badblocks_list_del	libmke2fs/ext2fs.h	/^extern void ext2fs_badblocks_list_del(ext2_u32_list bb, __u32 blk);$/;"	p	signature:(ext2_u32_list bb, __u32 blk)
ext2fs_badblocks_list_free	libmke2fs/ext2fs.h	/^extern void ext2fs_badblocks_list_free(ext2_badblocks_list bb);$/;"	p	signature:(ext2_badblocks_list bb)
ext2fs_badblocks_list_iterate	libmke2fs/ext2fs.h	/^extern int ext2fs_badblocks_list_iterate(ext2_badblocks_iterate iter,$/;"	p	signature:(ext2_badblocks_iterate iter, blk_t *blk)
ext2fs_badblocks_list_iterate_begin	libmke2fs/ext2fs.h	/^	ext2fs_badblocks_list_iterate_begin(ext2_badblocks_list bb,$/;"	p	signature:(ext2_badblocks_list bb, ext2_badblocks_iterate *ret)
ext2fs_badblocks_list_iterate_end	libmke2fs/ext2fs.h	/^extern void ext2fs_badblocks_list_iterate_end(ext2_badblocks_iterate iter);$/;"	p	signature:(ext2_badblocks_iterate iter)
ext2fs_badblocks_list_test	libmke2fs/ext2fs.h	/^extern int ext2fs_badblocks_list_test(ext2_badblocks_list bb,$/;"	p	signature:(ext2_badblocks_list bb, blk_t blk)
ext2fs_bg_checksum	libmke2fs/ext2fs.h	/^extern __u16 ext2fs_bg_checksum(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_checksum_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_checksum_set(ext2_filsys fs, dgrp_t group, __u16 checksum);$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u16 checksum)
ext2fs_bg_flags	libmke2fs/ext2fs.h	/^extern __u16 ext2fs_bg_flags(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_flags_clear	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_flags_clear(ext2_filsys fs, dgrp_t group, __u16 bg_flags);$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u16 bg_flags)
ext2fs_bg_flags_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_flags_set(ext2_filsys fs, dgrp_t group, __u16 bg_flags);$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u16 bg_flags)
ext2fs_bg_flags_test	libmke2fs/ext2fs.h	/^extern int ext2fs_bg_flags_test(ext2_filsys fs, dgrp_t group, __u16 bg_flag);$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u16 bg_flag)
ext2fs_bg_flags_zap	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_flags_zap(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_free_blocks_count	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_bg_free_blocks_count(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_free_blocks_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_free_blocks_count_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u32 n)
ext2fs_bg_free_inodes_count	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_bg_free_inodes_count(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_free_inodes_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_free_inodes_count_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u32 n)
ext2fs_bg_has_super	libmke2fs/ext2fs.h	/^extern int ext2fs_bg_has_super(ext2_filsys fs, dgrp_t group_block);$/;"	p	signature:(ext2_filsys fs, dgrp_t group_block)
ext2fs_bg_itable_unused	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_bg_itable_unused(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_itable_unused_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_itable_unused_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u32 n)
ext2fs_bg_used_dirs_count	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_bg_used_dirs_count(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_bg_used_dirs_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_bg_used_dirs_count_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, __u32 n)
ext2fs_block_alloc_stats	libmke2fs/ext2fs.h	/^void ext2fs_block_alloc_stats(ext2_filsys fs, blk_t blk, int inuse);$/;"	p	signature:(ext2_filsys fs, blk_t blk, int inuse)
ext2fs_block_alloc_stats2	libmke2fs/ext2fs.h	/^void ext2fs_block_alloc_stats2(ext2_filsys fs, blk64_t blk, int inuse);$/;"	p	signature:(ext2_filsys fs, blk64_t blk, int inuse)
ext2fs_block_bitmap	libmke2fs/ext2fs.h	/^typedef struct ext2fs_struct_generic_bitmap *ext2fs_block_bitmap;$/;"	t	typeref:struct:ext2fs_struct_generic_bitmap
ext2fs_block_bitmap_loc	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_block_bitmap_loc(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_block_bitmap_loc_set	libmke2fs/ext2fs.h	/^extern void ext2fs_block_bitmap_loc_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, blk64_t blk)
ext2fs_block_iterate	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_block_iterate(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int flags, char *block_buf, int (*func)(ext2_filsys fs, blk_t *blocknr, int blockcnt, void *priv_data), void *priv_data)
ext2fs_block_iterate2	libmke2fs/ext2fs.h	/^errcode_t ext2fs_block_iterate2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int flags, char *block_buf, int (*func)(ext2_filsys fs, blk_t *blocknr, e2_blkcnt_t blockcnt, blk_t ref_blk, int ref_offset, void *priv_data), void *priv_data)
ext2fs_block_iterate3	libmke2fs/ext2fs.h	/^errcode_t ext2fs_block_iterate3(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int flags, char *block_buf, int (*func)(ext2_filsys fs, blk64_t *blocknr, e2_blkcnt_t blockcnt, blk64_t ref_blk, int ref_offset, void *priv_data), void *priv_data)
ext2fs_blocks_count	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_blocks_count(struct ext2_super_block *super);$/;"	p	signature:(struct ext2_super_block *super)
ext2fs_blocks_count_add	libmke2fs/ext2fs.h	/^extern void ext2fs_blocks_count_add(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_blocks_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_blocks_count_set(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_bmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_bmap(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, char *block_buf, int bmap_flags, blk_t block, blk_t *phys_blk)
ext2fs_bmap2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_bmap2(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, char *block_buf, int bmap_flags, blk64_t block, int *ret_flags, blk64_t *phys_blk)
ext2fs_check_desc	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_check_desc(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_check_directory	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_check_directory(ext2_filsys fs, ext2_ino_t ino);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino)
ext2fs_check_if_mounted	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_check_if_mounted(const char *file, int *mount_flags);$/;"	p	signature:(const char *file, int *mount_flags)
ext2fs_check_mount_point	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_check_mount_point(const char *device, int *mount_flags,$/;"	p	signature:(const char *device, int *mount_flags, char *mtpt, int mtlen)
ext2fs_clear_block_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_clear_block_bitmap(ext2fs_block_bitmap bitmap);$/;"	p	signature:(ext2fs_block_bitmap bitmap)
ext2fs_clear_generic_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_clear_generic_bitmap(ext2fs_generic_bitmap bitmap);$/;"	p	signature:(ext2fs_generic_bitmap bitmap)
ext2fs_clear_generic_bmap	libmke2fs/ext2fs.h	/^void ext2fs_clear_generic_bmap(ext2fs_generic_bitmap bitmap);$/;"	p	signature:(ext2fs_generic_bitmap bitmap)
ext2fs_clear_inode_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_clear_inode_bitmap(ext2fs_inode_bitmap bitmap);$/;"	p	signature:(ext2fs_inode_bitmap bitmap)
ext2fs_close	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_close(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_close2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_close2(ext2_filsys fs, int flags);$/;"	p	signature:(ext2_filsys fs, int flags)
ext2fs_close_inode_scan	libmke2fs/ext2fs.h	/^extern void ext2fs_close_inode_scan(ext2_inode_scan scan);$/;"	p	signature:(ext2_inode_scan scan)
ext2fs_compare_block_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_compare_block_bitmap(ext2fs_block_bitmap bm1,$/;"	p	signature:(ext2fs_block_bitmap bm1, ext2fs_block_bitmap bm2)
ext2fs_compare_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_compare_generic_bitmap(errcode_t magic, errcode_t neq,$/;"	p	signature:(errcode_t magic, errcode_t neq, ext2fs_generic_bitmap bm1, ext2fs_generic_bitmap bm2)
ext2fs_compare_generic_bmap	libmke2fs/ext2fs.h	/^errcode_t ext2fs_compare_generic_bmap(errcode_t neq,$/;"	p	signature:(errcode_t neq, ext2fs_generic_bitmap bm1, ext2fs_generic_bitmap bm2)
ext2fs_compare_inode_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_compare_inode_bitmap(ext2fs_inode_bitmap bm1,$/;"	p	signature:(ext2fs_inode_bitmap bm1, ext2fs_inode_bitmap bm2)
ext2fs_convert_subcluster_bitmap	libmke2fs/ext2fs.h	/^errcode_t ext2fs_convert_subcluster_bitmap(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2fs_block_bitmap *bitmap)
ext2fs_copy_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_copy_bitmap(ext2fs_generic_bitmap src,$/;"	p	signature:(ext2fs_generic_bitmap src, ext2fs_generic_bitmap *dest)
ext2fs_copy_dblist	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_copy_dblist(ext2_dblist src,$/;"	p	signature:(ext2_dblist src, ext2_dblist *dest)
ext2fs_copy_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_copy_generic_bitmap(ext2fs_generic_bitmap src,$/;"	p	signature:(ext2fs_generic_bitmap src, ext2fs_generic_bitmap *dest)
ext2fs_copy_generic_bmap	libmke2fs/ext2fs.h	/^errcode_t ext2fs_copy_generic_bmap(ext2fs_generic_bitmap src,$/;"	p	signature:(ext2fs_generic_bitmap src, ext2fs_generic_bitmap *dest)
ext2fs_copy_generic_bmap	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_copy_generic_bmap(ext2fs_generic_bitmap src,$/;"	p	signature:(ext2fs_generic_bitmap src, ext2fs_generic_bitmap *dest)
ext2fs_crc32c_be	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_crc32c_be(__u32 crc, unsigned char const *p, size_t len);$/;"	p	signature:(__u32 crc, unsigned char const *p, size_t len)
ext2fs_crc32c_le	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_crc32c_le(__u32 crc, unsigned char const *p, size_t len);$/;"	p	signature:(__u32 crc, unsigned char const *p, size_t len)
ext2fs_create_icount	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_create_icount(ext2_filsys fs, int flags,$/;"	p	signature:(ext2_filsys fs, int flags, unsigned int size, ext2_icount_t *ret)
ext2fs_create_icount2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_create_icount2(ext2_filsys fs, int flags,$/;"	p	signature:(ext2_filsys fs, int flags, unsigned int size, ext2_icount_t hint, ext2_icount_t *ret)
ext2fs_create_icount_tdb	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_create_icount_tdb(ext2_filsys fs, char *tdb_dir,$/;"	p	signature:(ext2_filsys fs, char *tdb_dir, int flags, ext2_icount_t *ret)
ext2fs_create_journal_superblock	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_create_journal_superblock(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, __u32 num_blocks, int flags, char **ret_jsb)
ext2fs_create_resize_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_create_resize_inode(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_dblist_count	libmke2fs/ext2fs.h	/^extern int ext2fs_dblist_count(ext2_dblist dblist);$/;"	p	signature:(ext2_dblist dblist)
ext2fs_dblist_count2	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_dblist_count2(ext2_dblist dblist);$/;"	p	signature:(ext2_dblist dblist)
ext2fs_dblist_dir_iterate	libmke2fs/ext2fs.h	/^	ext2fs_dblist_dir_iterate(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, int flags, char *block_buf, int (*func)(ext2_ino_t dir, int entry, struct ext2_dir_entry *dirent, int offset, int blocksize, char *buf, void *priv_data), void *priv_data)
ext2fs_dblist_drop_last	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dblist_drop_last(ext2_dblist dblist);$/;"	p	signature:(ext2_dblist dblist)
ext2fs_dblist_get_last	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dblist_get_last(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, struct ext2_db_entry **entry)
ext2fs_dblist_get_last2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dblist_get_last2(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, struct ext2_db_entry2 **entry)
ext2fs_dblist_iterate	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dblist_iterate(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, int (*func)(ext2_filsys fs, struct ext2_db_entry *db_info, void *priv_data), void *priv_data)
ext2fs_dblist_iterate2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dblist_iterate2(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, int (*func)(ext2_filsys fs, struct ext2_db_entry2 *db_info, void *priv_data), void *priv_data)
ext2fs_dblist_sort	libmke2fs/ext2fs.h	/^extern void ext2fs_dblist_sort(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, EXT2_QSORT_TYPE (*sortfunc)(const void *, const void *))
ext2fs_dblist_sort2	libmke2fs/ext2fs.h	/^extern void ext2fs_dblist_sort2(ext2_dblist dblist,$/;"	p	signature:(ext2_dblist dblist, EXT2_QSORT_TYPE (*sortfunc)(const void *, const void *))
ext2fs_default_journal_size	libmke2fs/ext2fs.h	/^extern int ext2fs_default_journal_size(__u64 num_blocks);$/;"	p	signature:(__u64 num_blocks)
ext2fs_descriptor_block_loc	libmke2fs/ext2fs.h	/^extern blk_t ext2fs_descriptor_block_loc(ext2_filsys fs, blk_t group_block,$/;"	p	signature:(ext2_filsys fs, blk_t group_block, dgrp_t i)
ext2fs_descriptor_block_loc2	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_descriptor_block_loc2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, blk64_t group_block, dgrp_t i)
ext2fs_dir_iterate	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dir_iterate(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, int flags, char *block_buf, int (*func)(struct ext2_dir_entry *dirent, int offset, int blocksize, char *buf, void *priv_data), void *priv_data)
ext2fs_dir_iterate2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dir_iterate2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, int flags, char *block_buf, int (*func)(ext2_ino_t dir, int entry, struct ext2_dir_entry *dirent, int offset, int blocksize, char *buf, void *priv_data), void *priv_data)
ext2fs_dirhash	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dirhash(int version, const char *name, int len,$/;"	p	signature:(int version, const char *name, int len, const __u32 *seed, ext2_dirhash_t *ret_hash, ext2_dirhash_t *ret_minor_hash)
ext2fs_div64_ceil	libmke2fs/ext2fs.h	/^_INLINE_ __u64 ext2fs_div64_ceil(__u64 a, __u64 b)$/;"	f	signature:(__u64 a, __u64 b)
ext2fs_div64_ceil	libmke2fs/ext2fs.h	/^extern __u64 ext2fs_div64_ceil(__u64 a, __u64 b);$/;"	p	signature:(__u64 a, __u64 b)
ext2fs_div_ceil	libmke2fs/ext2fs.h	/^_INLINE_ unsigned int ext2fs_div_ceil(unsigned int a, unsigned int b)$/;"	f	signature:(unsigned int a, unsigned int b)
ext2fs_div_ceil	libmke2fs/ext2fs.h	/^extern unsigned int ext2fs_div_ceil(unsigned int a, unsigned int b);$/;"	p	signature:(unsigned int a, unsigned int b)
ext2fs_dup_handle	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_dup_handle(ext2_filsys src, ext2_filsys *dest);$/;"	p	signature:(ext2_filsys src, ext2_filsys *dest)
ext2fs_expand_dir	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_expand_dir(ext2_filsys fs, ext2_ino_t dir);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir)
ext2fs_ext_attr_hash_entry	libmke2fs/ext2fs.h	/^extern __u32 ext2fs_ext_attr_hash_entry(struct ext2_ext_attr_entry *entry,$/;"	p	signature:(struct ext2_ext_attr_entry *entry, void *data)
ext2fs_extent	libmke2fs/ext2fs.h	/^struct ext2fs_extent {$/;"	s
ext2fs_extent::e_flags	libmke2fs/ext2fs.h	/^	__u32	e_flags;	\/* extent flags *\/$/;"	m	struct:ext2fs_extent	access:public
ext2fs_extent::e_lblk	libmke2fs/ext2fs.h	/^	blk64_t	e_lblk;		\/* first logical block extent covers *\/$/;"	m	struct:ext2fs_extent	access:public
ext2fs_extent::e_len	libmke2fs/ext2fs.h	/^	__u32	e_len;		\/* number of blocks covered by extent *\/$/;"	m	struct:ext2fs_extent	access:public
ext2fs_extent::e_pblk	libmke2fs/ext2fs.h	/^	blk64_t	e_pblk;		\/* first physical block *\/$/;"	m	struct:ext2fs_extent	access:public
ext2fs_extent_delete	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_delete(ext2_extent_handle_t handle, int flags);$/;"	p	signature:(ext2_extent_handle_t handle, int flags)
ext2fs_extent_fix_parents	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_fix_parents(ext2_extent_handle_t handle);$/;"	p	signature:(ext2_extent_handle_t handle)
ext2fs_extent_free	libmke2fs/ext2fs.h	/^extern void ext2fs_extent_free(ext2_extent_handle_t handle);$/;"	p	signature:(ext2_extent_handle_t handle)
ext2fs_extent_get	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_get(ext2_extent_handle_t handle,$/;"	p	signature:(ext2_extent_handle_t handle, int flags, struct ext2fs_extent *extent)
ext2fs_extent_get_info	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_get_info(ext2_extent_handle_t handle,$/;"	p	signature:(ext2_extent_handle_t handle, struct ext2_extent_info *info)
ext2fs_extent_goto	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_goto(ext2_extent_handle_t handle,$/;"	p	signature:(ext2_extent_handle_t handle, blk64_t blk)
ext2fs_extent_goto2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_goto2(ext2_extent_handle_t handle,$/;"	p	signature:(ext2_extent_handle_t handle, int leaf_level, blk64_t blk)
ext2fs_extent_header_verify	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_header_verify(void *ptr, int size);$/;"	p	signature:(void *ptr, int size)
ext2fs_extent_insert	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_insert(ext2_extent_handle_t handle, int flags,$/;"	p	signature:(ext2_extent_handle_t handle, int flags, struct ext2fs_extent *extent)
ext2fs_extent_node_split	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_node_split(ext2_extent_handle_t handle);$/;"	p	signature:(ext2_extent_handle_t handle)
ext2fs_extent_open	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_open(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, ext2_extent_handle_t *handle)
ext2fs_extent_open2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_open2(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, ext2_extent_handle_t *ret_handle)
ext2fs_extent_replace	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_replace(ext2_extent_handle_t handle, int flags,$/;"	p	signature:(ext2_extent_handle_t handle, int flags, struct ext2fs_extent *extent)
ext2fs_extent_set_bmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_extent_set_bmap(ext2_extent_handle_t handle,$/;"	p	signature:(ext2_extent_handle_t handle, blk64_t logical, blk64_t physical, int flags)
ext2fs_file_acl_block	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_file_acl_block(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, const struct ext2_inode *inode)
ext2fs_file_acl_block_set	libmke2fs/ext2fs.h	/^extern void ext2fs_file_acl_block_set(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode, blk64_t blk)
ext2fs_file_block_offset_too_big	libmke2fs/ext2fsP.h	/^extern int ext2fs_file_block_offset_too_big(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode, blk64_t offset)
ext2fs_file_close	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_close(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_flush	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_flush(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_get_fs	libmke2fs/ext2fs.h	/^extern ext2_filsys ext2fs_file_get_fs(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_get_inode	libmke2fs/ext2fs.h	/^struct ext2_inode *ext2fs_file_get_inode(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_get_inode_num	libmke2fs/ext2fs.h	/^extern ext2_ino_t ext2fs_file_get_inode_num(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_get_lsize	libmke2fs/ext2fs.h	/^errcode_t ext2fs_file_get_lsize(ext2_file_t file, __u64 *ret_size);$/;"	p	signature:(ext2_file_t file, __u64 *ret_size)
ext2fs_file_get_size	libmke2fs/ext2fs.h	/^extern ext2_off_t ext2fs_file_get_size(ext2_file_t file);$/;"	p	signature:(ext2_file_t file)
ext2fs_file_llseek	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_llseek(ext2_file_t file, __u64 offset,$/;"	p	signature:(ext2_file_t file, __u64 offset, int whence, __u64 *ret_pos)
ext2fs_file_lseek	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_lseek(ext2_file_t file, ext2_off_t offset,$/;"	p	signature:(ext2_file_t file, ext2_off_t offset, int whence, ext2_off_t *ret_pos)
ext2fs_file_open	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_open(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int flags, ext2_file_t *ret)
ext2fs_file_open2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_open2(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, int flags, ext2_file_t *ret)
ext2fs_file_read	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_read(ext2_file_t file, void *buf,$/;"	p	signature:(ext2_file_t file, void *buf, unsigned int wanted, unsigned int *got)
ext2fs_file_set_size	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_set_size(ext2_file_t file, ext2_off_t size);$/;"	p	signature:(ext2_file_t file, ext2_off_t size)
ext2fs_file_set_size2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_set_size2(ext2_file_t file, ext2_off64_t size);$/;"	p	signature:(ext2_file_t file, ext2_off64_t size)
ext2fs_file_write	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_file_write(ext2_file_t file, const void *buf,$/;"	p	signature:(ext2_file_t file, const void *buf, unsigned int nbytes, unsigned int *written)
ext2fs_find_block_device	libmke2fs/ext2fs.h	/^extern char *ext2fs_find_block_device(dev_t device);$/;"	p	signature:(dev_t device)
ext2fs_find_first_zero_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_find_first_zero_generic_bitmap(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u32 start, __u32 end, __u32 *out)
ext2fs_flush	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_flush(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_flush2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_flush2(ext2_filsys fs, int flags);$/;"	p	signature:(ext2_filsys fs, int flags)
ext2fs_flush_icache	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_flush_icache(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_follow_link	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_follow_link(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd, ext2_ino_t inode, ext2_ino_t *res_inode)
ext2fs_free	libmke2fs/ext2fs.h	/^extern void ext2fs_free(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_free_block_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_free_block_bitmap(ext2fs_block_bitmap bitmap);$/;"	p	signature:(ext2fs_block_bitmap bitmap)
ext2fs_free_blocks_count	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_free_blocks_count(struct ext2_super_block *super);$/;"	p	signature:(struct ext2_super_block *super)
ext2fs_free_blocks_count_add	libmke2fs/ext2fs.h	/^extern void ext2fs_free_blocks_count_add(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_free_blocks_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_free_blocks_count_set(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_free_dblist	libmke2fs/ext2fs.h	/^extern void ext2fs_free_dblist(ext2_dblist dblist);$/;"	p	signature:(ext2_dblist dblist)
ext2fs_free_generic_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_free_generic_bitmap(ext2fs_inode_bitmap bitmap);$/;"	p	signature:(ext2fs_inode_bitmap bitmap)
ext2fs_free_generic_bmap	libmke2fs/ext2fs.h	/^void ext2fs_free_generic_bmap(ext2fs_generic_bitmap bmap);$/;"	p	signature:(ext2fs_generic_bitmap bmap)
ext2fs_free_generic_bmap	libmke2fs/ext2fsP.h	/^extern void ext2fs_free_generic_bmap(ext2fs_generic_bitmap bmap);$/;"	p	signature:(ext2fs_generic_bitmap bmap)
ext2fs_free_icount	libmke2fs/ext2fs.h	/^extern void ext2fs_free_icount(ext2_icount_t icount);$/;"	p	signature:(ext2_icount_t icount)
ext2fs_free_inode_bitmap	libmke2fs/ext2fs.h	/^extern void ext2fs_free_inode_bitmap(ext2fs_inode_bitmap bitmap);$/;"	p	signature:(ext2fs_inode_bitmap bitmap)
ext2fs_free_mem	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_free_mem(void *ptr)$/;"	f	signature:(void *ptr)
ext2fs_free_mem	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_free_mem(void *ptr);$/;"	p	signature:(void *ptr)
ext2fs_fstat	libmke2fs/ext2fs.h	/^extern int ext2fs_fstat(int fd, ext2fs_struct_stat *buf);$/;"	p	signature:(int fd, ext2fs_struct_stat *buf)
ext2fs_fudge_block_bitmap_end	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_fudge_block_bitmap_end(ext2fs_block_bitmap bitmap,$/;"	p	signature:(ext2fs_block_bitmap bitmap, blk_t end, blk_t *oend)
ext2fs_fudge_block_bitmap_end2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_fudge_block_bitmap_end2(ext2fs_block_bitmap bitmap,$/;"	p	signature:(ext2fs_block_bitmap bitmap, blk64_t end, blk64_t *oend)
ext2fs_fudge_generic_bitmap_end	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_fudge_generic_bitmap_end(ext2fs_inode_bitmap bitmap,$/;"	p	signature:(ext2fs_inode_bitmap bitmap, errcode_t magic, errcode_t neq, ext2_ino_t end, ext2_ino_t *oend)
ext2fs_fudge_generic_bmap_end	libmke2fs/ext2fs.h	/^errcode_t ext2fs_fudge_generic_bmap_end(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, errcode_t neq, __u64 end, __u64 *oend)
ext2fs_fudge_generic_bmap_end	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_fudge_generic_bmap_end(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, errcode_t neq, __u64 end, __u64 *oend)
ext2fs_fudge_inode_bitmap_end	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_fudge_inode_bitmap_end(ext2fs_inode_bitmap bitmap,$/;"	p	signature:(ext2fs_inode_bitmap bitmap, ext2_ino_t end, ext2_ino_t *oend)
ext2fs_generic_bitmap	libmke2fs/ext2fs.h	/^typedef struct ext2fs_struct_generic_bitmap *ext2fs_generic_bitmap;$/;"	t	typeref:struct:ext2fs_struct_generic_bitmap
ext2fs_get_array	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_get_array(unsigned long count, unsigned long size, void *ptr)$/;"	f	signature:(unsigned long count, unsigned long size, void *ptr)
ext2fs_get_array	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_array(unsigned long count,$/;"	p	signature:(unsigned long count, unsigned long size, void *ptr)
ext2fs_get_arrayzero	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_get_arrayzero(unsigned long count,$/;"	f	signature:(unsigned long count, unsigned long size, void *ptr)
ext2fs_get_arrayzero	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_arrayzero(unsigned long count,$/;"	p	signature:(unsigned long count, unsigned long size, void *ptr)
ext2fs_get_bitmap_granularity	libmke2fs/ext2fs.h	/^extern int ext2fs_get_bitmap_granularity(ext2fs_block_bitmap bitmap);$/;"	p	signature:(ext2fs_block_bitmap bitmap)
ext2fs_get_block_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_block_bitmap_range(ext2fs_block_bitmap bmap,$/;"	p	signature:(ext2fs_block_bitmap bmap, blk_t start, unsigned int num, void *out)
ext2fs_get_block_bitmap_range2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_block_bitmap_range2(ext2fs_block_bitmap bmap,$/;"	p	signature:(ext2fs_block_bitmap bmap, blk64_t start, size_t num, void *out)
ext2fs_get_blocks	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_blocks(ext2_filsys fs, ext2_ino_t ino, blk_t *blocks);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, blk_t *blocks)
ext2fs_get_data_io	libmke2fs/ext2fs.h	/^errcode_t ext2fs_get_data_io(ext2_filsys fs, io_channel *old_io);$/;"	p	signature:(ext2_filsys fs, io_channel *old_io)
ext2fs_get_device_phys_sectsize	libmke2fs/ext2fs.h	/^errcode_t ext2fs_get_device_phys_sectsize(const char *file, int *sectsize);$/;"	p	signature:(const char *file, int *sectsize)
ext2fs_get_device_sectsize	libmke2fs/ext2fs.h	/^errcode_t ext2fs_get_device_sectsize(const char *file, int *sectsize);$/;"	p	signature:(const char *file, int *sectsize)
ext2fs_get_device_size	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_device_size(const char *file, int blocksize,$/;"	p	signature:(const char *file, int blocksize, blk_t *retblocks)
ext2fs_get_device_size2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_device_size2(const char *file, int blocksize,$/;"	p	signature:(const char *file, int blocksize, blk64_t *retblocks)
ext2fs_get_dio_alignment	libmke2fs/ext2fs.h	/^extern int ext2fs_get_dio_alignment(int fd);$/;"	p	signature:(int fd)
ext2fs_get_free_blocks	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_free_blocks(ext2_filsys fs, blk_t start,$/;"	p	signature:(ext2_filsys fs, blk_t start, blk_t finish, int num, ext2fs_block_bitmap map, blk_t *ret)
ext2fs_get_free_blocks2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_free_blocks2(ext2_filsys fs, blk64_t start,$/;"	p	signature:(ext2_filsys fs, blk64_t start, blk64_t finish, int num, ext2fs_block_bitmap map, blk64_t *ret)
ext2fs_get_generic_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_generic_bitmap_range(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, errcode_t magic, __u32 start, __u32 num, void *out)
ext2fs_get_generic_bmap_range	libmke2fs/ext2fs.h	/^errcode_t ext2fs_get_generic_bmap_range(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, __u64 start, unsigned int num, void *out)
ext2fs_get_generic_bmap_range	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_get_generic_bmap_range(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u64 start, unsigned int num, void *out)
ext2fs_get_icount_size	libmke2fs/ext2fs.h	/^extern ext2_ino_t ext2fs_get_icount_size(ext2_icount_t icount);$/;"	p	signature:(ext2_icount_t icount)
ext2fs_get_inode_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_inode_bitmap_range(ext2fs_inode_bitmap bmap,$/;"	p	signature:(ext2fs_inode_bitmap bmap, ext2_ino_t start, unsigned int num, void *out)
ext2fs_get_inode_bitmap_range2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_inode_bitmap_range2(ext2fs_inode_bitmap bmap,$/;"	p	signature:(ext2fs_inode_bitmap bmap, __u64 start, size_t num, void *out)
ext2fs_get_library_version	libmke2fs/ext2fs.h	/^extern int ext2fs_get_library_version(const char **ver_string,$/;"	p	signature:(const char **ver_string, const char **date_string)
ext2fs_get_mem	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_get_mem(unsigned long size, void *ptr)$/;"	f	signature:(unsigned long size, void *ptr)
ext2fs_get_mem	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_mem(unsigned long size, void *ptr);$/;"	p	signature:(unsigned long size, void *ptr)
ext2fs_get_memalign	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_memalign(unsigned long size,$/;"	p	signature:(unsigned long size, unsigned long align, void *ptr)
ext2fs_get_memzero	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_get_memzero(unsigned long size, void *ptr)$/;"	f	signature:(unsigned long size, void *ptr)
ext2fs_get_memzero	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_memzero(unsigned long size, void *ptr);$/;"	p	signature:(unsigned long size, void *ptr)
ext2fs_get_next_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_next_inode(ext2_inode_scan scan, ext2_ino_t *ino,$/;"	p	signature:(ext2_inode_scan scan, ext2_ino_t *ino, struct ext2_inode *inode)
ext2fs_get_next_inode_full	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_next_inode_full(ext2_inode_scan scan,$/;"	p	signature:(ext2_inode_scan scan, ext2_ino_t *ino, struct ext2_inode *inode, int bufsize)
ext2fs_get_num_dirs	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_num_dirs(ext2_filsys fs, ext2_ino_t *ret_num_dirs);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t *ret_num_dirs)
ext2fs_get_pathname	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_pathname(ext2_filsys fs, ext2_ino_t dir, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, ext2_ino_t ino, char **name)
ext2fs_get_rec_len	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_get_rec_len(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_dir_entry *dirent, unsigned int *rec_len)
ext2fs_group_blocks_count	libmke2fs/ext2fs.h	/^extern int ext2fs_group_blocks_count(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_desc	libmke2fs/ext2fs.h	/^extern struct ext2_group_desc *ext2fs_group_desc(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct opaque_ext2_group_desc *gdp, dgrp_t group)
ext2fs_group_desc_csum	libmke2fs/ext2fs.h	/^extern __u16 ext2fs_group_desc_csum(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_desc_csum_set	libmke2fs/ext2fs.h	/^extern void ext2fs_group_desc_csum_set(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_desc_csum_verify	libmke2fs/ext2fs.h	/^extern int ext2fs_group_desc_csum_verify(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_first_block	libmke2fs/ext2fs.h	/^_INLINE_ blk_t ext2fs_group_first_block(ext2_filsys fs, dgrp_t group)$/;"	f	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_first_block	libmke2fs/ext2fs.h	/^extern blk_t ext2fs_group_first_block(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_first_block2	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_group_first_block2(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_last_block	libmke2fs/ext2fs.h	/^_INLINE_ blk_t ext2fs_group_last_block(ext2_filsys fs, dgrp_t group)$/;"	f	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_last_block	libmke2fs/ext2fs.h	/^extern blk_t ext2fs_group_last_block(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_last_block2	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_group_last_block2(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_group_of_blk	libmke2fs/ext2fs.h	/^_INLINE_ dgrp_t ext2fs_group_of_blk(ext2_filsys fs, blk_t blk)$/;"	f	signature:(ext2_filsys fs, blk_t blk)
ext2fs_group_of_blk	libmke2fs/ext2fs.h	/^extern dgrp_t ext2fs_group_of_blk(ext2_filsys fs, blk_t blk);$/;"	p	signature:(ext2_filsys fs, blk_t blk)
ext2fs_group_of_blk2	libmke2fs/ext2fs.h	/^extern dgrp_t ext2fs_group_of_blk2(ext2_filsys fs, blk64_t);$/;"	p	signature:(ext2_filsys fs, blk64_t)
ext2fs_group_of_ino	libmke2fs/ext2fs.h	/^_INLINE_ dgrp_t ext2fs_group_of_ino(ext2_filsys fs, ext2_ino_t ino)$/;"	f	signature:(ext2_filsys fs, ext2_ino_t ino)
ext2fs_group_of_ino	libmke2fs/ext2fs.h	/^extern dgrp_t ext2fs_group_of_ino(ext2_filsys fs, ext2_ino_t ino);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino)
ext2fs_iblk_add_blocks	libmke2fs/ext2fs.h	/^errcode_t ext2fs_iblk_add_blocks(ext2_filsys fs, struct ext2_inode *inode,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode, blk64_t num_blocks)
ext2fs_iblk_set	libmke2fs/ext2fs.h	/^errcode_t ext2fs_iblk_set(ext2_filsys fs, struct ext2_inode *inode, blk64_t b);$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode, blk64_t b)
ext2fs_iblk_sub_blocks	libmke2fs/ext2fs.h	/^errcode_t ext2fs_iblk_sub_blocks(ext2_filsys fs, struct ext2_inode *inode,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode, blk64_t num_blocks)
ext2fs_icount_decrement	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_icount_decrement(ext2_icount_t icount, ext2_ino_t ino,$/;"	p	signature:(ext2_icount_t icount, ext2_ino_t ino, __u16 *ret)
ext2fs_icount_fetch	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_icount_fetch(ext2_icount_t icount, ext2_ino_t ino,$/;"	p	signature:(ext2_icount_t icount, ext2_ino_t ino, __u16 *ret)
ext2fs_icount_increment	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_icount_increment(ext2_icount_t icount, ext2_ino_t ino,$/;"	p	signature:(ext2_icount_t icount, ext2_ino_t ino, __u16 *ret)
ext2fs_icount_store	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_icount_store(ext2_icount_t icount, ext2_ino_t ino,$/;"	p	signature:(ext2_icount_t icount, ext2_ino_t ino, __u16 count)
ext2fs_icount_validate	libmke2fs/ext2fs.h	/^errcode_t ext2fs_icount_validate(ext2_icount_t icount, FILE *);$/;"	p	signature:(ext2_icount_t icount, FILE *)
ext2fs_image_bitmap_read	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_bitmap_read(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_image_bitmap_write	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_bitmap_write(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_image_inode_read	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_inode_read(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_image_inode_write	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_inode_write(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_image_super_read	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_super_read(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_image_super_write	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_image_super_write(ext2_filsys fs, int fd, int flags);$/;"	p	signature:(ext2_filsys fs, int fd, int flags)
ext2fs_init_dblist	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_init_dblist(ext2_filsys fs, ext2_dblist *ret_dblist);$/;"	p	signature:(ext2_filsys fs, ext2_dblist *ret_dblist)
ext2fs_initialize	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_initialize(const char *name, int flags,$/;"	p	signature:(const char *name, int flags, struct ext2_super_block *param, io_manager manager, ext2_filsys *ret_fs)
ext2fs_inode_alloc_stats	libmke2fs/ext2fs.h	/^void ext2fs_inode_alloc_stats(ext2_filsys fs, ext2_ino_t ino, int inuse);$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int inuse)
ext2fs_inode_alloc_stats2	libmke2fs/ext2fs.h	/^void ext2fs_inode_alloc_stats2(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, int inuse, int isdir)
ext2fs_inode_bitmap	libmke2fs/ext2fs.h	/^typedef struct ext2fs_struct_generic_bitmap *ext2fs_inode_bitmap;$/;"	t	typeref:struct:ext2fs_struct_generic_bitmap
ext2fs_inode_bitmap_loc	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_inode_bitmap_loc(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_inode_bitmap_loc_set	libmke2fs/ext2fs.h	/^extern void ext2fs_inode_bitmap_loc_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, blk64_t blk)
ext2fs_inode_data_blocks	libmke2fs/ext2fs.h	/^_INLINE_ blk_t ext2fs_inode_data_blocks(ext2_filsys fs,$/;"	f	signature:(ext2_filsys fs, struct ext2_inode *inode)
ext2fs_inode_data_blocks	libmke2fs/ext2fs.h	/^extern blk_t ext2fs_inode_data_blocks(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode)
ext2fs_inode_data_blocks2	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_inode_data_blocks2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode)
ext2fs_inode_has_valid_blocks	libmke2fs/ext2fs.h	/^extern int ext2fs_inode_has_valid_blocks(struct ext2_inode *inode);$/;"	p	signature:(struct ext2_inode *inode)
ext2fs_inode_has_valid_blocks2	libmke2fs/ext2fs.h	/^extern int ext2fs_inode_has_valid_blocks2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode)
ext2fs_inode_i_blocks	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_inode_i_blocks(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode *inode)
ext2fs_inode_io_intern	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_inode_io_intern(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, char **name)
ext2fs_inode_io_intern2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_inode_io_intern2(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, char **name)
ext2fs_inode_scan_flags	libmke2fs/ext2fs.h	/^extern int ext2fs_inode_scan_flags(ext2_inode_scan scan, int set_flags,$/;"	p	signature:(ext2_inode_scan scan, int set_flags, int clear_flags)
ext2fs_inode_scan_goto_blockgroup	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_inode_scan_goto_blockgroup(ext2_inode_scan scan,$/;"	p	signature:(ext2_inode_scan scan, int group)
ext2fs_inode_table_loc	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_inode_table_loc(ext2_filsys fs, dgrp_t group);$/;"	p	signature:(ext2_filsys fs, dgrp_t group)
ext2fs_inode_table_loc_set	libmke2fs/ext2fs.h	/^extern void ext2fs_inode_table_loc_set(ext2_filsys fs, dgrp_t group,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, blk64_t blk)
ext2fs_link	libmke2fs/ext2fs.h	/^errcode_t ext2fs_link(ext2_filsys fs, ext2_ino_t dir, const char *name,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, const char *name, ext2_ino_t ino, int flags)
ext2fs_lookup	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_lookup(ext2_filsys fs, ext2_ino_t dir, const char *name,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, const char *name, int namelen, char *buf, ext2_ino_t *inode)
ext2fs_make_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_make_generic_bitmap(errcode_t magic, ext2_filsys fs,$/;"	p	signature:(errcode_t magic, ext2_filsys fs, __u32 start, __u32 end, __u32 real_end, const char *descr, char *init_map, ext2fs_generic_bitmap *ret)
ext2fs_map_cluster_block	libmke2fs/ext2fs.h	/^errcode_t ext2fs_map_cluster_block(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, blk64_t lblk, blk64_t *pblk)
ext2fs_mark_bb_dirty	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_mark_bb_dirty(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_mark_bb_dirty	libmke2fs/ext2fs.h	/^extern void ext2fs_mark_bb_dirty(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mark_changed	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_mark_changed(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_mark_changed	libmke2fs/ext2fs.h	/^extern void ext2fs_mark_changed(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mark_generic_bmap	libmke2fs/ext2fsP.h	/^extern int ext2fs_mark_generic_bmap(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u64 arg)
ext2fs_mark_ib_dirty	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_mark_ib_dirty(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_mark_ib_dirty	libmke2fs/ext2fs.h	/^extern void ext2fs_mark_ib_dirty(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mark_super_dirty	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_mark_super_dirty(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_mark_super_dirty	libmke2fs/ext2fs.h	/^extern void ext2fs_mark_super_dirty(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mark_valid	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_mark_valid(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_mark_valid	libmke2fs/ext2fs.h	/^extern void ext2fs_mark_valid(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mem_is_zero	libmke2fs/ext2fsP.h	/^extern int ext2fs_mem_is_zero(const char *mem, size_t len);$/;"	p	signature:(const char *mem, size_t len)
ext2fs_mkdir	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_mkdir(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t inum,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t inum, const char *name)
ext2fs_mmp_clear	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_clear(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mmp_init	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_init(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mmp_new_seq	libmke2fs/ext2fs.h	/^unsigned ext2fs_mmp_new_seq(void);$/;"	p	signature:(void)
ext2fs_mmp_read	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_read(ext2_filsys fs, blk64_t mmp_blk, void *buf);$/;"	p	signature:(ext2_filsys fs, blk64_t mmp_blk, void *buf)
ext2fs_mmp_start	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_start(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mmp_stop	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_stop(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mmp_update	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_update(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_mmp_write	libmke2fs/ext2fs.h	/^errcode_t ext2fs_mmp_write(ext2_filsys fs, blk64_t mmp_blk, void *buf);$/;"	p	signature:(ext2_filsys fs, blk64_t mmp_blk, void *buf)
ext2fs_namei	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_namei(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd, const char *name, ext2_ino_t *inode)
ext2fs_namei_follow	libmke2fs/ext2fs.h	/^errcode_t ext2fs_namei_follow(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t root, ext2_ino_t cwd, const char *name, ext2_ino_t *inode)
ext2fs_native_flag	libmke2fs/ext2fs.h	/^int ext2fs_native_flag(void);$/;"	p	signature:(void)
ext2fs_needs_large_file_feature	libmke2fs/ext2fs.h	/^static inline int ext2fs_needs_large_file_feature(unsigned long long file_size)$/;"	f	signature:(unsigned long long file_size)
ext2fs_new_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_new_block(ext2_filsys fs, blk_t goal,$/;"	p	signature:(ext2_filsys fs, blk_t goal, ext2fs_block_bitmap map, blk_t *ret)
ext2fs_new_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_new_block2(ext2_filsys fs, blk64_t goal,$/;"	p	signature:(ext2_filsys fs, blk64_t goal, ext2fs_block_bitmap map, blk64_t *ret)
ext2fs_new_dir_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_new_dir_block(ext2_filsys fs, ext2_ino_t dir_ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir_ino, ext2_ino_t parent_ino, char **block)
ext2fs_new_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_new_inode(ext2_filsys fs, ext2_ino_t dir, int mode,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, int mode, ext2fs_inode_bitmap map, ext2_ino_t *ret)
ext2fs_numeric_progress_close	libmke2fs/ext2fsP.h	/^extern void ext2fs_numeric_progress_close(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2fs_numeric_progress_struct * progress, const char *message)
ext2fs_numeric_progress_init	libmke2fs/ext2fsP.h	/^extern void ext2fs_numeric_progress_init(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2fs_numeric_progress_struct * progress, const char *label, __u64 max)
ext2fs_numeric_progress_struct	libmke2fs/ext2fsP.h	/^struct ext2fs_numeric_progress_struct {$/;"	s
ext2fs_numeric_progress_struct::log_max	libmke2fs/ext2fsP.h	/^	int		log_max;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
ext2fs_numeric_progress_struct::max	libmke2fs/ext2fsP.h	/^	__u64		max;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
ext2fs_numeric_progress_struct::skip_progress	libmke2fs/ext2fsP.h	/^	int		skip_progress;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
ext2fs_numeric_progress_update	libmke2fs/ext2fsP.h	/^extern void ext2fs_numeric_progress_update(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, struct ext2fs_numeric_progress_struct * progress, __u64 val)
ext2fs_open	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_open(const char *name, int flags, int superblock,$/;"	p	signature:(const char *name, int flags, int superblock, unsigned int block_size, io_manager manager, ext2_filsys *ret_fs)
ext2fs_open2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_open2(const char *name, const char *io_options,$/;"	p	signature:(const char *name, const char *io_options, int flags, int superblock, unsigned int block_size, io_manager manager, ext2_filsys *ret_fs)
ext2fs_open_file	libmke2fs/ext2fs.h	/^extern int ext2fs_open_file(const char *pathname, int flags, mode_t mode);$/;"	p	signature:(const char *pathname, int flags, mode_t mode)
ext2fs_open_inode_scan	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_open_inode_scan(ext2_filsys fs, int buffer_blocks,$/;"	p	signature:(ext2_filsys fs, int buffer_blocks, ext2_inode_scan *ret_scan)
ext2fs_parse_version_string	libmke2fs/ext2fs.h	/^extern int ext2fs_parse_version_string(const char *ver_string);$/;"	p	signature:(const char *ver_string)
ext2fs_process_dir_block	libmke2fs/ext2fsP.h	/^extern int ext2fs_process_dir_block(ext2_filsys  	fs,$/;"	p	signature:(ext2_filsys fs, blk64_t *blocknr, e2_blkcnt_t blockcnt, blk64_t ref_block, int ref_offset, void *priv_data)
ext2fs_punch	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_punch(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode *inode, char *block_buf, blk64_t start, blk64_t end)
ext2fs_r_blocks_count	libmke2fs/ext2fs.h	/^extern blk64_t ext2fs_r_blocks_count(struct ext2_super_block *super);$/;"	p	signature:(struct ext2_super_block *super)
ext2fs_r_blocks_count_add	libmke2fs/ext2fs.h	/^extern void ext2fs_r_blocks_count_add(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_r_blocks_count_set	libmke2fs/ext2fs.h	/^extern void ext2fs_r_blocks_count_set(struct ext2_super_block *super,$/;"	p	signature:(struct ext2_super_block *super, blk64_t blk)
ext2fs_read_bb_FILE	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_bb_FILE(ext2_filsys fs, FILE *f,$/;"	p	signature:(ext2_filsys fs, FILE *f, ext2_badblocks_list *bb_list, void (*invalid)(ext2_filsys fs, blk_t blk))
ext2fs_read_bb_FILE2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_bb_FILE2(ext2_filsys fs, FILE *f,$/;"	p	signature:(ext2_filsys fs, FILE *f, ext2_badblocks_list *bb_list, void *priv_data, void (*invalid)(ext2_filsys fs, blk_t blk, char *badstr, void *priv_data))
ext2fs_read_bb_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_bb_inode(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_badblocks_list *bb_list)
ext2fs_read_bitmaps	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_bitmaps(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_read_block_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_block_bitmap(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_read_dir_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_dir_block(ext2_filsys fs, blk_t block,$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf)
ext2fs_read_dir_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_dir_block2(ext2_filsys fs, blk_t block,$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf, int flags)
ext2fs_read_dir_block3	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_dir_block3(ext2_filsys fs, blk64_t block,$/;"	p	signature:(ext2_filsys fs, blk64_t block, void *buf, int flags)
ext2fs_read_ext_attr	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_ext_attr(ext2_filsys fs, blk_t block, void *buf);$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf)
ext2fs_read_ext_attr2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_ext_attr2(ext2_filsys fs, blk64_t block,$/;"	p	signature:(ext2_filsys fs, blk64_t block, void *buf)
ext2fs_read_ind_block	libmke2fs/ext2fs.h	/^errcode_t ext2fs_read_ind_block(ext2_filsys fs, blk_t blk, void *buf);$/;"	p	signature:(ext2_filsys fs, blk_t blk, void *buf)
ext2fs_read_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_inode (ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode * inode)
ext2fs_read_inode_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_inode_bitmap (ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_read_inode_full	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_read_inode_full(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode * inode, int bufsize)
ext2fs_reserve_super_and_bgd	libmke2fs/ext2fs.h	/^extern int ext2fs_reserve_super_and_bgd(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, ext2fs_block_bitmap bmap)
ext2fs_resize_block_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_block_bitmap(__u32 new_end, __u32 new_real_end,$/;"	p	signature:(__u32 new_end, __u32 new_real_end, ext2fs_block_bitmap bmap)
ext2fs_resize_block_bitmap2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_block_bitmap2(__u64 new_end,$/;"	p	signature:(__u64 new_end, __u64 new_real_end, ext2fs_block_bitmap bmap)
ext2fs_resize_generic_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_generic_bitmap(errcode_t magic,$/;"	p	signature:(errcode_t magic, __u32 new_end, __u32 new_real_end, ext2fs_generic_bitmap bmap)
ext2fs_resize_generic_bmap	libmke2fs/ext2fs.h	/^errcode_t ext2fs_resize_generic_bmap(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, __u64 new_end, __u64 new_real_end)
ext2fs_resize_generic_bmap	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_resize_generic_bmap(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, __u64 new_end, __u64 new_real_end)
ext2fs_resize_inode_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_inode_bitmap(__u32 new_end, __u32 new_real_end,$/;"	p	signature:(__u32 new_end, __u32 new_real_end, ext2fs_inode_bitmap bmap)
ext2fs_resize_inode_bitmap2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_inode_bitmap2(__u64 new_end,$/;"	p	signature:(__u64 new_end, __u64 new_real_end, ext2fs_inode_bitmap bmap)
ext2fs_resize_mem	libmke2fs/ext2fs.h	/^_INLINE_ errcode_t ext2fs_resize_mem(unsigned long EXT2FS_ATTR((unused)) old_size,$/;"	f	signature:(unsigned long EXT2FS_ATTR((unused)) old_size, unsigned long size, void *ptr)
ext2fs_resize_mem	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_resize_mem(unsigned long old_size,$/;"	p	signature:(unsigned long old_size, unsigned long size, void *ptr)
ext2fs_rewrite_to_io	libmke2fs/ext2fs.h	/^errcode_t ext2fs_rewrite_to_io(ext2_filsys fs, io_channel new_io);$/;"	p	signature:(ext2_filsys fs, io_channel new_io)
ext2fs_set_alloc_block_callback	libmke2fs/ext2fs.h	/^extern void ext2fs_set_alloc_block_callback(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, errcode_t (*func)(ext2_filsys fs, blk64_t goal, blk64_t *ret), errcode_t (**old)(ext2_filsys fs, blk64_t goal, blk64_t *ret))
ext2fs_set_block_alloc_stats_callback	libmke2fs/ext2fs.h	/^extern void ext2fs_set_block_alloc_stats_callback(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, void (*func)(ext2_filsys fs, blk64_t blk, int inuse), void (**old)(ext2_filsys fs, blk64_t blk, int inuse))
ext2fs_set_block_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_block_bitmap_range(ext2fs_block_bitmap bmap,$/;"	p	signature:(ext2fs_block_bitmap bmap, blk_t start, unsigned int num, void *in)
ext2fs_set_block_bitmap_range2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_block_bitmap_range2(ext2fs_block_bitmap bmap,$/;"	p	signature:(ext2fs_block_bitmap bmap, blk64_t start, size_t num, void *in)
ext2fs_set_data_io	libmke2fs/ext2fs.h	/^errcode_t ext2fs_set_data_io(ext2_filsys fs, io_channel new_io);$/;"	p	signature:(ext2_filsys fs, io_channel new_io)
ext2fs_set_dir_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_dir_block(ext2_dblist dblist, ext2_ino_t ino,$/;"	p	signature:(ext2_dblist dblist, ext2_ino_t ino, blk_t blk, int blockcnt)
ext2fs_set_dir_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_dir_block2(ext2_dblist dblist, ext2_ino_t ino,$/;"	p	signature:(ext2_dblist dblist, ext2_ino_t ino, blk64_t blk, e2_blkcnt_t blockcnt)
ext2fs_set_gdt_csum	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_gdt_csum(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_set_generic_bitmap_padding	libmke2fs/ext2fs.h	/^extern void ext2fs_set_generic_bitmap_padding(ext2fs_generic_bitmap map);$/;"	p	signature:(ext2fs_generic_bitmap map)
ext2fs_set_generic_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_generic_bitmap_range(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, errcode_t magic, __u32 start, __u32 num, void *in)
ext2fs_set_generic_bmap_padding	libmke2fs/ext2fs.h	/^void ext2fs_set_generic_bmap_padding(ext2fs_generic_bitmap bmap);$/;"	p	signature:(ext2fs_generic_bitmap bmap)
ext2fs_set_generic_bmap_range	libmke2fs/ext2fs.h	/^errcode_t ext2fs_set_generic_bmap_range(ext2fs_generic_bitmap bmap,$/;"	p	signature:(ext2fs_generic_bitmap bmap, __u64 start, unsigned int num, void *in)
ext2fs_set_generic_bmap_range	libmke2fs/ext2fsP.h	/^extern errcode_t ext2fs_set_generic_bmap_range(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u64 start, unsigned int num, void *in)
ext2fs_set_inode_bitmap_range	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_inode_bitmap_range(ext2fs_inode_bitmap bmap,$/;"	p	signature:(ext2fs_inode_bitmap bmap, ext2_ino_t start, unsigned int num, void *in)
ext2fs_set_inode_bitmap_range2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_inode_bitmap_range2(ext2fs_inode_bitmap bmap,$/;"	p	signature:(ext2fs_inode_bitmap bmap, __u64 start, size_t num, void *in)
ext2fs_set_inode_callback	libmke2fs/ext2fs.h	/^extern void ext2fs_set_inode_callback$/;"	p	signature:(ext2_inode_scan scan, errcode_t (*done_group)(ext2_filsys fs, ext2_inode_scan scan, dgrp_t group, void * priv_data), void *done_group_data)
ext2fs_set_rec_len	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_set_rec_len(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, unsigned int len, struct ext2_dir_entry *dirent)
ext2fs_stat	libmke2fs/ext2fs.h	/^extern int ext2fs_stat(const char *path, ext2fs_struct_stat *buf);$/;"	p	signature:(const char *path, ext2fs_struct_stat *buf)
ext2fs_struct_stat	libmke2fs/ext2fs.h	/^typedef struct stat ext2fs_struct_stat;$/;"	t	typeref:struct:stat
ext2fs_struct_stat	libmke2fs/ext2fs.h	/^typedef struct stat64 ext2fs_struct_stat;$/;"	t	typeref:struct:stat64
ext2fs_super_and_bgd_loc	libmke2fs/ext2fs.h	/^extern int ext2fs_super_and_bgd_loc(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, blk_t *ret_super_blk, blk_t *ret_old_desc_blk, blk_t *ret_new_desc_blk, int *ret_meta_bg)
ext2fs_super_and_bgd_loc2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_super_and_bgd_loc2(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, dgrp_t group, blk64_t *ret_super_blk, blk64_t *ret_old_desc_blk, blk64_t *ret_new_desc_blk, blk_t *ret_used_blks)
ext2fs_swap_ext_attr	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_ext_attr(char *to, char *from, int bufsize,$/;"	p	signature:(char *to, char *from, int bufsize, int has_header)
ext2fs_swap_ext_attr_entry	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_ext_attr_entry(struct ext2_ext_attr_entry *to_entry,$/;"	p	signature:(struct ext2_ext_attr_entry *to_entry, struct ext2_ext_attr_entry *from_entry)
ext2fs_swap_ext_attr_header	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_ext_attr_header(struct ext2_ext_attr_header *to_header,$/;"	p	signature:(struct ext2_ext_attr_header *to_header, struct ext2_ext_attr_header *from_hdr)
ext2fs_swap_group_desc	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_group_desc(struct ext2_group_desc *gdp);$/;"	p	signature:(struct ext2_group_desc *gdp)
ext2fs_swap_group_desc2	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_group_desc2(ext2_filsys, struct ext2_group_desc *gdp);$/;"	p	signature:(ext2_filsys, struct ext2_group_desc *gdp)
ext2fs_swap_inode	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_inode(ext2_filsys fs,struct ext2_inode *t,$/;"	p	signature:(ext2_filsys fs,struct ext2_inode *t, struct ext2_inode *f, int hostorder)
ext2fs_swap_inode_full	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_inode_full(ext2_filsys fs, struct ext2_inode_large *t,$/;"	p	signature:(ext2_filsys fs, struct ext2_inode_large *t, struct ext2_inode_large *f, int hostorder, int bufsize)
ext2fs_swap_mmp	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_mmp(struct mmp_struct *mmp);$/;"	p	signature:(struct mmp_struct *mmp)
ext2fs_swap_super	libmke2fs/ext2fs.h	/^extern void ext2fs_swap_super(struct ext2_super_block * super);$/;"	p	signature:(struct ext2_super_block * super)
ext2fs_symlink	libmke2fs/ext2fs.h	/^errcode_t ext2fs_symlink(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t parent, ext2_ino_t ino, const char *name, char *target)
ext2fs_sync_device	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_sync_device(int fd, int flushb);$/;"	p	signature:(int fd, int flushb)
ext2fs_test_bb_dirty	libmke2fs/ext2fs.h	/^_INLINE_ int ext2fs_test_bb_dirty(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_test_bb_dirty	libmke2fs/ext2fs.h	/^extern int ext2fs_test_bb_dirty(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_test_changed	libmke2fs/ext2fs.h	/^_INLINE_ int ext2fs_test_changed(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_test_changed	libmke2fs/ext2fs.h	/^extern int ext2fs_test_changed(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_test_generic_bmap	libmke2fs/ext2fsP.h	/^extern int ext2fs_test_generic_bmap(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u64 arg)
ext2fs_test_ib_dirty	libmke2fs/ext2fs.h	/^_INLINE_ int ext2fs_test_ib_dirty(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_test_ib_dirty	libmke2fs/ext2fs.h	/^extern int ext2fs_test_ib_dirty(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_test_valid	libmke2fs/ext2fs.h	/^_INLINE_ int ext2fs_test_valid(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_test_valid	libmke2fs/ext2fs.h	/^extern int ext2fs_test_valid(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_u32_copy	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_u32_copy(ext2_u32_list src, ext2_u32_list *dest);$/;"	p	signature:(ext2_u32_list src, ext2_u32_list *dest)
ext2fs_u32_list_add	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_u32_list_add(ext2_u32_list bb, __u32 blk);$/;"	p	signature:(ext2_u32_list bb, __u32 blk)
ext2fs_u32_list_count	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_count(ext2_u32_list bb);$/;"	p	signature:(ext2_u32_list bb)
ext2fs_u32_list_create	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_u32_list_create(ext2_u32_list *ret, int size);$/;"	p	signature:(ext2_u32_list *ret, int size)
ext2fs_u32_list_del	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_del(ext2_u32_list bb, __u32 blk);$/;"	p	signature:(ext2_u32_list bb, __u32 blk)
ext2fs_u32_list_equal	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_equal(ext2_u32_list bb1, ext2_u32_list bb2);$/;"	p	signature:(ext2_u32_list bb1, ext2_u32_list bb2)
ext2fs_u32_list_find	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_find(ext2_u32_list bb, __u32 blk);$/;"	p	signature:(ext2_u32_list bb, __u32 blk)
ext2fs_u32_list_free	libmke2fs/ext2fs.h	/^extern void ext2fs_u32_list_free(ext2_u32_list bb);$/;"	p	signature:(ext2_u32_list bb)
ext2fs_u32_list_iterate	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_iterate(ext2_u32_iterate iter, blk_t *blk);$/;"	p	signature:(ext2_u32_iterate iter, blk_t *blk)
ext2fs_u32_list_iterate_begin	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_u32_list_iterate_begin(ext2_u32_list bb,$/;"	p	signature:(ext2_u32_list bb, ext2_u32_iterate *ret)
ext2fs_u32_list_iterate_end	libmke2fs/ext2fs.h	/^extern void ext2fs_u32_list_iterate_end(ext2_u32_iterate iter);$/;"	p	signature:(ext2_u32_iterate iter)
ext2fs_u32_list_test	libmke2fs/ext2fs.h	/^extern int ext2fs_u32_list_test(ext2_u32_list bb, blk_t blk);$/;"	p	signature:(ext2_u32_list bb, blk_t blk)
ext2fs_unlink	libmke2fs/ext2fs.h	/^errcode_t ext2fs_unlink(ext2_filsys fs, ext2_ino_t dir, const char *name,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t dir, const char *name, ext2_ino_t ino, int flags)
ext2fs_unmark_generic_bmap	libmke2fs/ext2fsP.h	/^extern int ext2fs_unmark_generic_bmap(ext2fs_generic_bitmap bitmap,$/;"	p	signature:(ext2fs_generic_bitmap bitmap, __u64 arg)
ext2fs_unmark_valid	libmke2fs/ext2fs.h	/^_INLINE_ void ext2fs_unmark_valid(ext2_filsys fs)$/;"	f	signature:(ext2_filsys fs)
ext2fs_unmark_valid	libmke2fs/ext2fs.h	/^extern void ext2fs_unmark_valid(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_update_bb_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_update_bb_inode(ext2_filsys fs,$/;"	p	signature:(ext2_filsys fs, ext2_badblocks_list bb_list)
ext2fs_update_dynamic_rev	libmke2fs/ext2fs.h	/^extern void ext2fs_update_dynamic_rev(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_warn_bitmap32	libmke2fs/ext2fsP.h	/^extern void ext2fs_warn_bitmap32(ext2fs_generic_bitmap bitmap,const char *func);$/;"	p	signature:(ext2fs_generic_bitmap bitmap,const char *func)
ext2fs_write_bb_FILE	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_bb_FILE(ext2_badblocks_list bb_list,$/;"	p	signature:(ext2_badblocks_list bb_list, unsigned int flags, FILE *f)
ext2fs_write_bitmaps	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_bitmaps(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_write_block_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_block_bitmap (ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_write_dir_block	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_dir_block(ext2_filsys fs, blk_t block,$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf)
ext2fs_write_dir_block2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_dir_block2(ext2_filsys fs, blk_t block,$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf, int flags)
ext2fs_write_dir_block3	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_dir_block3(ext2_filsys fs, blk64_t block,$/;"	p	signature:(ext2_filsys fs, blk64_t block, void *buf, int flags)
ext2fs_write_ext_attr	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_ext_attr(ext2_filsys fs, blk_t block,$/;"	p	signature:(ext2_filsys fs, blk_t block, void *buf)
ext2fs_write_ext_attr2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_ext_attr2(ext2_filsys fs, blk64_t block,$/;"	p	signature:(ext2_filsys fs, blk64_t block, void *buf)
ext2fs_write_ind_block	libmke2fs/ext2fs.h	/^errcode_t ext2fs_write_ind_block(ext2_filsys fs, blk_t blk, void *buf);$/;"	p	signature:(ext2_filsys fs, blk_t blk, void *buf)
ext2fs_write_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_inode(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode * inode)
ext2fs_write_inode_bitmap	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_inode_bitmap(ext2_filsys fs);$/;"	p	signature:(ext2_filsys fs)
ext2fs_write_inode_full	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_inode_full(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode * inode, int bufsize)
ext2fs_write_new_inode	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_write_new_inode(ext2_filsys fs, ext2_ino_t ino,$/;"	p	signature:(ext2_filsys fs, ext2_ino_t ino, struct ext2_inode * inode)
ext2fs_zero_blocks	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_zero_blocks(ext2_filsys fs, blk_t blk, int num,$/;"	p	signature:(ext2_filsys fs, blk_t blk, int num, blk_t *ret_blk, int *ret_count)
ext2fs_zero_blocks2	libmke2fs/ext2fs.h	/^extern errcode_t ext2fs_zero_blocks2(ext2_filsys fs, blk64_t blk, int num,$/;"	p	signature:(ext2_filsys fs, blk64_t blk, int num, blk64_t *ret_blk, int *ret_count)
ext_opts	libmke2fs/mke2fs.h	/^	struct extended_opt ext_opts;$/;"	m	struct:e2fs_cfg	typeref:struct:e2fs_cfg::extended_opt	access:public
extended_opt	libmke2fs/mke2fs.h	/^struct extended_opt {$/;"	s
extended_opt::desc_size	libmke2fs/mke2fs.h	/^	__u16 desc_size;$/;"	m	struct:extended_opt	access:public
extended_opt::discard	libmke2fs/mke2fs.h	/^	int discard;	$/;"	m	struct:extended_opt	access:public
extended_opt::mmp_update_interval	libmke2fs/mke2fs.h	/^	__u16 mmp_update_interval;$/;"	m	struct:extended_opt	access:public
extended_opt::stride	libmke2fs/mke2fs.h	/^	__u16 stride;$/;"	m	struct:extended_opt	access:public
extended_opt::stripe_width	libmke2fs/mke2fs.h	/^	__u32 stripe_width;$/;"	m	struct:extended_opt	access:public
extended_opt::test_fs	libmke2fs/mke2fs.h	/^	int test_fs;$/;"	m	struct:extended_opt	access:public
extension_rom_resource	libmdadm/probe_roms.c	/^static struct resource extension_rom_resource = {$/;"	v	typeref:struct:resource	file:
extent	libmdadm/super-ddf.c	/^struct extent {$/;"	s	file:
extent	libmdadm/super-intel.c	/^struct extent {$/;"	s	file:
extent::size	libmdadm/super-ddf.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
extent::size	libmdadm/super-intel.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
extent::start	libmdadm/super-ddf.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
extent::start	libmdadm/super-intel.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
extent_cnt	libmdadm/super-intel.c	/^		int extent_cnt;$/;"	m	struct:intel_super::dl	file:	access:public
external	libmdadm/mdadm.h	/^	int external;$/;"	m	struct:superswitch	access:public
fail	libmdadm/Grow.c	/^static void fail(char *msg)$/;"	f	file:	signature:(char *msg)
failed	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
failed_disk_num	libmdadm/super-intel.c	/^	__u8  failed_disk_num;  \/* valid only when state is degraded *\/$/;"	m	struct:imsm_map	file:	access:public
failed_disks	libmdadm/md_p.h	/^	__u32 failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
failed_disks	libmdadm/md_u.h	/^	int failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
family_num	libmdadm/super-intel.c	/^	__u32 family_num;		\/* 0x28 - 0x2B Checksum from first time this config was written *\/$/;"	m	struct:imsm_super	file:	access:public
family_num	libmdadm/super-intel.c	/^	__u32 family_num;	    \/* Family number of MPB$/;"	m	struct:migr_record	file:	access:public
faultylayout	libmdadm/maps.c	/^mapping_t faultylayout[] = {$/;"	v
fd	libmdadm/super-ddf.c	/^				int fd;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
fd	libmdadm/super-intel.c	/^		int fd;$/;"	m	struct:intel_super::dl	file:	access:public
fd	libmdadm/super0.c	/^	int fd;$/;"	m	struct:devinfo	file:	access:public
fd	libmdadm/super1.c	/^	int fd;$/;"	m	struct:align_fd	file:	access:public
fd	libmdadm/super1.c	/^	int fd;$/;"	m	struct:devinfo	file:	access:public
fd2devname	libmdadm/super-intel.c	/^static void fd2devname(int fd, char *name)$/;"	f	file:	signature:(int fd, char *name)
fd2devname	libmdadm/super-intel.c	/^static void fd2devname(int fd, char *name);$/;"	p	file:	signature:(int fd, char *name)
fd2devnm	libmdadm/lib.c	/^char *fd2devnm(int fd)$/;"	f	signature:(int fd)
fd2devnm	libmdadm/mdadm.h	/^extern char *fd2devnm(int fd);$/;"	p	signature:(int fd)
feature_map	libmdadm/super1.c	/^	__u32	feature_map;	\/* 0 for now *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
figure_journal_size	libmke2fs/util.c	/^unsigned int figure_journal_size(int size, ext2_filsys fs)$/;"	f	signature:(int size, ext2_filsys fs)
figure_journal_size	libmke2fs/util.h	/^extern unsigned int figure_journal_size(int size, ext2_filsys fs);$/;"	p	signature:(int size, ext2_filsys fs)
file	libmdadm/bitmap.h	/^	struct file *file; \/* backing disk file *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::file	access:public
file	libmke2fs/profile.c	/^	prf_file_t		file;$/;"	m	struct:profile_iterator	file:	access:public
file_pages	libmdadm/bitmap.h	/^	unsigned long file_pages; \/* number of pages in the file *\/$/;"	m	struct:bitmap	access:public
file_path	libmdadm/bitmap.h	/^char *file_path(struct file *file, char *buf, int count);$/;"	p	signature:(struct file *file, char *buf, int count)
file_serial	libmke2fs/profile.c	/^	int			file_serial;$/;"	m	struct:profile_iterator	file:	access:public
filemap	libmdadm/bitmap.h	/^	struct page **filemap; \/* list of cache pages for the file *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::page	access:public
filemap_attr	libmdadm/bitmap.h	/^	unsigned long *filemap_attr; \/* attributes associated w\/ filemap pages *\/$/;"	m	struct:bitmap	access:public
filespec	libmke2fs/profile.c	/^	char		*filespec;$/;"	m	struct:_prf_file_t	file:	access:public
fill	libmdadm/super-intel.c	/^	__u8 fill[1];			\/* 0x3B *\/$/;"	m	struct:imsm_super	file:	access:public
fillbuf	libmdadm/sha1.c	/^static const unsigned char fillbuf[64] = { 0x80, 0 \/* , 0, 0, ...  *\/ };$/;"	v	file:
filler	libmdadm/super-intel.c	/^	__u32 filler[4];	\/* expansion area *\/$/;"	m	struct:imsm_map	file:	access:public
filler	libmdadm/super-intel.c	/^	__u32 filler[4];$/;"	m	struct:imsm_vol	file:	access:public
filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_DEV_FILLERS];$/;"	m	struct:imsm_dev	file:	access:public
filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_DISK_FILLERS]; \/* 0xF5 - 0x107 MPB_DISK_FILLERS for future expansion *\/$/;"	m	struct:imsm_disk	file:	access:public
filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_FILLERS];	\/* 0x4C - 0xD7 RAID_MPB_FILLERS *\/$/;"	m	struct:imsm_super	file:	access:public
final	libmke2fs/profile.c	/^	unsigned int final:1;		\/* Indicate don't search next file *\/$/;"	m	struct:profile_node	file:	access:public
find_device	libmdadm/monitor.c	/^find_device(struct active_array *a, int major, int minor)$/;"	f	file:	signature:(struct active_array *a, int major, int minor)
find_disk_attached_hba	libmdadm/super-intel.c	/^static struct sys_dev* find_disk_attached_hba(int fd, const char *devname)$/;"	f	file:	signature:(int fd, const char *devname)
find_driver_devices	libmdadm/platform-intel.c	/^struct sys_dev *find_driver_devices(const char *bus, const char *driver)$/;"	f	signature:(const char *bus, const char *driver)
find_driver_devices	libmdadm/platform-intel.h	/^struct sys_dev *find_driver_devices(const char *bus, const char *driver);$/;"	p	signature:(const char *bus, const char *driver)
find_free_devnm	libmdadm/mdadm.h	/^extern char *find_free_devnm(int use_partitions);$/;"	p	signature:(int use_partitions)
find_free_devnm	libmdadm/mdopen.c	/^char *find_free_devnm(int use_partitions)$/;"	f	signature:(int use_partitions)
find_imsm_capability	libmdadm/platform-intel.c	/^const struct imsm_orom *find_imsm_capability(enum sys_dev_type hba_id)$/;"	f	signature:(enum sys_dev_type hba_id)
find_imsm_capability	libmdadm/platform-intel.h	/^const struct imsm_orom *find_imsm_capability(enum sys_dev_type hba_id);$/;"	p	signature:(enum sys_dev_type hba_id)
find_imsm_efi	libmdadm/platform-intel.c	/^const struct imsm_orom *find_imsm_efi(enum sys_dev_type hba_id)$/;"	f	signature:(enum sys_dev_type hba_id)
find_imsm_hba_orom	libmdadm/platform-intel.c	/^static const struct imsm_orom *find_imsm_hba_orom(enum sys_dev_type hba_id)$/;"	f	file:	signature:(enum sys_dev_type hba_id)
find_imsm_orom	libmdadm/platform-intel.c	/^const struct imsm_orom *find_imsm_orom(void)$/;"	f	signature:(void)
find_imsm_orom	libmdadm/platform-intel.h	/^const struct imsm_orom *find_imsm_orom(void);$/;"	p	signature:(void)
find_index_in_bvd	libmdadm/super-ddf.c	/^static int find_index_in_bvd(const struct ddf_super *ddf,$/;"	f	file:	signature:(const struct ddf_super *ddf, const struct vd_config *conf, unsigned int n, unsigned int *n_bvd)
find_intel_devices	libmdadm/platform-intel.c	/^struct sys_dev *find_intel_devices(void)$/;"	f	signature:(void)
find_intel_devices	libmdadm/platform-intel.h	/^struct sys_dev *find_intel_devices(void);$/;"	p	signature:(void)
find_intel_hba	libmdadm/super-intel.c	/^static struct intel_hba * find_intel_hba(struct intel_hba *hba, struct sys_dev *device)$/;"	f	file:	signature:(struct intel_hba *hba, struct sys_dev *device)
find_intel_hba_capability	libmdadm/super-intel.c	/^static int find_intel_hba_capability(int fd, struct intel_super *super, char *devname)$/;"	f	file:	signature:(int fd, struct intel_super *super, char *devname)
find_intel_hba_capability	libmdadm/super-intel.c	/^static int find_intel_hba_capability(int fd, struct intel_super *super,$/;"	p	file:	signature:(int fd, struct intel_super *super, char *devname)
find_missing	libmdadm/super-intel.c	/^static int find_missing(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
find_phys	libmdadm/super-ddf.c	/^static int find_phys(const struct ddf_super *ddf, be32 phys_refnum)$/;"	f	file:	signature:(const struct ddf_super *ddf, be32 phys_refnum)
find_reject	libmdadm/Incremental.c	/^static void find_reject(int mdfd, struct supertype *st, struct mdinfo *sra,$/;"	f	file:	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, int number, __u64 events, int verbose, char *array_name)
find_reject	libmdadm/Incremental.c	/^static void find_reject(int mdfd, struct supertype *st, struct mdinfo *sra,$/;"	p	file:	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, int number, __u64 events, int verbose, char *array_name)
find_rule	libmdadm/policy.c	/^char *find_rule(struct rule *rule, char *rule_type)$/;"	f	signature:(struct rule *rule, char *rule_type)
find_size	libmdadm/super-intel.c	/^static unsigned long long find_size(struct extent *e, int *idx, int num_extents)$/;"	f	file:	signature:(struct extent *e, int *idx, int num_extents)
find_space	libmdadm/super-ddf.c	/^static unsigned long long find_space($/;"	f	file:	signature:( struct ddf_super *ddf, struct dl *dl, unsigned long long data_offset, unsigned long long *size)
find_unused_pde	libmdadm/super-ddf.c	/^static unsigned int find_unused_pde(const struct ddf_super *ddf)$/;"	f	file:	signature:(const struct ddf_super *ddf)
find_unused_vde	libmdadm/super-ddf.c	/^static unsigned int find_unused_vde(const struct ddf_super *ddf)$/;"	f	file:	signature:(const struct ddf_super *ddf)
find_vdcr	libmdadm/super-ddf.c	/^static struct vd_config *find_vdcr(struct ddf_super *ddf, unsigned int inst,$/;"	f	file:	signature:(struct ddf_super *ddf, unsigned int inst, unsigned int n, unsigned int *n_bvd, struct vcl **vcl)
find_vde_by_guid	libmdadm/super-ddf.c	/^static unsigned int find_vde_by_guid(const struct ddf_super *ddf,$/;"	f	file:	signature:(const struct ddf_super *ddf, const char *guid)
find_vde_by_name	libmdadm/super-ddf.c	/^static unsigned int find_vde_by_name(const struct ddf_super *ddf,$/;"	f	file:	signature:(const struct ddf_super *ddf, const char *name)
first_child	libmke2fs/profile.c	/^	struct profile_node *first_child;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
first_cyl	libmdadm/part.h	/^  __u8 first_cyl;$/;"	m	struct:MBR_part_record	access:public
first_file	libmke2fs/profile.c	/^	prf_file_t	first_file;$/;"	m	struct:_profile_t	file:	access:public
first_head	libmdadm/part.h	/^  __u8 first_head;$/;"	m	struct:MBR_part_record	access:public
first_lba	libmdadm/part.h	/^	__u64 first_lba;$/;"	m	struct:GPT	access:public
first_sect_lba	libmdadm/part.h	/^  __u32 first_sect_lba;$/;"	m	struct:MBR_part_record	access:public
first_sector	libmdadm/part.h	/^  __u8 first_sector;$/;"	m	struct:MBR_part_record	access:public
first_spare	libmdadm/super-ddf.c	/^	be64	first_spare;$/;"	m	struct:bad_block_log	file:	access:public
first_spare_lba	libmdadm/super-intel.c	/^	__u64 first_spare_lba;$/;"	m	struct:bbm_log	file:	access:public
fix_cluster_bg_counts	libmke2fs/mke2fs.c	/^static void fix_cluster_bg_counts(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
flags	libmdadm/bitmap.h	/^	unsigned long flags;$/;"	m	struct:bitmap	access:public
flags	libmdadm/util.c	/^	int flags;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
flags	libmke2fs/ext2fs.h	/^	int				flags;$/;"	m	struct:struct_ext2_filsys	access:public
flags	libmke2fs/ext2fsP.h	/^	int		flags;$/;"	m	struct:dir_context	access:public
flags	libmke2fs/profile.c	/^	int			flags;$/;"	m	struct:profile_iterator	file:	access:public
flags	libmke2fs/profile.c	/^	int		flags;	\/* r\/w, dirty *\/$/;"	m	struct:_prf_file_t	file:	access:public
flex_bg_size	libmke2fs/mke2fs.h	/^	unsigned long flex_bg_size;$/;"	m	struct:e2fs_cfg	access:public
fls	libmdadm/platform-intel.h	/^static inline int fls(int x)$/;"	f	signature:(int x)
flush_mdmon	libmdadm/msg.c	/^void flush_mdmon(char *container)$/;"	f	signature:(char *container)
flush_mdmon	libmdadm/msg.h	/^extern void flush_mdmon(char *container);$/;"	p	signature:(char *container)
flush_metadata_updates	libmdadm/mdadm.h	/^extern int flush_metadata_updates(struct supertype *st);$/;"	p	signature:(struct supertype *st)
flush_metadata_updates	libmdadm/util.c	/^int flush_metadata_updates(struct supertype *st)$/;"	f	signature:(struct supertype *st)
fmt_devname	libmdadm/mdadm.h	/^extern void fmt_devname(char *name, int num);$/;"	p	signature:(char *name, int num)
fname	libmdadm/config.c	/^struct fname {$/;"	s	file:
fname::name	libmdadm/config.c	/^	char name[];$/;"	m	struct:fname	file:	access:public
fname::next	libmdadm/config.c	/^	struct fname *next;$/;"	m	struct:fname	typeref:struct:fname::fname	file:	access:public
fname_from_uuid	libmdadm/mdadm.h	/^extern char *fname_from_uuid(struct supertype *st,$/;"	p	signature:(struct supertype *st, struct mdinfo *info, char *buf, char sep)
fname_from_uuid	libmdadm/util.c	/^char *fname_from_uuid(struct supertype *st, struct mdinfo *info, char *buf, char sep)$/;"	f	signature:(struct supertype *st, struct mdinfo *info, char *buf, char sep)
force	libmdadm/mdadm.h	/^	int	force;$/;"	m	struct:context	access:public
force	libmke2fs/mke2fs.c	/^static int	force;$/;"	v	file:
force	libmke2fs/mke2fs.h	/^	int force;$/;"	m	struct:e2fs_cfg	access:public
force_array	libmdadm/Assemble.c	/^static int force_array(struct mdinfo *content,$/;"	f	file:	signature:(struct mdinfo *content, struct devs *devices, int *best, int bestcnt, char *avail, int most_recent, struct supertype *st, struct context *c)
forced_guid	libmdadm/super-ddf.c	/^	__u8	forced_guid;	\/* set if guid was forced rather than magic *\/$/;"	m	struct:disk_data	file:	access:public
forced_ref	libmdadm/super-ddf.c	/^	__u8	forced_ref;	\/* set when above was not result of magic *\/$/;"	m	struct:disk_data	file:	access:public
foreignflag	libmdadm/super-ddf.c	/^	__u8	foreignflag;$/;"	m	struct:ddf_header	file:	access:public
forget_backup	libmdadm/Grow.c	/^static int forget_backup(int dests, int *destfd,$/;"	f	file:	signature:(int dests, int *destfd, unsigned long long *destoffsets, int part)
found	libmdadm/super-intel.c	/^	int   found;$/;"	m	struct:md_list	file:	access:public
fping_monitor	libmdadm/msg.c	/^int fping_monitor(int sfd)$/;"	f	signature:(int sfd)
fping_monitor	libmdadm/msg.h	/^extern int fping_monitor(int sock);$/;"	p	signature:(int sock)
fpopen	libmke2fs/mke2fs.c	/^extern FILE *fpopen(const char *cmd, const char *mode);$/;"	p	file:	signature:(const char *cmd, const char *mode)
fragsize	libmke2fs/ext2fs.h	/^	int				fragsize;$/;"	m	struct:struct_ext2_filsys	access:public
free_aa	libmdadm/managemon.c	/^static void free_aa(struct active_array *aa)$/;"	f	file:	signature:(struct active_array *aa)
free_devlist	libmdadm/super-intel.c	/^static void free_devlist(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
free_gpt	libmdadm/super-gpt.c	/^static void free_gpt(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_imsm	libmdadm/super-intel.c	/^static void free_imsm(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
free_imsm_disks	libmdadm/super-intel.c	/^static void free_imsm_disks(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
free_line	libmdadm/lib.c	/^void free_line(char *line)$/;"	f	signature:(char *line)
free_line	libmdadm/mdadm.h	/^extern void free_line(char *line);$/;"	p	signature:(char *line)
free_list	libmke2fs/profile.c	/^static void free_list(char **list)$/;"	f	file:	signature:(char **list)
free_mbr	libmdadm/super-mbr.c	/^static void free_mbr(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_mdstat	libmdadm/mdadm.h	/^extern void free_mdstat(struct mdstat_ent *ms);$/;"	p	signature:(struct mdstat_ent *ms)
free_mdstat	libmdadm/mdstat.c	/^void free_mdstat(struct mdstat_ent *ms)$/;"	f	signature:(struct mdstat_ent *ms)
free_member_devnames	libmdadm/mdstat.c	/^static void free_member_devnames(struct dev_member *m)$/;"	f	file:	signature:(struct dev_member *m)
free_super	libmdadm/mdadm.h	/^	void (*free_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
free_super0	libmdadm/super0.c	/^static void free_super0(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_super0	libmdadm/super0.c	/^static void free_super0(struct supertype *st);$/;"	p	file:	signature:(struct supertype *st)
free_super1	libmdadm/super1.c	/^static void free_super1(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_super1	libmdadm/super1.c	/^static void free_super1(struct supertype *st);$/;"	p	file:	signature:(struct supertype *st)
free_super_ddf	libmdadm/super-ddf.c	/^static void free_super_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_super_ddf	libmdadm/super-ddf.c	/^static void free_super_ddf(struct supertype *st);$/;"	p	file:	signature:(struct supertype *st)
free_super_imsm	libmdadm/super-intel.c	/^static void free_super_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
free_sys_dev	libmdadm/platform-intel.c	/^static void free_sys_dev(struct sys_dev **list)$/;"	f	file:	signature:(struct sys_dev **list)
free_updates	libmdadm/managemon.c	/^static void free_updates(struct metadata_update **update)$/;"	f	file:	signature:(struct metadata_update **update)
freeze	libmdadm/Grow.c	/^static int freeze(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
freeze_container	libmdadm/Grow.c	/^static int freeze_container(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
freeze_reshape	libmdadm/mdadm.h	/^	int	freeze_reshape;$/;"	m	struct:context	access:public
from_auto	libmdadm/Monitor.c	/^	int from_auto;$/;"	m	struct:state	file:	access:public
from_config	libmdadm/Monitor.c	/^	int from_config;$/;"	m	struct:state	file:	access:public
fs	libmke2fs/ext2fsP.h	/^	ext2_filsys		fs;$/;"	m	struct:ext2_struct_dblist	access:public
fs_features	libmke2fs/mke2fs.h	/^	char fs_features[256];$/;"	m	struct:e2fs_cfg	access:public
fs_param	libmke2fs/mke2fs.c	/^static struct ext2_super_block fs_param;$/;"	v	typeref:struct:ext2_super_block	file:
fs_state	libmdadm/super-intel.c	/^	__u8  fs_state;		\/* fast-sync state for CnG (0xff == disabled) *\/$/;"	m	struct:imsm_vol	file:	access:public
fs_stride	libmke2fs/mke2fs.c	/^static __u32	fs_stride;$/;"	v	file:
fs_type	libmke2fs/mke2fs.h	/^	char fs_type[16];$/;"	m	struct:e2fs_cfg	access:public
fs_types	libmke2fs/mke2fs.c	/^static char **fs_types;$/;"	v	file:
fs_uuid	libmke2fs/mke2fs.c	/^static char *fs_uuid = NULL;$/;"	v	file:
fs_uuid	libmke2fs/mke2fs.h	/^	char fs_uuid[64];$/;"	m	struct:e2fs_cfg	access:public
func	libmke2fs/ext2fsP.h	/^	int (*func)(ext2_ino_t	dir,$/;"	m	struct:dir_context	access:public
g_bLoop	unitest/RAIDManager_test.cpp	/^bool g_bLoop = true;$/;"	v
generate_entries	libmdadm/policy.c	/^int generate_entries(int fd)$/;"	f	signature:(int fd)
generation_num	libmdadm/super-intel.c	/^	__u32 generation_num;		\/* 0x2C - 0x2F Incremented each time this array's MPB is written *\/$/;"	m	struct:imsm_super	file:	access:public
geo_map	libmdadm/restripe.c	/^int geo_map(int block, unsigned long long stripe, int raid_disks,$/;"	f	signature:(int block, unsigned long long stripe, int raid_disks, int level, int layout)
geo_params	libmdadm/super-intel.c	/^struct geo_params {$/;"	s	file:
geo_params::chunksize	libmdadm/super-intel.c	/^	int chunksize;$/;"	m	struct:geo_params	file:	access:public
geo_params::dev_name	libmdadm/super-intel.c	/^	char *dev_name;$/;"	m	struct:geo_params	file:	access:public
geo_params::devnm	libmdadm/super-intel.c	/^	char devnm[32];$/;"	m	struct:geo_params	file:	access:public
geo_params::layout	libmdadm/super-intel.c	/^	int layout;$/;"	m	struct:geo_params	file:	access:public
geo_params::level	libmdadm/super-intel.c	/^	int level;$/;"	m	struct:geo_params	file:	access:public
geo_params::raid_disks	libmdadm/super-intel.c	/^	int raid_disks;$/;"	m	struct:geo_params	file:	access:public
geo_params::size	libmdadm/super-intel.c	/^	unsigned long long size;$/;"	m	struct:geo_params	file:	access:public
get_alloc_block	libmke2fs/ext2fs.h	/^	errcode_t (*get_alloc_block)(ext2_filsys fs, blk64_t goal,$/;"	m	struct:struct_ext2_filsys	access:public
get_blocks	libmke2fs/ext2fs.h	/^	errcode_t (*get_blocks)(ext2_filsys fs, ext2_ino_t ino, blk_t *blocks);$/;"	m	struct:struct_ext2_filsys	access:public
get_bool_from_profile	libmke2fs/mke2fs.c	/^static int get_bool_from_profile(char **types, const char *opt, int def_val)$/;"	f	file:	signature:(char **types, const char *opt, int def_val)
get_bvd_state	libmdadm/super-ddf.c	/^static int get_bvd_state(const struct ddf_super *ddf,$/;"	f	file:	signature:(const struct ddf_super *ddf, const struct vd_config *vc)
get_component_size	libmdadm/mdadm.h	/^extern unsigned long long get_component_size(int fd);$/;"	p	signature:(int fd)
get_component_size	libmdadm/sysfs.c	/^unsigned long long get_component_size(int fd)$/;"	f	signature:(int fd)
get_crc_table	libmdadm/crc32.c	/^const unsigned long FAR * ZEXPORT get_crc_table(void)$/;"	f	signature:(void)
get_data_disks	libmdadm/mdadm.h	/^extern int get_data_disks(int level, int layout, int raid_disks);$/;"	p	signature:(int level, int layout, int raid_disks)
get_data_disks	libmdadm/util.c	/^int get_data_disks(int level, int layout, int raid_disks)$/;"	f	signature:(int level, int layout, int raid_disks)
get_dev_size	libmdadm/mdadm.h	/^extern int get_dev_size(int fd, char *dname, unsigned long long *sizep);$/;"	p	signature:(int fd, char *dname, unsigned long long *sizep)
get_dev_size	libmdadm/util.c	/^int get_dev_size(int fd, char *dname, unsigned long long *sizep)$/;"	f	signature:(int fd, char *dname, unsigned long long *sizep)
get_device_geometry	libmke2fs/mke2fs.c	/^static int get_device_geometry(const char *file,$/;"	f	file:	signature:(const char *file, struct ext2_super_block *fs_param, int psector_size)
get_devices	libmdadm/super-intel.c	/^get_devices(const char *hba_path)$/;"	f	file:	signature:(const char *hba_path)
get_devlist_super_block	libmdadm/super-intel.c	/^get_devlist_super_block(struct md_list *devlist, struct intel_super **super_list,$/;"	f	file:	signature:(struct md_list *devlist, struct intel_super **super_list, int *max, int keep_fd)
get_devlist_super_block	libmdadm/super-intel.c	/^get_devlist_super_block(struct md_list *devlist, struct intel_super **super_list,$/;"	p	file:	signature:(struct md_list *devlist, struct intel_super **super_list, int *max, int keep_fd)
get_dirlist	libmke2fs/profile.c	/^static errcode_t get_dirlist(const char *dirname, char***ret_array)$/;"	f	file:	signature:(const char *dirname, char***ret_array)
get_disk_controller_domain	libmdadm/mdadm.h	/^	const char *(*get_disk_controller_domain)(const char *path);$/;"	m	struct:superswitch	access:public
get_disk_info	libmdadm/super-intel.c	/^static struct disk_info *get_disk_info(struct imsm_update_create_array *update)$/;"	f	file:	signature:(struct imsm_update_create_array *update)
get_disk_super	libmdadm/super-intel.c	/^static struct dl *get_disk_super(struct intel_super *super, int major, int minor)$/;"	f	file:	signature:(struct intel_super *super, int major, int minor)
get_double_from_profile	libmke2fs/mke2fs.c	/^static double get_double_from_profile(char **types, const char *opt,$/;"	f	file:	signature:(char **types, const char *opt, double def_val)
get_extents	libmdadm/super-ddf.c	/^static struct extent *get_extents(struct ddf_super *ddf, struct dl *dl)$/;"	f	file:	signature:(struct ddf_super *ddf, struct dl *dl)
get_extents	libmdadm/super-intel.c	/^static struct extent *get_extents(struct intel_super *super, struct dl *dl)$/;"	f	file:	signature:(struct intel_super *super, struct dl *dl)
get_gpt_last_partition_end	libmdadm/util.c	/^static int get_gpt_last_partition_end(int fd, unsigned long long *endofpart)$/;"	f	file:	signature:(int fd, unsigned long long *endofpart)
get_imsm_dev	libmdadm/super-intel.c	/^static struct imsm_dev *get_imsm_dev(struct intel_super *super, __u8 index)$/;"	f	file:	signature:(struct intel_super *super, __u8 index)
get_imsm_disk	libmdadm/super-intel.c	/^static struct imsm_disk *get_imsm_disk(struct intel_super *super, __u8 index)$/;"	f	file:	signature:(struct intel_super *super, __u8 index)
get_imsm_disk_idx	libmdadm/super-intel.c	/^static __u32 get_imsm_disk_idx(struct imsm_dev *dev, int slot, int second_map)$/;"	f	file:	signature:(struct imsm_dev *dev, int slot, int second_map)
get_imsm_disk_slot	libmdadm/super-intel.c	/^static int get_imsm_disk_slot(struct imsm_map *map, unsigned idx)$/;"	f	file:	signature:(struct imsm_map *map, unsigned idx)
get_imsm_dl_disk	libmdadm/super-intel.c	/^static struct dl *get_imsm_dl_disk(struct intel_super *super, __u8 index)$/;"	f	file:	signature:(struct intel_super *super, __u8 index)
get_imsm_map	libmdadm/super-intel.c	/^struct imsm_map *get_imsm_map(struct imsm_dev *dev, int second_map)$/;"	f	signature:(struct imsm_dev *dev, int second_map)
get_imsm_missing	libmdadm/super-intel.c	/^static struct imsm_disk *get_imsm_missing(struct intel_super *super, __u8 index)$/;"	f	file:	signature:(struct intel_super *super, __u8 index)
get_imsm_ord_tbl_ent	libmdadm/super-intel.c	/^static __u32 get_imsm_ord_tbl_ent(struct imsm_dev *dev,$/;"	f	file:	signature:(struct imsm_dev *dev, int slot, int second_map)
get_imsm_raid_level	libmdadm/super-intel.c	/^static int get_imsm_raid_level(struct imsm_map *map)$/;"	f	file:	signature:(struct imsm_map *map)
get_imsm_version	libmdadm/super-intel.c	/^static __u8 *get_imsm_version(struct imsm_super *mpb)$/;"	f	file:	signature:(struct imsm_super *mpb)
get_int_from_profile	libmke2fs/mke2fs.c	/^static int get_int_from_profile(char **types, const char *opt, int def_val)$/;"	f	file:	signature:(char **types, const char *opt, int def_val)
get_last_partition_end	libmdadm/util.c	/^static int get_last_partition_end(int fd, unsigned long long *endofpart)$/;"	f	file:	signature:(int fd, unsigned long long *endofpart)
get_linux_version	libmdadm/mdadm.h	/^extern int get_linux_version(void);$/;"	p	signature:(void)
get_linux_version	libmdadm/util.c	/^int get_linux_version()$/;"	f
get_loop_devices	libmdadm/super-intel.c	/^get_loop_devices(void)$/;"	f	file:	signature:(void)
get_maj_min	libmdadm/mdadm.h	/^extern int get_maj_min(char *dev, int *major, int *minor);$/;"	p	signature:(char *dev, int *major, int *minor)
get_maj_min	libmdadm/util.c	/^int get_maj_min(char *dev, int *major, int *minor)$/;"	f	signature:(char *dev, int *major, int *minor)
get_md_name	libmdadm/mdadm.h	/^extern char *get_md_name(char *devnm);$/;"	p	signature:(char *devnm)
get_md_name	libmdadm/util.c	/^char *get_md_name(char *devnm)$/;"	f	signature:(char *devnm)
get_mdp_major	libmdadm/lib.c	/^int get_mdp_major(void)$/;"	f	signature:(void)
get_mdp_major	libmdadm/mdadm.h	/^extern int get_mdp_major(void);$/;"	p	signature:(void)
get_member_info	libmdadm/mapfile.c	/^static char *get_member_info(struct mdstat_ent *ent)$/;"	f	file:	signature:(struct mdstat_ent *ent)
get_min_spare_size_required	libmdadm/Monitor.c	/^static int get_min_spare_size_required(struct state *st, unsigned long long *sizep)$/;"	f	file:	signature:(struct state *st, unsigned long long *sizep)
get_pd_index_from_refnum	libmdadm/super-ddf.c	/^static unsigned int get_pd_index_from_refnum(const struct vcl *vc,$/;"	f	file:	signature:(const struct vcl *vc, be32 refnum, unsigned int nmax, const struct vd_config **bvd, unsigned int *idx)
get_pd_index_from_refnum	libmdadm/super-ddf.c	/^static unsigned int get_pd_index_from_refnum(const struct vcl *vc,$/;"	p	file:	signature:(const struct vcl *vc, be32 refnum, unsigned int nmax, const struct vd_config **bvd, unsigned int *idx)
get_progname	libmke2fs/util.c	/^char *get_progname(char *argv_zero)$/;"	f	signature:(char *argv_zero)
get_progname	libmke2fs/util.h	/^extern char *get_progname(char *argv_zero);$/;"	p	signature:(char *argv_zero)
get_r10_layout_string	libmdadm/util.c	/^void get_r10_layout_string(int layout, char *str_layout, int str_len)$/;"	f	signature:(int layout, char *str_layout, int str_len)
get_space_after	libmdadm/Grow.c	/^static void get_space_after(int fd, struct supertype *st, struct mdinfo *info)$/;"	f	file:	signature:(int fd, struct supertype *st, struct mdinfo *info)
get_spares_for_grow	libmdadm/super-intel.c	/^static struct mdinfo *get_spares_for_grow(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
get_spares_for_grow	libmdadm/super-intel.c	/^static struct mdinfo *get_spares_for_grow(struct supertype *st);$/;"	p	file:	signature:(struct supertype *st)
get_sra_super_block	libmdadm/super-intel.c	/^get_sra_super_block(int fd, struct intel_super **super_list, char *devname, int *max, int keep_fd)$/;"	f	file:	signature:(int fd, struct intel_super **super_list, char *devname, int *max, int keep_fd)
get_sra_super_block	libmdadm/super-intel.c	/^get_sra_super_block(int fd, struct intel_super **super_list, char *devname, int *max, int keep_fd);$/;"	p	file:	signature:(int fd, struct intel_super **super_list, char *devname, int *max, int keep_fd)
get_string_from_profile	libmke2fs/mke2fs.c	/^static char *get_string_from_profile(char **types, const char *opt,$/;"	f	file:	signature:(char **types, const char *opt, const char *def_val)
get_super_block	libmdadm/super-intel.c	/^static int get_super_block(struct intel_super **super_list, char *devnm, char *devname,$/;"	f	file:	signature:(struct intel_super **super_list, char *devnm, char *devname, int major, int minor, int keep_fd)
get_super_block	libmdadm/super-intel.c	/^static int get_super_block(struct intel_super **super_list, char *devnm, char *devname,$/;"	p	file:	signature:(struct intel_super **super_list, char *devnm, char *devname, int major, int minor, int keep_fd)
get_svd_state	libmdadm/super-ddf.c	/^static int get_svd_state(const struct ddf_super *, const struct vcl *);$/;"	p	file:	signature:(const struct ddf_super *, const struct vcl *)
get_svd_state	libmdadm/super-ddf.c	/^static int get_svd_state(const struct ddf_super *ddf, const struct vcl *vcl)$/;"	f	file:	signature:(const struct ddf_super *ddf, const struct vcl *vcl)
get_sys_dev_type	libmdadm/platform-intel.h	/^const char *get_sys_dev_type(enum sys_dev_type);$/;"	p	signature:(enum sys_dev_type)
get_sys_dev_type	libmdadm/super-intel.c	/^const char *get_sys_dev_type(enum sys_dev_type type)$/;"	f	signature:(enum sys_dev_type type)
get_vd_num_of_subarray	libmdadm/super-ddf.c	/^static unsigned int get_vd_num_of_subarray(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
getinfo_gpt	libmdadm/super-gpt.c	/^static void getinfo_gpt(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_mbr	libmdadm/super-mbr.c	/^static void getinfo_mbr(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super	libmdadm/mdadm.h	/^	void (*getinfo_super)(struct supertype *st, struct mdinfo *info, char *map);$/;"	m	struct:superswitch	access:public
getinfo_super0	libmdadm/super0.c	/^static void getinfo_super0(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super1	libmdadm/super1.c	/^static void getinfo_super1(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_ddf	libmdadm/super-ddf.c	/^static void getinfo_super_ddf(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_ddf	libmdadm/super-ddf.c	/^static void getinfo_super_ddf(struct supertype *st, struct mdinfo *info, char *map);$/;"	p	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_ddf_bvd	libmdadm/super-ddf.c	/^static void getinfo_super_ddf_bvd(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_ddf_bvd	libmdadm/super-ddf.c	/^static void getinfo_super_ddf_bvd(struct supertype *st, struct mdinfo *info, char *map);$/;"	p	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_disks	libmdadm/mdadm.h	/^	struct mdinfo *(*getinfo_super_disks)(struct supertype *st);$/;"	m	struct:superswitch	typeref:struct:superswitch::getinfo_super_disks	access:public
getinfo_super_disks_imsm	libmdadm/super-intel.c	/^struct mdinfo *getinfo_super_disks_imsm(struct supertype *st)$/;"	f	signature:(struct supertype *st)
getinfo_super_imsm	libmdadm/super-intel.c	/^static void getinfo_super_imsm(struct supertype *st, struct mdinfo *info, char *map)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_imsm	libmdadm/super-intel.c	/^static void getinfo_super_imsm(struct supertype *st, struct mdinfo *info, char *map);$/;"	p	file:	signature:(struct supertype *st, struct mdinfo *info, char *map)
getinfo_super_imsm_volume	libmdadm/super-intel.c	/^static void getinfo_super_imsm_volume(struct supertype *st, struct mdinfo *info, char *dmap)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *dmap)
getnum	libmdadm/restripe.c	/^unsigned long long getnum(char *str, char **err)$/;"	f	signature:(char *str, char **err)
gfmul	libmdadm/restripe.c	/^static uint8_t gfmul(uint8_t a, uint8_t b)$/;"	f	file:	signature:(uint8_t a, uint8_t b)
gfpow	libmdadm/restripe.c	/^static uint8_t gfpow(uint8_t a, int b)$/;"	f	file:	signature:(uint8_t a, int b)
gid	libmdadm/mdadm.h	/^	int	gid;$/;"	m	struct:createinfo	access:public
gpt	libmdadm/super-gpt.c	/^struct superswitch gpt = {$/;"	v	typeref:struct:superswitch
group_desc	libmke2fs/ext2fs.h	/^	struct opaque_ext2_group_desc *	group_desc;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::opaque_ext2_group_desc	access:public
group_desc_count	libmke2fs/ext2fs.h	/^	dgrp_t				group_desc_count;$/;"	m	struct:struct_ext2_filsys	access:public
group_level	libmke2fs/profile.c	/^	int	group_level;$/;"	m	struct:parse_state	file:	access:public
group_level	libmke2fs/profile.c	/^	int group_level;$/;"	m	struct:profile_node	file:	access:public
grow_backup	libmdadm/Grow.c	/^static int grow_backup(struct mdinfo *sra,$/;"	f	file:	signature:(struct mdinfo *sra, unsigned long long offset, unsigned long stripes, int *sources, unsigned long long *offsets, int disks, int chunk, int level, int layout, int dests, int *destfd, unsigned long long *destoffsets, int part, int *degraded, char *buf)
gstate_creserved	libmdadm/md_p.h	/^	__u32 gstate_creserved[MD_SB_GENERIC_CONSTANT_WORDS - 16];$/;"	m	struct:mdp_superblock_s	access:public
gstate_sreserved	libmdadm/md_p.h	/^	__u32 gstate_sreserved[MD_SB_GENERIC_STATE_WORDS - 18];$/;"	m	struct:mdp_superblock_s	access:public
guess_any	libmdadm/mdadm.h	/^enum guess_types { guess_any, guess_array, guess_partitions };$/;"	e	enum:guess_types
guess_array	libmdadm/mdadm.h	/^enum guess_types { guess_any, guess_array, guess_partitions };$/;"	e	enum:guess_types
guess_partitions	libmdadm/mdadm.h	/^enum guess_types { guess_any, guess_array, guess_partitions };$/;"	e	enum:guess_types
guess_super	libmdadm/mdadm.h	/^static inline struct supertype *guess_super(int fd) {$/;"	f	signature:(int fd)
guess_super_type	libmdadm/mdadm.h	/^extern struct supertype *guess_super_type(int fd, enum guess_types guess_type);$/;"	p	signature:(int fd, enum guess_types guess_type)
guess_super_type	libmdadm/util.c	/^struct supertype *guess_super_type(int fd, enum guess_types guess_type)$/;"	f	signature:(int fd, enum guess_types guess_type)
guess_types	libmdadm/mdadm.h	/^enum guess_types { guess_any, guess_array, guess_partitions };$/;"	g
guid	libmdadm/part.h	/^	__u8 guid[16];$/;"	m	struct:GPT	access:public
guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:ddf_controller_data	file:	access:public
guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:ddf_header	file:	access:public
guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:disk_data	file:	access:public
guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:vd_config	file:	access:public
guid_crc	libmdadm/super-ddf.c	/^		be16	guid_crc;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
guid_str	libmdadm/platform-intel.h	/^static inline char *guid_str(char *buf, struct efi_guid guid)$/;"	f	signature:(char *buf, struct efi_guid guid)
guid_str	libmdadm/super-ddf.c	/^static const char *guid_str(const char *guid)$/;"	f	file:	signature:(const char *guid)
gvalid_words	libmdadm/md_p.h	/^	__u32 gvalid_words;	\/*  4 Number of used words in this section    *\/$/;"	m	struct:mdp_superblock_s	access:public
handle_bad_blocks	libmke2fs/mke2fs.c	/^static int handle_bad_blocks(ext2_filsys fs, badblocks_list bb_list)$/;"	f	file:	signature:(ext2_filsys fs, badblocks_list bb_list)
handle_message	libmdadm/managemon.c	/^static void handle_message(struct supertype *container, struct metadata_update *msg)$/;"	f	file:	signature:(struct supertype *container, struct metadata_update *msg)
handle_missing	libmdadm/super-ddf.c	/^static void handle_missing(struct ddf_super *ddf, struct active_array *a, int inst)$/;"	f	file:	signature:(struct ddf_super *ddf, struct active_array *a, int inst)
handle_missing	libmdadm/super-intel.c	/^static void handle_missing(struct intel_super *super, struct imsm_dev *dev)$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev)
handle_missing	libmdadm/super-intel.c	/^static void handle_missing(struct intel_super *super, struct imsm_dev *dev);$/;"	p	file:	signature:(struct intel_super *super, struct imsm_dev *dev)
hba	libmdadm/super-intel.c	/^	struct intel_hba *hba; \/* device path of the raid controller for this metadata *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_hba	file:	access:public
header_ext	libmdadm/super-ddf.c	/^	__u8	header_ext[32];	\/* reserved: fill with 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
header_size	libmdadm/part.h	/^	__u32 header_size;$/;"	m	struct:GPT	access:public
hijacked	libmdadm/bitmap.h	/^	unsigned int hijacked;$/;"	m	struct:bitmap_page	access:public
home_host	libmdadm/config.c	/^static char *home_host = NULL;$/;"	v	file:
homehost	libmdadm/mdadm.h	/^	char	*homehost;$/;"	m	struct:context	access:public
homehostline	libmdadm/config.c	/^void homehostline(char *line)$/;"	f	signature:(char *line)
hotfix_ver	libmdadm/platform-intel.h	/^	__u16 hotfix_ver; \/* Example: 0 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
human_chunksize	libmdadm/bitmap.c	/^const char *human_chunksize(unsigned long bytes)$/;"	f	signature:(unsigned long bytes)
human_size	libmdadm/mdadm.h	/^extern char *human_size(long long bytes);$/;"	p	signature:(long long bytes)
human_size	libmdadm/util.c	/^char *human_size(long long bytes)$/;"	f	signature:(long long bytes)
human_size_brief	libmdadm/mdadm.h	/^extern char *human_size_brief(long long bytes, int prefix);$/;"	p	signature:(long long bytes, int prefix)
human_size_brief	libmdadm/util.c	/^char *human_size_brief(long long bytes, int prefix)$/;"	f	signature:(long long bytes, int prefix)
i	libmdadm/Assemble.c	/^	struct mdinfo i;$/;"	m	struct:devs	typeref:struct:devs::mdinfo	file:	access:public
iDeltaDisks	libmdadm/mdadm_other.h	/^	int iDeltaDisks;$/;"	m	struct:array_detail	access:public
iDiskNumber	libmdadm/mdadm_other.h	/^	int iDiskNumber;$/;"	m	struct:query_result	access:public
iMDRaidDiskNum	libmdadm/mdadm_other.h	/^	int iMDRaidDiskNum;	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
iMDRaidLevel	libmdadm/mdadm_other.h	/^	int iMDRaidLevel;	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
iMDSpareDiskNum	libmdadm/mdadm_other.h	/^	int iMDSpareDiskNum;	$/;"	m	struct:query_result	access:public
iNewChunkSize	libmdadm/mdadm_other.h	/^	int iNewChunkSize; \/* Byte *\/$/;"	m	struct:array_detail	access:public
iRaidNewLevel	libmdadm/mdadm_other.h	/^	int iRaidNewLevel;$/;"	m	struct:array_detail	access:public
iRebuildProgress	libmdadm/mdadm_other.h	/^	int iRebuildProgress; \/* -1 if no resync *\/$/;"	m	struct:array_detail	access:public
icache	libmke2fs/ext2fs.h	/^	struct ext2_inode_cache		*icache;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_inode_cache	access:public
ident_matches	libmdadm/Assemble.c	/^static int ident_matches(struct mddev_ident *ident,$/;"	f	file:	signature:(struct mddev_ident *ident, struct mdinfo *content, struct supertype *tst, char *homehost, char *update, char *devname)
idle	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
ignore_hw_compat	libmdadm/mdadm.h	/^	int ignore_hw_compat; \/* used to inform metadata handlers that it should ignore$/;"	m	struct:supertype	access:public
image_header	libmke2fs/ext2fs.h	/^	struct ext2_image_hdr *		image_header;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_image_hdr	access:public
image_io	libmke2fs/ext2fs.h	/^	io_channel			image_io;$/;"	m	struct:struct_ext2_filsys	access:public
impose_level	libmdadm/Grow.c	/^static int impose_level(int fd, int level, char *devname, int verbose)$/;"	f	file:	signature:(int fd, int level, char *devname, int verbose)
impose_reshape	libmdadm/Grow.c	/^static int impose_reshape(struct mdinfo *sra,$/;"	f	file:	signature:(struct mdinfo *sra, struct mdinfo *info, struct supertype *st, int fd, int restart, char *devname, char *container, struct reshape *reshape)
imsm_activate_spare	libmdadm/super-intel.c	/^static struct mdinfo *imsm_activate_spare(struct active_array *a,$/;"	f	file:	signature:(struct active_array *a, struct metadata_update **updates)
imsm_add_spare	libmdadm/super-intel.c	/^static struct dl *imsm_add_spare(struct intel_super *super, int slot,$/;"	f	file:	signature:(struct intel_super *super, int slot, struct active_array *a, int activate_new, struct mdinfo *additional_test_list)
imsm_analyze_change	libmdadm/super-intel.c	/^enum imsm_reshape_type imsm_analyze_change(struct supertype *st,$/;"	f	signature:(struct supertype *st, struct geo_params *geo, int direction)
imsm_bbm_log_size	libmdadm/super-intel.c	/^static int imsm_bbm_log_size(struct imsm_super *mpb)$/;"	f	file:	signature:(struct imsm_super *mpb)
imsm_check_attributes	libmdadm/super-intel.c	/^static int imsm_check_attributes(__u32 attributes)$/;"	f	file:	signature:(__u32 attributes)
imsm_check_degraded	libmdadm/super-intel.c	/^static __u8 imsm_check_degraded(struct intel_super *super, struct imsm_dev *dev,$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev, int failed, int look_in_map)
imsm_check_degraded	libmdadm/super-intel.c	/^static __u8 imsm_check_degraded(struct intel_super *super, struct imsm_dev *dev,$/;"	p	file:	signature:(struct intel_super *super, struct imsm_dev *dev, int failed, int look_in_map)
imsm_component_size_aligment_check	libmdadm/super-intel.c	/^static unsigned long long imsm_component_size_aligment_check(int level,$/;"	f	file:	signature:(int level, int chunk_size, unsigned long long component_size)
imsm_copy_dev	libmdadm/super-intel.c	/^static void imsm_copy_dev(struct imsm_dev *dest, struct imsm_dev *src)$/;"	f	file:	signature:(struct imsm_dev *dest, struct imsm_dev *src)
imsm_count_failed	libmdadm/super-intel.c	/^static int imsm_count_failed(struct intel_super *super, struct imsm_dev *dev,$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev, int look_in_map)
imsm_count_failed	libmdadm/super-intel.c	/^static int imsm_count_failed(struct intel_super *super, struct imsm_dev *dev,$/;"	p	file:	signature:(struct intel_super *super, struct imsm_dev *dev, int look_in_map)
imsm_create_metadata_checkpoint_update	libmdadm/super-intel.c	/^static int imsm_create_metadata_checkpoint_update($/;"	f	file:	signature:( struct intel_super *super, struct imsm_update_general_migration_checkpoint **u)
imsm_create_metadata_update_for_migration	libmdadm/super-intel.c	/^static int imsm_create_metadata_update_for_migration($/;"	f	file:	signature:( struct supertype *st, struct geo_params *geo, struct imsm_update_reshape_migration **updatep)
imsm_create_metadata_update_for_reshape	libmdadm/super-intel.c	/^static int imsm_create_metadata_update_for_reshape($/;"	f	file:	signature:( struct supertype *st, struct geo_params *geo, int old_raid_disks, struct imsm_update_reshape **updatep)
imsm_create_metadata_update_for_size_change	libmdadm/super-intel.c	/^static int imsm_create_metadata_update_for_size_change($/;"	f	file:	signature:( struct supertype *st, struct geo_params *geo, struct imsm_update_size_change **updatep)
imsm_default_chunk	libmdadm/super-intel.c	/^static int imsm_default_chunk(const struct imsm_orom *orom)$/;"	f	file:	signature:(const struct imsm_orom *orom)
imsm_delete	libmdadm/super-intel.c	/^static void imsm_delete(struct intel_super *super, struct dl **dlp, unsigned index)$/;"	f	file:	signature:(struct intel_super *super, struct dl **dlp, unsigned index)
imsm_delete	libmdadm/super-intel.c	/^static void imsm_delete(struct intel_super *super, struct dl **dlp, unsigned index);$/;"	p	file:	signature:(struct intel_super *super, struct dl **dlp, unsigned index)
imsm_dev	libmdadm/super-intel.c	/^struct imsm_dev {$/;"	s	file:
imsm_dev::cache_policy	libmdadm/super-intel.c	/^	__u16 cache_policy;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::cng_master_disk	libmdadm/super-intel.c	/^	__u8  cng_master_disk;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::cng_state	libmdadm/super-intel.c	/^	__u8  cng_state;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::cng_sub_state	libmdadm/super-intel.c	/^	__u8  cng_sub_state;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_DEV_FILLERS];$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::migr_priority	libmdadm/super-intel.c	/^	__u8  migr_priority;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::num_sub_vols	libmdadm/super-intel.c	/^	__u8  num_sub_vols;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::reserved_blocks	libmdadm/super-intel.c	/^	__u32 reserved_blocks; \/* Reserved blocks at beginning of volume *\/$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::size_high	libmdadm/super-intel.c	/^	__u32 size_high;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::size_low	libmdadm/super-intel.c	/^	__u32 size_low;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::status	libmdadm/super-intel.c	/^	__u32 status;	\/* Persistent RaidDev status *\/$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::tid	libmdadm/super-intel.c	/^	__u8  tid;$/;"	m	struct:imsm_dev	file:	access:public
imsm_dev::vol	libmdadm/super-intel.c	/^	struct imsm_vol vol;$/;"	m	struct:imsm_dev	typeref:struct:imsm_dev::imsm_vol	file:	access:public
imsm_dev::volume	libmdadm/super-intel.c	/^	__u8  volume[MAX_RAID_SERIAL_LEN];$/;"	m	struct:imsm_dev	file:	access:public
imsm_disk	libmdadm/super-intel.c	/^struct imsm_disk {$/;"	s	file:
imsm_disk::filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_DISK_FILLERS]; \/* 0xF5 - 0x107 MPB_DISK_FILLERS for future expansion *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::owner_cfg_num	libmdadm/super-intel.c	/^	__u32 owner_cfg_num; \/* which config 0,1,2... owns this disk *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::scsi_id	libmdadm/super-intel.c	/^	__u32 scsi_id;			 \/* 0xEC - 0xEF scsi ID *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::serial	libmdadm/super-intel.c	/^	__u8 serial[MAX_RAID_SERIAL_LEN];\/* 0xD8 - 0xE7 ascii serial number *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::status	libmdadm/super-intel.c	/^	__u32 status;			 \/* 0xF0 - 0xF3 *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::total_blocks_hi	libmdadm/super-intel.c	/^	__u32 total_blocks_hi;		 \/* 0xF4 - 0xF5 total blocks hi *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_disk::total_blocks_lo	libmdadm/super-intel.c	/^	__u32 total_blocks_lo;		 \/* 0xE8 - 0xEB total blocks lo *\/$/;"	m	struct:imsm_disk	file:	access:public
imsm_efi	libmdadm/platform-intel.c	/^static struct imsm_orom imsm_efi[SYS_DEV_MAX];$/;"	v	typeref:struct:imsm_orom	file:
imsm_find_array_devnm_by_subdev	libmdadm/super-intel.c	/^static char *imsm_find_array_devnm_by_subdev(int subdev, char *container)$/;"	f	file:	signature:(int subdev, char *container)
imsm_get_allowed_degradation	libmdadm/super-intel.c	/^static int imsm_get_allowed_degradation(int level, int raid_disks,$/;"	f	file:	signature:(int level, int raid_disks, struct intel_super *super, struct imsm_dev *dev)
imsm_get_device_during_migration	libmdadm/super-intel.c	/^static struct imsm_dev *imsm_get_device_during_migration($/;"	f	file:	signature:( struct intel_super *super)
imsm_get_disk_controller_domain	libmdadm/super-intel.c	/^static const char *imsm_get_disk_controller_domain(const char *path)$/;"	f	file:	signature:(const char *path)
imsm_get_free_size	libmdadm/super-intel.c	/^static int imsm_get_free_size(struct supertype *st, int raiddisks,$/;"	f	file:	signature:(struct supertype *st, int raiddisks, unsigned long long size, int chunk, unsigned long long *freesize)
imsm_level_to_layout	libmdadm/super-intel.c	/^static int imsm_level_to_layout(int level)$/;"	f	file:	signature:(int level)
imsm_manage_reshape	libmdadm/super-intel.c	/^static int imsm_manage_reshape($/;"	f	file:	signature:( int afd, struct mdinfo *sra, struct reshape *reshape, struct supertype *st, unsigned long backup_blocks, int *fds, unsigned long long *offsets, int dests, int *destfd, unsigned long long *destoffsets)
imsm_map	libmdadm/super-intel.c	/^struct imsm_map {$/;"	s	file:
imsm_map::blocks_per_member_hi	libmdadm/super-intel.c	/^	__u32 blocks_per_member_hi;$/;"	m	struct:imsm_map	file:	access:public
imsm_map::blocks_per_member_lo	libmdadm/super-intel.c	/^	__u32 blocks_per_member_lo;\/* blocks per member *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::blocks_per_strip	libmdadm/super-intel.c	/^	__u16 blocks_per_strip;$/;"	m	struct:imsm_map	file:	access:public
imsm_map::ddf	libmdadm/super-intel.c	/^	__u8  ddf;$/;"	m	struct:imsm_map	file:	access:public
imsm_map::disk_ord_tbl	libmdadm/super-intel.c	/^	__u32 disk_ord_tbl[1];	\/* disk_ord_tbl[num_members],$/;"	m	struct:imsm_map	file:	access:public
imsm_map::failed_disk_num	libmdadm/super-intel.c	/^	__u8  failed_disk_num;  \/* valid only when state is degraded *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::filler	libmdadm/super-intel.c	/^	__u32 filler[4];	\/* expansion area *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::map_state	libmdadm/super-intel.c	/^	__u8  map_state;	\/* Normal, Uninitialized, Degraded, Failed *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::num_data_stripes_hi	libmdadm/super-intel.c	/^	__u32 num_data_stripes_hi;$/;"	m	struct:imsm_map	file:	access:public
imsm_map::num_data_stripes_lo	libmdadm/super-intel.c	/^	__u32 num_data_stripes_lo;	\/* number of data stripes *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::num_domains	libmdadm/super-intel.c	/^	__u8  num_domains;	\/* number of parity domains *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::num_members	libmdadm/super-intel.c	/^	__u8  num_members;	\/* number of member disks *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::pba_of_lba0_hi	libmdadm/super-intel.c	/^	__u32 pba_of_lba0_hi;$/;"	m	struct:imsm_map	file:	access:public
imsm_map::pba_of_lba0_lo	libmdadm/super-intel.c	/^	__u32 pba_of_lba0_lo;	\/* start address of partition *\/$/;"	m	struct:imsm_map	file:	access:public
imsm_map::raid_level	libmdadm/super-intel.c	/^	__u8  raid_level;$/;"	m	struct:imsm_map	file:	access:public
imsm_min_reserved_sectors	libmdadm/super-intel.c	/^static __u32 imsm_min_reserved_sectors(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
imsm_min_reserved_sectors	libmdadm/super-intel.c	/^static __u32 imsm_min_reserved_sectors(struct intel_super *super);$/;"	p	file:	signature:(struct intel_super *super)
imsm_num_data_members	libmdadm/super-intel.c	/^static __u8 imsm_num_data_members(struct imsm_dev *dev, int second_map)$/;"	f	file:	signature:(struct imsm_dev *dev, int second_map)
imsm_open_new	libmdadm/super-intel.c	/^static int imsm_open_new(struct supertype *c, struct active_array *a,$/;"	f	file:	signature:(struct supertype *c, struct active_array *a, char *inst)
imsm_orom	libmdadm/platform-intel.c	/^static struct imsm_orom imsm_orom[SYS_DEV_MAX];$/;"	v	typeref:struct:imsm_orom	file:
imsm_orom	libmdadm/platform-intel.h	/^struct imsm_orom {$/;"	s
imsm_orom::attr	libmdadm/platform-intel.h	/^	__u32 attr;$/;"	m	struct:imsm_orom	access:public
imsm_orom::build	libmdadm/platform-intel.h	/^	__u16 build; \/* Example: 1020 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::capabilities	libmdadm/platform-intel.h	/^	__u32 capabilities;$/;"	m	struct:imsm_orom	access:public
imsm_orom::checksum	libmdadm/platform-intel.h	/^	__u8 checksum; \/* checksum of all the bytes in this table *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::dpa	libmdadm/platform-intel.h	/^	__u16 dpa; \/* Disks Per Array supported *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::driver_features	libmdadm/platform-intel.h	/^	__u32 driver_features;$/;"	m	struct:imsm_orom	access:public
imsm_orom::hotfix_ver	libmdadm/platform-intel.h	/^	__u16 hotfix_ver; \/* Example: 0 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::len	libmdadm/platform-intel.h	/^	__u8 len; \/* number of bytes in this entire table *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::major_ver	libmdadm/platform-intel.h	/^	__u16 major_ver; \/* Example: 8 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::minor_ver	libmdadm/platform-intel.h	/^	__u16 minor_ver; \/* Example: 6 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::rlc	libmdadm/platform-intel.h	/^	__u16 rlc; \/* RAID Level Capability *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::signature	libmdadm/platform-intel.h	/^	__u8 signature[4];$/;"	m	struct:imsm_orom	access:public
imsm_orom::sss	libmdadm/platform-intel.h	/^	__u16 sss; \/* Strip Size Supported *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::table_ver_major	libmdadm/platform-intel.h	/^	__u8 table_ver_major; \/* Currently 2 (can change with future revs) *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::table_ver_minor	libmdadm/platform-intel.h	/^	__u8 table_ver_minor; \/* Currently 2 (can change with future revs) *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::tds	libmdadm/platform-intel.h	/^	__u16 tds; \/* Total Disks Supported *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::vpa	libmdadm/platform-intel.h	/^	__u8 vpa; \/* # Volumes Per Array supported *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom::vphba	libmdadm/platform-intel.h	/^	__u8 vphba; \/* # Volumes Per Host Bus Adapter supported *\/$/;"	m	struct:imsm_orom	access:public
imsm_orom_has_chunk	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_chunk(const struct imsm_orom *orom, int chunk)$/;"	f	signature:(const struct imsm_orom *orom, int chunk)
imsm_orom_has_raid0	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_raid0(const struct imsm_orom *orom)$/;"	f	signature:(const struct imsm_orom *orom)
imsm_orom_has_raid1	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_raid1(const struct imsm_orom *orom)$/;"	f	signature:(const struct imsm_orom *orom)
imsm_orom_has_raid10	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_raid10(const struct imsm_orom *orom)$/;"	f	signature:(const struct imsm_orom *orom)
imsm_orom_has_raid1e	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_raid1e(const struct imsm_orom *orom)$/;"	f	signature:(const struct imsm_orom *orom)
imsm_orom_has_raid5	libmdadm/platform-intel.h	/^static inline int imsm_orom_has_raid5(const struct imsm_orom *orom)$/;"	f	signature:(const struct imsm_orom *orom)
imsm_platform_test	libmdadm/platform-intel.c	/^const struct imsm_orom *imsm_platform_test(enum sys_dev_type hba_id, int *populated,$/;"	f	signature:(enum sys_dev_type hba_id, int *populated, struct imsm_orom *imsm_orom)
imsm_prepare_update	libmdadm/super-intel.c	/^static int imsm_prepare_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
imsm_process_update	libmdadm/super-intel.c	/^static void imsm_process_update(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct metadata_update *update)
imsm_progress_container_reshape	libmdadm/super-intel.c	/^static void imsm_progress_container_reshape(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
imsm_read_serial	libmdadm/super-intel.c	/^static int imsm_read_serial(int fd, char *devname, __u8 *serial);$/;"	p	file:	signature:(int fd, char *devname, __u8 *serial)
imsm_read_serial	libmdadm/super-intel.c	/^static int imsm_read_serial(int fd, char *devname,$/;"	f	file:	signature:(int fd, char *devname, __u8 serial[MAX_RAID_SERIAL_LEN])
imsm_readd	libmdadm/super-intel.c	/^static struct dl *imsm_readd(struct intel_super *super, int idx, struct active_array *a)$/;"	f	file:	signature:(struct intel_super *super, int idx, struct active_array *a)
imsm_rebuild_allowed	libmdadm/super-intel.c	/^static int imsm_rebuild_allowed(struct supertype *cont, int dev_idx, int failed)$/;"	f	file:	signature:(struct supertype *cont, int dev_idx, int failed)
imsm_reserved_sectors	libmdadm/super-intel.c	/^static __u32 imsm_reserved_sectors(struct intel_super *super, struct dl *dl)$/;"	f	file:	signature:(struct intel_super *super, struct dl *dl)
imsm_reshape_blocks_arrays_changes	libmdadm/super-intel.c	/^int imsm_reshape_blocks_arrays_changes(struct intel_super *super)$/;"	f	signature:(struct intel_super *super)
imsm_reshape_is_allowed_on_container	libmdadm/super-intel.c	/^static int imsm_reshape_is_allowed_on_container(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, struct geo_params *geo, int *old_raid_disks, int direction)
imsm_reshape_super	libmdadm/super-intel.c	/^static int imsm_reshape_super(struct supertype *st, unsigned long long size,$/;"	f	file:	signature:(struct supertype *st, unsigned long long size, int level, int layout, int chunksize, int raid_disks, int delta_disks, char *backup, char *dev, int direction, int verbose)
imsm_reshape_type	libmdadm/super-intel.c	/^enum imsm_reshape_type {$/;"	g	file:
imsm_set_array_size	libmdadm/super-intel.c	/^static unsigned long long imsm_set_array_size(struct imsm_dev *dev,$/;"	f	file:	signature:(struct imsm_dev *dev, long long new_size)
imsm_set_array_state	libmdadm/super-intel.c	/^static int imsm_set_array_state(struct active_array *a, int consistent)$/;"	f	file:	signature:(struct active_array *a, int consistent)
imsm_set_disk	libmdadm/super-intel.c	/^static void imsm_set_disk(struct active_array *a, int n, int state)$/;"	f	file:	signature:(struct active_array *a, int n, int state)
imsm_set_disk	libmdadm/super-intel.c	/^static void imsm_set_disk(struct active_array *a, int n, int state);$/;"	p	file:	signature:(struct active_array *a, int n, int state)
imsm_super	libmdadm/super-intel.c	/^struct imsm_super {$/;"	s	file:
imsm_super::attributes	libmdadm/super-intel.c	/^	__u32 attributes;		\/* 0x34 - 0x37 *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::bbm_log_size	libmdadm/super-intel.c	/^	__u32 bbm_log_size;		\/* 0x48 - 0x4B - size of bad Block Mgmt Log in bytes *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::cache_size	libmdadm/super-intel.c	/^	__u32 cache_size;		\/* 0x3c - 0x40 in mb *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::check_sum	libmdadm/super-intel.c	/^	__u32 check_sum;		\/* 0x20 - 0x23 MPB Checksum *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::disk	libmdadm/super-intel.c	/^	struct imsm_disk disk[1];	\/* 0xD8 diskTbl[numDisks] *\/$/;"	m	struct:imsm_super	typeref:struct:imsm_super::imsm_disk	file:	access:public
imsm_super::error_log_pos	libmdadm/super-intel.c	/^	__u8 error_log_pos;		\/* 0x3A  *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::error_log_size	libmdadm/super-intel.c	/^	__u32 error_log_size;		\/* 0x30 - 0x33 in bytes *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::family_num	libmdadm/super-intel.c	/^	__u32 family_num;		\/* 0x28 - 0x2B Checksum from first time this config was written *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::fill	libmdadm/super-intel.c	/^	__u8 fill[1];			\/* 0x3B *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::filler	libmdadm/super-intel.c	/^	__u32 filler[IMSM_FILLERS];	\/* 0x4C - 0xD7 RAID_MPB_FILLERS *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::generation_num	libmdadm/super-intel.c	/^	__u32 generation_num;		\/* 0x2C - 0x2F Incremented each time this array's MPB is written *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::mpb_size	libmdadm/super-intel.c	/^	__u32 mpb_size;			\/* 0x24 - 0x27 Size of MPB *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::num_disks	libmdadm/super-intel.c	/^	__u8 num_disks;			\/* 0x38 Number of configured disks *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::num_raid_devs	libmdadm/super-intel.c	/^	__u8 num_raid_devs;		\/* 0x39 Number of configured volumes *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::orig_family_num	libmdadm/super-intel.c	/^	__u32 orig_family_num;		\/* 0x40 - 0x43 original family num *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::pwr_cycle_count	libmdadm/super-intel.c	/^	__u32 pwr_cycle_count;		\/* 0x44 - 0x47 simulated power cycle count for array *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_super::sig	libmdadm/super-intel.c	/^	__u8 sig[MAX_SIGNATURE_LENGTH];	\/* 0x00 - 0x1F *\/$/;"	m	struct:imsm_super	file:	access:public
imsm_sync_metadata	libmdadm/super-intel.c	/^static void imsm_sync_metadata(struct supertype *container)$/;"	f	file:	signature:(struct supertype *container)
imsm_takeover	libmdadm/super-intel.c	/^int imsm_takeover(struct supertype *st, struct geo_params *geo)$/;"	f	signature:(struct supertype *st, struct geo_params *geo)
imsm_thunderdome	libmdadm/super-intel.c	/^imsm_thunderdome(struct intel_super **super_list, int len)$/;"	f	file:	signature:(struct intel_super **super_list, int len)
imsm_update_activate_spare	libmdadm/super-intel.c	/^struct imsm_update_activate_spare {$/;"	s	file:
imsm_update_activate_spare::array	libmdadm/super-intel.c	/^	int array;$/;"	m	struct:imsm_update_activate_spare	file:	access:public
imsm_update_activate_spare::dl	libmdadm/super-intel.c	/^	struct dl *dl;$/;"	m	struct:imsm_update_activate_spare	typeref:struct:imsm_update_activate_spare::dl	file:	access:public
imsm_update_activate_spare::next	libmdadm/super-intel.c	/^	struct imsm_update_activate_spare *next;$/;"	m	struct:imsm_update_activate_spare	typeref:struct:imsm_update_activate_spare::imsm_update_activate_spare	file:	access:public
imsm_update_activate_spare::slot	libmdadm/super-intel.c	/^	int slot;$/;"	m	struct:imsm_update_activate_spare	file:	access:public
imsm_update_activate_spare::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_activate_spare	typeref:enum:imsm_update_activate_spare::imsm_update_type	file:	access:public
imsm_update_add_remove_disk	libmdadm/super-intel.c	/^struct imsm_update_add_remove_disk {$/;"	s	file:
imsm_update_add_remove_disk::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_add_remove_disk	typeref:enum:imsm_update_add_remove_disk::imsm_update_type	file:	access:public
imsm_update_create_array	libmdadm/super-intel.c	/^struct imsm_update_create_array {$/;"	s	file:
imsm_update_create_array::dev	libmdadm/super-intel.c	/^	struct imsm_dev dev;$/;"	m	struct:imsm_update_create_array	typeref:struct:imsm_update_create_array::imsm_dev	file:	access:public
imsm_update_create_array::dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_create_array	file:	access:public
imsm_update_create_array::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_create_array	typeref:enum:imsm_update_create_array::imsm_update_type	file:	access:public
imsm_update_general_migration_checkpoint	libmdadm/super-intel.c	/^struct imsm_update_general_migration_checkpoint {$/;"	s	file:
imsm_update_general_migration_checkpoint::curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;$/;"	m	struct:imsm_update_general_migration_checkpoint	file:	access:public
imsm_update_general_migration_checkpoint::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_general_migration_checkpoint	typeref:enum:imsm_update_general_migration_checkpoint::imsm_update_type	file:	access:public
imsm_update_kill_array	libmdadm/super-intel.c	/^struct imsm_update_kill_array {$/;"	s	file:
imsm_update_kill_array::dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_kill_array	file:	access:public
imsm_update_kill_array::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_kill_array	typeref:enum:imsm_update_kill_array::imsm_update_type	file:	access:public
imsm_update_metadata_locally	libmdadm/super-intel.c	/^static void imsm_update_metadata_locally(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, void *buf, int len)
imsm_update_metadata_locally	libmdadm/super-intel.c	/^static void imsm_update_metadata_locally(struct supertype *st,$/;"	p	file:	signature:(struct supertype *st, void *buf, int len)
imsm_update_rename_array	libmdadm/super-intel.c	/^struct imsm_update_rename_array {$/;"	s	file:
imsm_update_rename_array::dev_idx	libmdadm/super-intel.c	/^	int dev_idx;$/;"	m	struct:imsm_update_rename_array	file:	access:public
imsm_update_rename_array::name	libmdadm/super-intel.c	/^	__u8 name[MAX_RAID_SERIAL_LEN];$/;"	m	struct:imsm_update_rename_array	file:	access:public
imsm_update_rename_array::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_rename_array	typeref:enum:imsm_update_rename_array::imsm_update_type	file:	access:public
imsm_update_reshape	libmdadm/super-intel.c	/^struct imsm_update_reshape {$/;"	s	file:
imsm_update_reshape::new_disks	libmdadm/super-intel.c	/^	int new_disks[1]; \/* new_raid_disks - old_raid_disks makedev number *\/$/;"	m	struct:imsm_update_reshape	file:	access:public
imsm_update_reshape::new_raid_disks	libmdadm/super-intel.c	/^	int new_raid_disks;$/;"	m	struct:imsm_update_reshape	file:	access:public
imsm_update_reshape::old_raid_disks	libmdadm/super-intel.c	/^	int old_raid_disks;$/;"	m	struct:imsm_update_reshape	file:	access:public
imsm_update_reshape::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_reshape	typeref:enum:imsm_update_reshape::imsm_update_type	file:	access:public
imsm_update_reshape_migration	libmdadm/super-intel.c	/^struct imsm_update_reshape_migration {$/;"	s	file:
imsm_update_reshape_migration::new_chunksize	libmdadm/super-intel.c	/^	int new_chunksize;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::new_disks	libmdadm/super-intel.c	/^	int new_disks[1]; \/* new_raid_disks - old_raid_disks makedev number *\/$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::new_layout	libmdadm/super-intel.c	/^	int new_layout;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::new_level	libmdadm/super-intel.c	/^	int new_level;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::new_raid_disks	libmdadm/super-intel.c	/^	int new_raid_disks;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::old_raid_disks	libmdadm/super-intel.c	/^	int old_raid_disks;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::subdev	libmdadm/super-intel.c	/^	int subdev;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
imsm_update_reshape_migration::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_reshape_migration	typeref:enum:imsm_update_reshape_migration::imsm_update_type	file:	access:public
imsm_update_size_change	libmdadm/super-intel.c	/^struct imsm_update_size_change {$/;"	s	file:
imsm_update_size_change::new_size	libmdadm/super-intel.c	/^	long long new_size;$/;"	m	struct:imsm_update_size_change	file:	access:public
imsm_update_size_change::subdev	libmdadm/super-intel.c	/^	int subdev;$/;"	m	struct:imsm_update_size_change	file:	access:public
imsm_update_size_change::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_size_change	typeref:enum:imsm_update_size_change::imsm_update_type	file:	access:public
imsm_update_takeover	libmdadm/super-intel.c	/^struct imsm_update_takeover {$/;"	s	file:
imsm_update_takeover::direction	libmdadm/super-intel.c	/^	enum takeover_direction direction;$/;"	m	struct:imsm_update_takeover	typeref:enum:imsm_update_takeover::takeover_direction	file:	access:public
imsm_update_takeover::subarray	libmdadm/super-intel.c	/^	int subarray;$/;"	m	struct:imsm_update_takeover	file:	access:public
imsm_update_takeover::type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_takeover	typeref:enum:imsm_update_takeover::imsm_update_type	file:	access:public
imsm_update_type	libmdadm/super-intel.c	/^enum imsm_update_type {$/;"	g	file:
imsm_update_version_info	libmdadm/super-intel.c	/^static void imsm_update_version_info(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
imsm_vol	libmdadm/super-intel.c	/^struct imsm_vol {$/;"	s	file:
imsm_vol::bad_blocks	libmdadm/super-intel.c	/^	__u16 bad_blocks;	\/* number of bad blocks during verify *\/$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::checkpoint_id	libmdadm/super-intel.c	/^	__u32 checkpoint_id;	\/* id to access curr_migr_unit *\/$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::dirty	libmdadm/super-intel.c	/^	__u8  dirty;$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::filler	libmdadm/super-intel.c	/^	__u32 filler[4];$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::fs_state	libmdadm/super-intel.c	/^	__u8  fs_state;		\/* fast-sync state for CnG (0xff == disabled) *\/$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::map	libmdadm/super-intel.c	/^	struct imsm_map map[1];$/;"	m	struct:imsm_vol	typeref:struct:imsm_vol::imsm_map	file:	access:public
imsm_vol::migr_state	libmdadm/super-intel.c	/^	__u8  migr_state;	\/* Normal or Migrating *\/$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::migr_type	libmdadm/super-intel.c	/^	__u8  migr_type;	\/* Initializing, Rebuilding, ... *\/$/;"	m	struct:imsm_vol	file:	access:public
imsm_vol::verify_errors	libmdadm/super-intel.c	/^	__u16 verify_errors;	\/* number of mismatches *\/$/;"	m	struct:imsm_vol	file:	access:public
in_initrd	libmdadm/mdadm.h	/^extern int in_initrd(void);$/;"	p	signature:(void)
in_initrd	libmdadm/util.c	/^int in_initrd(void)$/;"	f	signature:(void)
inactive	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	e	enum:array_state
included	libmdadm/Assemble.c	/^	int included; \/* set if the device is already in the array$/;"	m	struct:devs	file:	access:public
index	libmdadm/super-intel.c	/^		int index;$/;"	m	struct:intel_super::dl	file:	access:public
index	libmdadm/super-intel.c	/^	unsigned index;$/;"	m	struct:intel_dev	file:	access:public
info	libmdadm/mdadm.h	/^	void *info;$/;"	m	struct:supertype	access:public
info	libmdadm/mdmon.h	/^	struct mdinfo info;$/;"	m	struct:active_array	typeref:struct:active_array::mdinfo	access:public
info_to_blocks_per_member	libmdadm/super-intel.c	/^static unsigned long long info_to_blocks_per_member(mdu_array_info_t *info,$/;"	f	file:	signature:(mdu_array_info_t *info, unsigned long long size)
info_to_blocks_per_strip	libmdadm/super-intel.c	/^static __u16 info_to_blocks_per_strip(mdu_array_info_t *info)$/;"	f	file:	signature:(mdu_array_info_t *info)
init_afd	libmdadm/super1.c	/^static void init_afd(struct align_fd *afd, int fd)$/;"	f	file:	signature:(struct align_fd *afd, int fd)
init_list	libmke2fs/mke2fs.c	/^static errcode_t init_list(struct str_list *sl)$/;"	f	file:	signature:(struct str_list *sl)
init_migr_record_imsm	libmdadm/super-intel.c	/^void init_migr_record_imsm(struct supertype *st, struct imsm_dev *dev,$/;"	f	signature:(struct supertype *st, struct imsm_dev *dev, struct mdinfo *info)
init_prof_err_tbl	libmke2fs/prof_err.h	48;"	d
init_state	libmdadm/super-ddf.c	/^		__u8	init_state;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
init_super	libmdadm/mdadm.h	/^	int (*init_super)(struct supertype *st, mdu_array_info_t *info,$/;"	m	struct:superswitch	access:public
init_super0	libmdadm/super0.c	/^static int init_super0(struct supertype *st, mdu_array_info_t *info,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *ignored_name, char *homehost, int *uuid, unsigned long long data_offset)
init_super1	libmdadm/super1.c	/^static int init_super1(struct supertype *st, mdu_array_info_t *info,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, unsigned long long data_offset)
init_super_ddf	libmdadm/super-ddf.c	/^static int init_super_ddf(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, unsigned long long data_offset)
init_super_ddf_bvd	libmdadm/super-ddf.c	/^static int init_super_ddf_bvd(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, unsigned long long data_offset)
init_super_ddf_bvd	libmdadm/super-ddf.c	/^static int init_super_ddf_bvd(struct supertype *st,$/;"	p	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, unsigned long long data_offset)
init_super_imsm	libmdadm/super-intel.c	/^static int init_super_imsm(struct supertype *st, mdu_array_info_t *info,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, unsigned long long data_offset)
init_super_imsm_volume	libmdadm/super-intel.c	/^static int init_super_imsm_volume(struct supertype *st, mdu_array_info_t *info,$/;"	f	file:	signature:(struct supertype *st, mdu_array_info_t *info, unsigned long long size, char *name, char *homehost, int *uuid, long long data_offset)
initialize_prof_error_table	libmke2fs/prof_err.c	/^void initialize_prof_error_table(void) {$/;"	f	signature:(void)
initialize_prof_error_table	libmke2fs/prof_err.c	/^void initialize_prof_error_table(void);$/;"	p	file:	signature:(void)
initialize_prof_error_table	libmke2fs/prof_err.h	/^extern void initialize_prof_error_table(void);$/;"	p	signature:(void)
initialize_prof_error_table_r	libmke2fs/prof_err.c	/^void initialize_prof_error_table_r(struct et_list **list)$/;"	f	signature:(struct et_list **list)
initialize_prof_error_table_r	libmke2fs/prof_err.c	/^void initialize_prof_error_table_r(struct et_list **list);$/;"	p	file:	signature:(struct et_list **list)
initialize_prof_error_table_r	libmke2fs/prof_err.h	/^extern void initialize_prof_error_table_r(struct et_list **list);$/;"	p	signature:(struct et_list **list)
ino	libmke2fs/ext2fs.h	/^	ext2_ino_t	ino;$/;"	m	struct:ext2_db_entry	access:public
ino	libmke2fs/ext2fs.h	/^	ext2_ino_t	ino;$/;"	m	struct:ext2_db_entry2	access:public
ino	libmke2fs/ext2fsP.h	/^	ext2_ino_t		ino;$/;"	m	struct:ext2_inode_cache_ent	access:public
inode	libmke2fs/ext2fsP.h	/^	struct ext2_inode	inode;$/;"	m	struct:ext2_inode_cache_ent	typeref:struct:ext2_inode_cache_ent::ext2_inode	access:public
inode_blocks_per_group	libmke2fs/ext2fs.h	/^	unsigned int			inode_blocks_per_group;$/;"	m	struct:struct_ext2_filsys	access:public
inode_map	libmke2fs/ext2fs.h	/^	ext2fs_inode_bitmap		inode_map;$/;"	m	struct:struct_ext2_filsys	access:public
inode_ratio	libmke2fs/mke2fs.h	/^	int inode_ratio;$/;"	m	struct:e2fs_cfg	access:public
inode_size	libmke2fs/mke2fs.h	/^	int inode_size;$/;"	m	struct:e2fs_cfg	access:public
int_log10	libmke2fs/mke2fs.c	/^static int int_log10(unsigned long long arg)$/;"	f	file:	signature:(unsigned long long arg)
int_log2	libmke2fs/mke2fs.c	/^static int int_log2(unsigned long long arg)$/;"	f	file:	signature:(unsigned long long arg)
intel_dev	libmdadm/super-intel.c	/^struct intel_dev {$/;"	s	file:
intel_dev::dev	libmdadm/super-intel.c	/^	struct imsm_dev *dev;$/;"	m	struct:intel_dev	typeref:struct:intel_dev::imsm_dev	file:	access:public
intel_dev::index	libmdadm/super-intel.c	/^	unsigned index;$/;"	m	struct:intel_dev	file:	access:public
intel_dev::next	libmdadm/super-intel.c	/^	struct intel_dev *next;$/;"	m	struct:intel_dev	typeref:struct:intel_dev::intel_dev	file:	access:public
intel_devices	libmdadm/platform-intel.c	/^static struct sys_dev *intel_devices=NULL;$/;"	v	typeref:struct:sys_dev	file:
intel_disk	libmdadm/super-intel.c	/^struct intel_disk {$/;"	s	file:
intel_disk::disk	libmdadm/super-intel.c	/^	struct imsm_disk disk;$/;"	m	struct:intel_disk	typeref:struct:intel_disk::imsm_disk	file:	access:public
intel_disk::next	libmdadm/super-intel.c	/^	struct intel_disk *next;$/;"	m	struct:intel_disk	typeref:struct:intel_disk::intel_disk	file:	access:public
intel_disk::owner	libmdadm/super-intel.c	/^	int owner;$/;"	m	struct:intel_disk	file:	access:public
intel_hba	libmdadm/super-intel.c	/^struct intel_hba {$/;"	s	file:
intel_hba::next	libmdadm/super-intel.c	/^	struct intel_hba *next;$/;"	m	struct:intel_hba	typeref:struct:intel_hba::intel_hba	file:	access:public
intel_hba::path	libmdadm/super-intel.c	/^	char *path;$/;"	m	struct:intel_hba	file:	access:public
intel_hba::pci_id	libmdadm/super-intel.c	/^	char *pci_id;$/;"	m	struct:intel_hba	file:	access:public
intel_hba::type	libmdadm/super-intel.c	/^	enum sys_dev_type type;$/;"	m	struct:intel_hba	typeref:enum:intel_hba::sys_dev_type	file:	access:public
intel_super	libmdadm/super-intel.c	/^struct intel_super {$/;"	s	file:
intel_super::__anon10::anchor	libmdadm/super-intel.c	/^		struct imsm_super *anchor; \/* immovable parameters *\/$/;"	m	union:intel_super::__anon10	typeref:struct:intel_super::__anon10::imsm_super	file:	access:public
intel_super::__anon10::buf	libmdadm/super-intel.c	/^		void *buf; \/* O_DIRECT buffer for reading\/writing metadata *\/$/;"	m	union:intel_super::__anon10	file:	access:public
intel_super::__anon11::migr_rec	libmdadm/super-intel.c	/^		struct migr_record *migr_rec; \/* migration record *\/$/;"	m	union:intel_super::__anon11	typeref:struct:intel_super::__anon11::migr_record	file:	access:public
intel_super::__anon11::migr_rec_buf	libmdadm/super-intel.c	/^		void *migr_rec_buf; \/* buffer for I\/O operations *\/$/;"	m	union:intel_super::__anon11	file:	access:public
intel_super::bbm_log	libmdadm/super-intel.c	/^	struct bbm_log *bbm_log;$/;"	m	struct:intel_super	typeref:struct:intel_super::bbm_log	file:	access:public
intel_super::clean_migration_record_by_mdmon	libmdadm/super-intel.c	/^	int clean_migration_record_by_mdmon; \/* when reshape is switched to next$/;"	m	struct:intel_super	file:	access:public
intel_super::create_offset	libmdadm/super-intel.c	/^	unsigned long long create_offset; \/* common start for 'current_vol' *\/$/;"	m	struct:intel_super	file:	access:public
intel_super::current_disk	libmdadm/super-intel.c	/^	} *disks, *current_disk;$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
intel_super::current_vol	libmdadm/super-intel.c	/^	int current_vol; \/* index of raid device undergoing creation *\/$/;"	m	struct:intel_super	file:	access:public
intel_super::devlist	libmdadm/super-intel.c	/^	struct intel_dev *devlist;$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_dev	file:	access:public
intel_super::disk_mgmt_list	libmdadm/super-intel.c	/^	struct dl *disk_mgmt_list; \/* list of disks to add\/remove while mdmon$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
intel_super::disks	libmdadm/super-intel.c	/^	} *disks, *current_disk;$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
intel_super::dl	libmdadm/super-intel.c	/^	struct dl {$/;"	s	struct:intel_super	file:	access:public
intel_super::dl::action	libmdadm/super-intel.c	/^		enum action action;$/;"	m	struct:intel_super::dl	typeref:enum:intel_super::dl::action	file:	access:public
intel_super::dl::devname	libmdadm/super-intel.c	/^		char *devname;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::disk	libmdadm/super-intel.c	/^		struct imsm_disk disk;$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::imsm_disk	file:	access:public
intel_super::dl::e	libmdadm/super-intel.c	/^		struct extent *e; \/* for determining freespace @ create *\/$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::extent	file:	access:public
intel_super::dl::extent_cnt	libmdadm/super-intel.c	/^		int extent_cnt;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::fd	libmdadm/super-intel.c	/^		int fd;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::index	libmdadm/super-intel.c	/^		int index;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::major	libmdadm/super-intel.c	/^		int major, minor;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::minor	libmdadm/super-intel.c	/^		int major, minor;$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::next	libmdadm/super-intel.c	/^		struct dl *next;$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::dl	file:	access:public
intel_super::dl::raiddisk	libmdadm/super-intel.c	/^		int raiddisk; \/* slot to fill in autolayout *\/$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::dl::serial	libmdadm/super-intel.c	/^		__u8 serial[MAX_RAID_SERIAL_LEN];$/;"	m	struct:intel_super::dl	file:	access:public
intel_super::hba	libmdadm/super-intel.c	/^	struct intel_hba *hba; \/* device path of the raid controller for this metadata *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_hba	file:	access:public
intel_super::len	libmdadm/super-intel.c	/^	size_t len; \/* size of the 'buf' allocation *\/$/;"	m	struct:intel_super	file:	access:public
intel_super::missing	libmdadm/super-intel.c	/^	struct dl *missing; \/* disks removed while we weren't looking *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
intel_super::next	libmdadm/super-intel.c	/^	struct intel_super *next; \/* (temp) list for disambiguating family_num *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_super	file:	access:public
intel_super::next_buf	libmdadm/super-intel.c	/^	void *next_buf; \/* for realloc'ing buf from the manager *\/$/;"	m	struct:intel_super	file:	access:public
intel_super::next_len	libmdadm/super-intel.c	/^	size_t next_len;$/;"	m	struct:intel_super	file:	access:public
intel_super::orom	libmdadm/super-intel.c	/^	const struct imsm_orom *orom; \/* platform firmware support *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::imsm_orom	file:	access:public
intel_super::random	libmdadm/super-intel.c	/^	__u32 random; \/* random data for seeding new family numbers *\/$/;"	m	struct:intel_super	file:	access:public
intel_super::updates_pending	libmdadm/super-intel.c	/^	int updates_pending; \/* count of pending updates for mdmon *\/$/;"	m	struct:intel_super	file:	access:public
invalid_backup	libmdadm/mdadm.h	/^	int	invalid_backup;$/;"	m	struct:context	access:public
invalid_block	libmke2fs/mke2fs.c	/^static void invalid_block(ext2_filsys fs EXT2FS_ATTR((unused)), blk_t blk)$/;"	p	file:	signature:(unused)
io	libmke2fs/ext2fs.h	/^	io_channel			io;$/;"	m	struct:struct_ext2_filsys	access:public
is_bare	libmdadm/Incremental.c	/^static int is_bare(int dfd)$/;"	f	file:	signature:(int dfd)
is_configured	libmdadm/super-intel.c	/^static int is_configured(struct imsm_disk *disk)$/;"	f	file:	signature:(struct imsm_disk *disk)
is_container_member	libmdadm/mdadm.h	/^extern int is_container_member(struct mdstat_ent *ent, char *devname);$/;"	p	signature:(struct mdstat_ent *ent, char *devname)
is_container_member	libmdadm/mdmon.h	/^int is_container_member(struct mdstat_ent *mdstat, char *container);$/;"	p	signature:(struct mdstat_ent *mdstat, char *container)
is_container_member	libmdadm/util.c	/^int is_container_member(struct mdstat_ent *mdstat, char *container)$/;"	f	signature:(struct mdstat_ent *mdstat, char *container)
is_ddf	libmdadm/restripe.c	/^static int is_ddf(int layout)$/;"	f	file:	signature:(int layout)
is_failed	libmdadm/super-intel.c	/^static int is_failed(struct imsm_disk *disk)$/;"	f	file:	signature:(struct imsm_disk *disk)
is_gen_migration	libmdadm/super-intel.c	/^static int is_gen_migration(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
is_gen_migration	libmdadm/super-intel.c	/^static int is_gen_migration(struct imsm_dev *dev);$/;"	p	file:	signature:(struct imsm_dev *dev)
is_initializing	libmdadm/super-intel.c	/^static int is_initializing(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
is_member_busy	libmdadm/Assemble.c	/^static int is_member_busy(char *metadata_version)$/;"	f	file:	signature:(char *metadata_version)
is_number	libmdadm/config.c	/^static int is_number(char *w)$/;"	f	file:	signature:(char *w)
is_raid_level_supported	libmdadm/super-intel.c	/^static int is_raid_level_supported(const struct imsm_orom *orom, int level, int raiddisks)$/;"	f	file:	signature:(const struct imsm_orom *orom, int level, int raiddisks)
is_rebuilding	libmdadm/super-intel.c	/^static int is_rebuilding(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
is_resync_complete	libmdadm/mdmon.h	/^static inline int is_resync_complete(struct mdinfo *array)$/;"	f	signature:(struct mdinfo *array)
is_resyncing	libmdadm/super-intel.c	/^static int is_resyncing(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
is_spare	libmdadm/super-intel.c	/^static int is_spare(struct imsm_disk *disk)$/;"	f	file:	signature:(struct imsm_disk *disk)
is_standard	libmdadm/mdadm.h	/^extern int is_standard(char *dev, int *nump);$/;"	p	signature:(char *dev, int *nump)
is_standard	libmdadm/util.c	/^int is_standard(char *dev, int *nump)$/;"	f	signature:(char *dev, int *nump)
is_subarray	libmdadm/mdadm.h	/^static inline int is_subarray(char *vers)$/;"	f	signature:(char *vers)
is_subarray_active	libmdadm/mdadm.h	/^extern int is_subarray_active(char *subarray, char *devname);$/;"	p	signature:(char *subarray, char *devname)
is_subarray_active	libmdadm/util.c	/^int is_subarray_active(char *subarray, char *container)$/;"	f	signature:(char *subarray, char *container)
isa_bus_to_virt	libmdadm/probe_roms.c	/^static void *isa_bus_to_virt(unsigned long addr)$/;"	f	file:	signature:(unsigned long addr)
isatty	libmke2fs/mke2fs.c	/^extern int isatty(int);$/;"	p	file:	signature:(int)
join_u32	libmdadm/super-intel.c	/^static unsigned long long join_u32(__u32 lo, __u32 hi)$/;"	f	file:	signature:(__u32 lo, __u32 hi)
journal_device	libmke2fs/mke2fs.c	/^char *journal_device;$/;"	v
journal_flags	libmke2fs/mke2fs.c	/^int	journal_flags;$/;"	v
journal_size	libmke2fs/mke2fs.c	/^int	journal_size;$/;"	v
journal_size	libmke2fs/mke2fs.h	/^	int journal_size;$/;"	m	struct:e2fs_cfg	access:public
keywords	libmdadm/config.c	/^char *keywords[] = {$/;"	v
kill_subarray	libmdadm/mdadm.h	/^	int (*kill_subarray)(struct supertype *st); \/* optional *\/$/;"	m	struct:superswitch	access:public
kill_subarray_ddf	libmdadm/super-ddf.c	/^static int kill_subarray_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
kill_subarray_imsm	libmdadm/super-intel.c	/^static int kill_subarray_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
last_checkpoint	libmdadm/mdmon.h	/^	unsigned long long last_checkpoint; \/* sync_completed fires for many$/;"	m	struct:active_array	access:public
last_cyl	libmdadm/part.h	/^  __u8 last_cyl;$/;"	m	struct:MBR_part_record	access:public
last_head	libmdadm/part.h	/^  __u8 last_head;$/;"	m	struct:MBR_part_record	access:public
last_lba	libmdadm/part.h	/^	__u64 last_lba;$/;"	m	struct:GPT	access:public
last_sector	libmdadm/part.h	/^  __u8 last_sector;$/;"	m	struct:MBR_part_record	access:public
last_stat	libmke2fs/profile.c	/^	time_t		last_stat;$/;"	m	struct:_prf_file_t	file:	access:public
layout	libmdadm/md_p.h	/^	__u32 layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:mdp_superblock_s	access:public
layout	libmdadm/md_u.h	/^	int layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:mdu_array_info_s	access:public
layout	libmdadm/mdadm.h	/^		int layout;$/;"	m	struct:reshape::__anon16	access:public
layout	libmdadm/mdadm.h	/^	int	layout;$/;"	m	struct:shape	access:public
layout	libmdadm/super-intel.c	/^	int layout;$/;"	m	struct:geo_params	file:	access:public
layout	libmdadm/super1.c	/^	__u32	layout;		\/* only for raid5 currently *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
layout_ddf2md	libmdadm/super-ddf.c	/^static int layout_ddf2md(const struct vd_config *conf,$/;"	f	file:	signature:(const struct vd_config *conf, mdu_array_info_t *array)
layout_md2ddf	libmdadm/super-ddf.c	/^static int layout_md2ddf(const mdu_array_info_t *array,$/;"	f	file:	signature:(const mdu_array_info_t *array, struct vd_config *conf)
layout_str	libmdadm/mdadm.h	/^	char	*layout_str;$/;"	m	struct:shape	access:public
lazy_itable_init	libmke2fs/mke2fs.c	/^static int	lazy_itable_init;$/;"	v	file:
len	libmdadm/mdadm.h	/^	int	len;$/;"	m	struct:metadata_update	access:public
len	libmdadm/platform-intel.h	/^	__u8 len; \/* number of bytes in this entire table *\/$/;"	m	struct:imsm_orom	access:public
len	libmdadm/super-intel.c	/^	size_t len; \/* size of the 'buf' allocation *\/$/;"	m	struct:intel_super	file:	access:public
length	libmdadm/Grow.c	/^	__u64	length;$/;"	m	struct:mdp_backup_super	file:	access:public
length	libmdadm/util.c	/^	long long length;		\/* length in bytes *\/$/;"	m	struct:blkpg_partition	file:	access:public
length2	libmdadm/Grow.c	/^	__u64	length2;$/;"	m	struct:mdp_backup_super	file:	access:public
level	libmdadm/md_p.h	/^	__u32 level;		\/*  7 Raid personality			      *\/$/;"	m	struct:mdp_superblock_s	access:public
level	libmdadm/md_u.h	/^	int level;$/;"	m	struct:mdu_array_info_s	access:public
level	libmdadm/mdadm.h	/^	char		*level;$/;"	m	struct:mdstat_ent	access:public
level	libmdadm/mdadm.h	/^	int	level;$/;"	m	struct:mddev_ident	access:public
level	libmdadm/mdadm.h	/^	int	level;$/;"	m	struct:shape	access:public
level	libmdadm/mdadm.h	/^	int level;$/;"	m	struct:reshape	access:public
level	libmdadm/super-intel.c	/^	int level;$/;"	m	struct:geo_params	file:	access:public
level	libmdadm/super1.c	/^	__u32	level;		\/* -4 (multipath), -1 (linear), 0,1,4,5 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
lf	libmdadm/mapfile.c	/^static FILE *lf = NULL;$/;"	v	file:
line_num	libmke2fs/profile.c	/^	int	line_num;$/;"	m	struct:parse_state	file:	access:public
linetype	libmdadm/config.c	/^enum linetype { Devices, Array, Mailaddr, Mailfrom, Program, CreateDev,$/;"	g	file:
link	libmke2fs/prof_err.c	/^static struct et_list link = { 0, 0 };$/;"	v	typeref:struct:et_list	file:
link_containers_with_subarrays	libmdadm/Monitor.c	/^static void link_containers_with_subarrays(struct state *list)$/;"	f	file:	signature:(struct state *list)
link_containers_with_subarrays	libmdadm/Monitor.c	/^static void link_containers_with_subarrays(struct state *list);$/;"	p	file:	signature:(struct state *list)
linux_version_code	libmke2fs/mke2fs.c	/^static int linux_version_code = 0;$/;"	v	file:
list	libmdadm/bitmap.h	/^	struct list_head list;$/;"	m	struct:page_list	typeref:struct:page_list::list_head	access:public
list	libmke2fs/ext2fsP.h	/^	__u32	*list;$/;"	m	struct:ext2_struct_u32_list	access:public
list	libmke2fs/ext2fsP.h	/^	struct ext2_db_entry2 *	list;$/;"	m	struct:ext2_struct_dblist	typeref:struct:ext2_struct_dblist::ext2_db_entry2	access:public
list	libmke2fs/mke2fs.c	/^	char **list;$/;"	m	struct:str_list	file:	access:public
load_and_parse_mpb	libmdadm/super-intel.c	/^load_and_parse_mpb(int fd, struct intel_super *super, char *devname, int keep_fd)$/;"	f	file:	signature:(int fd, struct intel_super *super, char *devname, int keep_fd)
load_conffile	libmdadm/config.c	/^void load_conffile(void)$/;"	f	signature:(void)
load_container	libmdadm/mdadm.h	/^	int (*load_container)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
load_container_ddf	libmdadm/super-ddf.c	/^static int load_container_ddf(struct supertype *st, int fd,$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_container_imsm	libmdadm/super-intel.c	/^static int load_container_imsm(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_containers	libmdadm/config.c	/^struct mddev_dev *load_containers(void)$/;"	f	signature:(void)
load_ddf_global	libmdadm/super-ddf.c	/^static int load_ddf_global(int fd, struct ddf_super *super, char *devname)$/;"	f	file:	signature:(int fd, struct ddf_super *super, char *devname)
load_ddf_header	libmdadm/super-ddf.c	/^static int load_ddf_header(int fd, unsigned long long lba,$/;"	f	file:	signature:(int fd, unsigned long long lba, unsigned long long size, int type, struct ddf_header *hdr, struct ddf_header *anchor)
load_ddf_headers	libmdadm/super-ddf.c	/^static int load_ddf_headers(int fd, struct ddf_super *super, char *devname)$/;"	f	file:	signature:(int fd, struct ddf_super *super, char *devname)
load_ddf_local	libmdadm/super-ddf.c	/^static int load_ddf_local(int fd, struct ddf_super *super,$/;"	f	file:	signature:(int fd, struct ddf_super *super, char *devname, int keep)
load_devices	libmdadm/Assemble.c	/^static int load_devices(struct devs *devices, char *devmap,$/;"	f	file:	signature:(struct devs *devices, char *devmap, struct mddev_ident *ident, struct supertype **stp, struct mddev_dev *devlist, struct context *c, struct mdinfo *content, int mdfd, char *mddev, int *most_recentp, int *bestcntp, int **bestp, int inargv)
load_gpt	libmdadm/super-gpt.c	/^static int load_gpt(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_imsm_disk	libmdadm/super-intel.c	/^load_imsm_disk(int fd, struct intel_super *super, char *devname, int keep_fd)$/;"	f	file:	signature:(int fd, struct intel_super *super, char *devname, int keep_fd)
load_imsm_migr_rec	libmdadm/super-intel.c	/^static int load_imsm_migr_rec(struct intel_super *super, struct mdinfo *info)$/;"	f	file:	signature:(struct intel_super *super, struct mdinfo *info)
load_imsm_mpb	libmdadm/super-intel.c	/^static int load_imsm_mpb(int fd, struct intel_super *super, char *devname)$/;"	f	file:	signature:(int fd, struct intel_super *super, char *devname)
load_partitions	libmdadm/config.c	/^struct mddev_dev *load_partitions(void)$/;"	f	signature:(void)
load_section	libmdadm/super-ddf.c	/^static void *load_section(int fd, struct ddf_super *super, void *buf,$/;"	f	file:	signature:(int fd, struct ddf_super *super, void *buf, be32 offset_be, be32 len_be, int check)
load_super	libmdadm/mdadm.h	/^	int (*load_super)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
load_super0	libmdadm/super0.c	/^static int load_super0(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_super1	libmdadm/super1.c	/^static int load_super1(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_super1	libmdadm/super1.c	/^static int load_super1(struct supertype *st, int fd, char *devname);$/;"	p	file:	signature:(struct supertype *st, int fd, char *devname)
load_super_ddf	libmdadm/super-ddf.c	/^static int load_super_ddf(struct supertype *st, int fd,$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_super_ddf_all	libmdadm/super-ddf.c	/^static int load_super_ddf_all(struct supertype *st, int fd,$/;"	f	file:	signature:(struct supertype *st, int fd, void **sbp, char *devname)
load_super_ddf_all	libmdadm/super-ddf.c	/^static int load_super_ddf_all(struct supertype *st, int fd,$/;"	p	file:	signature:(struct supertype *st, int fd, void **sbp, char *devname)
load_super_imsm	libmdadm/super-intel.c	/^static int load_super_imsm(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_super_imsm_all	libmdadm/super-intel.c	/^static int load_super_imsm_all(struct supertype *st, int fd, void **sbp,$/;"	f	file:	signature:(struct supertype *st, int fd, void **sbp, char *devname, struct md_list *devlist, int keep_fd)
load_super_mbr	libmdadm/super-mbr.c	/^static int load_super_mbr(struct supertype *st, int fd, char *devname)$/;"	f	file:	signature:(struct supertype *st, int fd, char *devname)
load_sys	libmdadm/mdadm.h	/^extern int load_sys(char *path, char *buf);$/;"	p	signature:(char *path, char *buf)
load_sys	libmdadm/sysfs.c	/^int load_sys(char *path, char *buf)$/;"	f	signature:(char *path, char *buf)
loaded	libmdadm/config.c	/^int loaded = 0;$/;"	v
local	libmdadm/crc32.c	58;"	d	file:
locate_backup	libmdadm/Grow.c	/^char *locate_backup(char *name)$/;"	f	signature:(char *name)
locate_backup	libmdadm/mdadm.h	/^extern char *locate_backup(char *name);$/;"	p	signature:(char *name)
locate_bitmap	libmdadm/mdadm.h	/^	void (*locate_bitmap)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
locate_bitmap0	libmdadm/super0.c	/^static void locate_bitmap0(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
locate_bitmap1	libmdadm/super1.c	/^static void locate_bitmap1(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
locate_bitmap1	libmdadm/super1.c	/^static void locate_bitmap1(struct supertype *st, int fd);$/;"	p	file:	signature:(struct supertype *st, int fd)
lock	libmdadm/bitmap.h	/^	spinlock_t lock;$/;"	m	struct:bitmap	access:public
log_max	libmke2fs/ext2fsP.h	/^	int		log_max;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
lseek64	libmdadm/mdadm.h	/^extern __off64_t lseek64 __P ((int __fd, __off64_t __offset, int __whence));$/;"	p	signature:(int __fd, __off64_t __offset, int __whence)
lseek64	libmdadm/mdadm.h	1090;"	d
lseek64	libmdadm/mdadm.h	32;"	d
m_BlockLength	RAIDManager.h	/^	uint8_t m_BlockLength[4];$/;"	m	struct:SGReadCapacity10	access:public
m_CreationTime	RAIDManager.h	/^	time_t			m_CreationTime;$/;"	m	struct:RAIDInfo	access:public
m_LogicalBlockAddr	RAIDManager.h	/^	uint8_t m_LogicalBlockAddr[4];$/;"	m	struct:SGReadCapacity10	access:public
m_RaidUUID	RAIDManager.h	/^	int32_t		m_RaidUUID[4];			\/* Get after Examine(). *\/$/;"	m	struct:RAIDDiskInfo	access:public
m_UUID	RAIDManager.h	/^	uint32_t		m_UUID[4];$/;"	m	struct:RAIDInfo	access:public
m_UpdateTime	RAIDManager.h	/^	time_t			m_UpdateTime;$/;"	m	struct:RAIDInfo	access:public
m_bFormat	FilesystemManager.h	/^	bool m_bFormat;$/;"	m	class:FilesystemManager	access:private
m_bHasMDSB	RAIDManager.h	/^	bool		m_bHasMDSB;$/;"	m	struct:RAIDDiskInfo	access:public
m_bInactive	RAIDManager.h	/^	bool			m_bInactive;$/;"	m	struct:RAIDInfo	access:public
m_bMount	FilesystemManager.h	/^	bool m_bMount;$/;"	m	class:FilesystemManager	access:private
m_bRebuilding	RAIDManager.h	/^	bool			m_bRebuilding;$/;"	m	struct:RAIDInfo	access:public
m_bSuperBlockPersistent	RAIDManager.h	/^	bool			m_bSuperBlockPersistent;$/;"	m	struct:RAIDInfo	access:public
m_bUsedMD	RAIDManager.h	/^	bool m_bUsedMD[128];$/;"	m	class:RAIDManager	access:private
m_bUsedVolume	RAIDManager.h	/^	bool m_bUsedVolume[128];$/;"	m	class:RAIDManager	access:private
m_bytePQPDT	RAIDManager.h	/^	uint8_t m_bytePQPDT; \/* bit 5-7: Peripheral Qualifier, bit 0-4: Peripheral Device Type *\/$/;"	m	struct:SGSerialNoPage	access:public
m_bytePageCode	RAIDManager.h	/^	uint8_t m_bytePageCode;$/;"	m	struct:SGSerialNoPage	access:public
m_bytePageLength	RAIDManager.h	/^	uint8_t m_bytePageLength;$/;"	m	struct:SGSerialNoPage	access:public
m_bytePageSN	RAIDManager.h	/^	uint8_t m_bytePageSN[32];$/;"	m	struct:SGSerialNoPage	access:public
m_byteReservied	RAIDManager.h	/^	uint8_t m_byteReservied;$/;"	m	struct:SGSerialNoPage	access:public
m_cs	test_utils.h	/^	CriticalSection *m_cs;$/;"	m	class:CriticalSectionLock	access:private
m_csFormat	FilesystemManager.h	/^	CriticalSection m_csFormat;$/;"	m	class:FilesystemManager	access:private
m_csMount	FilesystemManager.h	/^	CriticalSection m_csMount;$/;"	m	class:FilesystemManager	access:private
m_csRAIDDiskList	RAIDManager.h	/^	CriticalSection m_csRAIDDiskList;$/;"	m	class:RAIDManager	access:private
m_csRAIDInfoList	RAIDManager.h	/^	CriticalSection m_csRAIDInfoList;$/;"	m	class:RAIDManager	access:private
m_csSymLinkTable	RAIDManager.h	/^	CriticalSection m_csSymLinkTable;$/;"	m	class:RAIDManager	access:private
m_csUsedMD	RAIDManager.h	/^	CriticalSection m_csUsedMD;$/;"	m	class:RAIDManager	access:private
m_csUsedVolume	RAIDManager.h	/^	CriticalSection m_csUsedVolume;$/;"	m	class:RAIDManager	access:private
m_diskType	RAIDManager.h	/^	eDiskType m_diskType;$/;"	m	struct:MiscDiskInfo	access:public
m_fsMgr	RAIDManager.h	/^	smart_ptr<FilesystemManager> m_fsMgr;$/;"	m	struct:RAIDInfo	access:public
m_iActiveDiskNum	RAIDManager.h	/^	int32_t			m_iActiveDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_iChunkSize	RAIDManager.h	/^	int32_t			m_iChunkSize;$/;"	m	struct:RAIDInfo	access:public
m_iFailedDiskNum	RAIDManager.h	/^	int32_t			m_iFailedDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_iFormatProgress	FilesystemManager.h	/^	int m_iFormatProgress;$/;"	m	class:FilesystemManager	access:private
m_iFormatingState	FilesystemManager.h	/^	int m_iFormatingState;$/;"	m	class:FilesystemManager	access:private
m_iLock	test_utils.h	/^	int m_iLock;$/;"	m	class:CriticalSection	access:private
m_iMDNum	RAIDManager.h	/^	int32_t			m_iMDNum;$/;"	m	struct:RAIDInfo	access:public
m_iMajor	RAIDManager.h	/^	int32_t		m_iMajor;				\/* For confirming whether disk is valid or not. *\/$/;"	m	struct:RAIDDiskInfo	access:public
m_iMinor	RAIDManager.h	/^	int32_t		m_iMinor;				\/* For confirming whether disk is valid or not. *\/$/;"	m	struct:RAIDDiskInfo	access:public
m_iRAIDDiskNum	RAIDManager.h	/^	int32_t			m_iRAIDDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_iRAIDLevel	RAIDManager.h	/^	int32_t			m_iRAIDLevel;$/;"	m	struct:RAIDInfo	access:public
m_iRaidDiskNum	RAIDManager.h	/^	int32_t		m_iRaidDiskNum;$/;"	m	struct:RAIDDiskInfo	access:public
m_iRebuildingProgress	RAIDManager.h	/^	int32_t			m_iRebuildingProgress;$/;"	m	struct:RAIDInfo	access:public
m_iSpareDiskNum	RAIDManager.h	/^	int32_t			m_iSpareDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_iState	RAIDManager.h	/^	int32_t			m_iState;$/;"	m	struct:RAIDInfo	access:public
m_iState	RAIDManager.h	/^	int32_t		m_iState;$/;"	m	struct:RAIDDiskInfo	access:public
m_iTotalDiskNum	RAIDManager.h	/^	int32_t			m_iTotalDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_iVolumeNum	FilesystemManager.h	/^	int m_iVolumeNum;$/;"	m	class:FilesystemManager	access:private
m_iWorkingDiskNum	RAIDManager.h	/^	int32_t			m_iWorkingDiskNum;$/;"	m	struct:RAIDInfo	access:public
m_llCapacity	RAIDManager.h	/^	int64_t		m_llCapacity;$/;"	m	struct:RAIDDiskInfo	access:public
m_mapSymLinkTable	RAIDManager.h	/^	map<string, MiscDiskInfo> m_mapSymLinkTable; \/* string: real device node*\/$/;"	m	class:RAIDManager	access:private
m_miscInfo	RAIDManager.h	/^	MiscDiskInfo m_miscInfo;$/;"	m	struct:RAIDDiskInfo	access:public
m_mkfsHandle	FilesystemManager.h	/^	mke2fs_handle m_mkfsHandle;$/;"	m	class:FilesystemManager	access:private
m_strDevName	RAIDManager.h	/^	string		m_strDevName;			\/* Device node *\/$/;"	m	struct:RAIDDiskInfo	access:public
m_strDevNode	FilesystemManager.h	/^	string m_strDevNode;$/;"	m	class:FilesystemManager	access:private
m_strDevNodeName	RAIDManager.h	/^	string			m_strDevNodeName;$/;"	m	struct:RAIDInfo	access:public
m_strFSType	FilesystemManager.h	/^	string m_strFSType;$/;"	m	class:FilesystemManager	access:private
m_strFirmwareVersion	RAIDManager.h	/^	string		m_strFirmwareVersion;$/;"	m	struct:RAIDDiskInfo	access:public
m_strLayout	RAIDManager.h	/^	string			m_strLayout;$/;"	m	struct:RAIDInfo	access:public
m_strMDDev	RAIDManager.h	/^	string m_strMDDev;$/;"	m	struct:MiscDiskInfo	access:public
m_strModel	RAIDManager.h	/^	string		m_strModel;$/;"	m	struct:RAIDDiskInfo	access:public
m_strMountPoint	FilesystemManager.h	/^	string m_strMountPoint;$/;"	m	class:FilesystemManager	access:private
m_strRebuildingOperation	RAIDManager.h	/^	string			m_strRebuildingOperation;$/;"	m	struct:RAIDInfo	access:public
m_strSerialNum	RAIDManager.h	/^	string		m_strSerialNum;$/;"	m	struct:RAIDDiskInfo	access:public
m_strState	RAIDManager.h	/^	string			m_strState;$/;"	m	struct:RAIDInfo	access:public
m_strState	RAIDManager.h	/^	string		m_strState;$/;"	m	struct:RAIDDiskInfo	access:public
m_strSymLink	RAIDManager.h	/^	string m_strSymLink;$/;"	m	struct:MiscDiskInfo	access:public
m_strUUID	FilesystemManager.h	/^	string m_strUUID;$/;"	m	class:FilesystemManager	access:private
m_strVendor	RAIDManager.h	/^	string		m_strVendor;$/;"	m	struct:RAIDDiskInfo	access:public
m_ullTotalCapacity	RAIDManager.h	/^	int64_t			m_ullTotalCapacity;$/;"	m	struct:RAIDInfo	access:public
m_ullUsedSize	RAIDManager.h	/^	int64_t			m_ullUsedSize;$/;"	m	struct:RAIDInfo	access:public
m_vDiskList	RAIDManager.h	/^	vector<RAIDDiskInfo>	m_vDiskList;$/;"	m	struct:RAIDInfo	access:public
m_vRAIDDiskList	RAIDManager.h	/^	vector<RAIDDiskInfo> m_vRAIDDiskList;$/;"	m	class:RAIDManager	access:private
m_vRAIDInfoList	RAIDManager.h	/^	vector<RAIDInfo> m_vRAIDInfoList;$/;"	m	class:RAIDManager	access:private
magic	libmdadm/Grow.c	/^	char	magic[16];  \/* md_backup_data-1 or -2 *\/$/;"	m	struct:mdp_backup_super	file:	access:public
magic	libmdadm/bitmap.h	/^	__u32 magic;        \/*  0  BITMAP_MAGIC *\/$/;"	m	struct:bitmap_super_s	access:public
magic	libmdadm/part.h	/^	__u16 magic;$/;"	m	struct:MBR	access:public
magic	libmdadm/part.h	/^	__u64 magic;$/;"	m	struct:GPT	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;			\/* DDF_CONTROLLER_MAGIC *\/$/;"	m	struct:ddf_controller_data	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_HEADER_MAGIC *\/$/;"	m	struct:ddf_header	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_PHYS_DATA_MAGIC *\/$/;"	m	struct:disk_data	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_PHYS_RECORDS_MAGIC *\/$/;"	m	struct:phys_disk	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_SPARE_ASSIGN_MAGIC *\/$/;"	m	struct:spare_assign	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_VD_CONF_MAGIC *\/$/;"	m	struct:vd_config	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_VIRT_RECORDS_MAGIC *\/$/;"	m	struct:virtual_disk	file:	access:public
magic	libmdadm/super-ddf.c	/^	be32	magic;$/;"	m	struct:bad_block_log	file:	access:public
magic	libmdadm/super1.c	/^	__u32	magic;		\/* MD_SB_MAGIC: 0xa92b4efc - little endian *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
magic	libmke2fs/ext2fs.h	/^	errcode_t			magic;$/;"	m	struct:struct_ext2_filsys	access:public
magic	libmke2fs/ext2fsP.h	/^	int			magic;$/;"	m	struct:ext2_struct_dblist	access:public
magic	libmke2fs/ext2fsP.h	/^	int			magic;$/;"	m	struct:ext2_struct_u32_iterate	access:public
magic	libmke2fs/ext2fsP.h	/^	int	magic;$/;"	m	struct:ext2_struct_u32_list	access:public
magic	libmke2fs/profile.c	/^	errcode_t	magic;$/;"	m	struct:profile_node	file:	access:public
magic	libmke2fs/profile.c	/^	prf_magic_t		magic;$/;"	m	struct:profile_iterator	file:	access:public
magic	libmke2fs/profile.c	/^	prf_magic_t	magic;$/;"	m	struct:_prf_file_t	file:	access:public
magic	libmke2fs/profile.c	/^	prf_magic_t	magic;$/;"	m	struct:_profile_t	file:	access:public
mailaddr	libmdadm/Monitor.c	/^	char *mailaddr;$/;"	m	struct:alert_info	file:	access:public
mailfrom	libmdadm/Monitor.c	/^	char *mailfrom;$/;"	m	struct:alert_info	file:	access:public
mailfromline	libmdadm/config.c	/^void mailfromline(char *line)$/;"	f	signature:(char *line)
mailline	libmdadm/config.c	/^void mailline(char *line)$/;"	f	signature:(char *line)
main	libmdadm/restripe.c	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	libmdadm/unitest/mymdadm.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	libmke2fs/profile.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	unitest/FilesystemManager_test.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	unitest/RAIDManager_test.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
major	libmdadm/lib.c	/^	int major, minor;$/;"	m	struct:devmap	file:	access:public
major	libmdadm/md_p.h	/^	__u32 major;		\/* 1 Device major number		      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_disk_info_s	access:public
major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_start_info_s	access:public
major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_version_s	access:public
major	libmdadm/mdadm.h	1444;"	d
major	libmdadm/mdadm.h	1447;"	d
major	libmdadm/super-ddf.c	/^				int major, minor;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
major	libmdadm/super-intel.c	/^		int major, minor;$/;"	m	struct:intel_super::dl	file:	access:public
major_ver	libmdadm/platform-intel.h	/^	__u16 major_ver; \/* Example: 8 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
major_version	libmdadm/md_p.h	/^	__u32 major_version;	\/*  1 major version to which the set conforms *\/$/;"	m	struct:mdp_superblock_s	access:public
major_version	libmdadm/md_u.h	/^	int major_version;$/;"	m	struct:mdu_array_info_s	access:public
major_version	libmdadm/super1.c	/^	__u32	major_version;	\/* 1 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
make_backup	libmdadm/Grow.c	/^char *make_backup(char *name)$/;"	f	signature:(char *name)
make_backup	libmdadm/mdadm.h	/^extern char *make_backup(char *name);$/;"	p	signature:(char *name)
make_crc_table	libmdadm/crc32.c	/^local void make_crc_table OF((void));$/;"	p	file:	signature:(void)
make_crc_table	libmdadm/crc32.c	/^local void make_crc_table()$/;"	f
make_daemon	libmdadm/Monitor.c	/^static int make_daemon(char *pidfile)$/;"	f	file:	signature:(char *pidfile)
make_daemon	libmdadm/Monitor.c	/^static int make_daemon(char *pidfile);$/;"	p	file:	signature:(char *pidfile)
make_header_guid	libmdadm/super-ddf.c	/^static void make_header_guid(char *guid)$/;"	f	file:	signature:(char *guid)
make_parts	libmdadm/mdopen.c	/^void make_parts(char *dev, int cnt)$/;"	f	signature:(char *dev, int cnt)
make_tables	libmdadm/restripe.c	/^void make_tables(void)$/;"	f	signature:(void)
makedev	libmdadm/mdadm.h	1445;"	d
makedev	libmdadm/mdadm.h	1448;"	d
manage	libmdadm/managemon.c	/^void manage(struct mdstat_ent *mdstat, struct supertype *container)$/;"	f	signature:(struct mdstat_ent *mdstat, struct supertype *container)
manage_container	libmdadm/managemon.c	/^static void manage_container(struct mdstat_ent *mdstat,$/;"	f	file:	signature:(struct mdstat_ent *mdstat, struct supertype *container)
manage_member	libmdadm/managemon.c	/^static void manage_member(struct mdstat_ent *mdstat,$/;"	f	file:	signature:(struct mdstat_ent *mdstat, struct active_array *a)
manage_new	libmdadm/managemon.c	/^static void manage_new(struct mdstat_ent *mdstat,$/;"	f	file:	signature:(struct mdstat_ent *mdstat, struct supertype *container, struct active_array *victim)
manage_reshape	libmdadm/mdadm.h	/^	int (*manage_reshape)( \/* optional *\/$/;"	m	struct:superswitch	access:public
manage_second_map	libmdadm/super-intel.c	/^static void manage_second_map(struct intel_super *super, struct imsm_dev *dev)$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev)
manager_ready	libmdadm/managemon.c	/^int manager_ready = 0;$/;"	v
map	libmdadm/bitmap.h	/^	char *map;$/;"	m	struct:bitmap_page	access:public
map	libmdadm/super-intel.c	/^	struct imsm_map map[1];$/;"	m	struct:imsm_vol	typeref:struct:imsm_vol::imsm_map	file:	access:public
map_act	libmdadm/policy.c	/^static enum policy_action map_act(const char *act)$/;"	f	file:	signature:(const char *act)
map_add	libmdadm/mapfile.c	/^void map_add(struct map_ent **melp,$/;"	f	signature:(struct map_ent **melp, char * devnm, char *metadata, int uuid[4], char *path)
map_add	libmdadm/mdadm.h	/^extern void map_add(struct map_ent **melp,$/;"	p	signature:(struct map_ent **melp, char *devnm, char *metadata, int uuid[4], char *path)
map_by_devnm	libmdadm/mapfile.c	/^struct map_ent *map_by_devnm(struct map_ent **map, char *devnm)$/;"	f	signature:(struct map_ent **map, char *devnm)
map_by_devnm	libmdadm/mdadm.h	/^extern struct map_ent *map_by_devnm(struct map_ent **map, char *devnm);$/;"	p	signature:(struct map_ent **map, char *devnm)
map_by_devnm	libmdadm/mdadm.h	/^static inline struct map_ent *map_by_devnm(struct map_ent **map, char *name)$/;"	f	signature:(struct map_ent **map, char *name)
map_by_name	libmdadm/mapfile.c	/^struct map_ent *map_by_name(struct map_ent **map, char *name)$/;"	f	signature:(struct map_ent **map, char *name)
map_by_name	libmdadm/mdadm.h	/^extern struct map_ent *map_by_name(struct map_ent **map, char *name);$/;"	p	signature:(struct map_ent **map, char *name)
map_by_uuid	libmdadm/mapfile.c	/^struct map_ent *map_by_uuid(struct map_ent **map, int uuid[4])$/;"	f	signature:(struct map_ent **map, int uuid[4])
map_by_uuid	libmdadm/mdadm.h	/^extern struct map_ent *map_by_uuid(struct map_ent **map, int uuid[4]);$/;"	p	signature:(struct map_ent **map, int uuid[4])
map_delete	libmdadm/mapfile.c	/^void map_delete(struct map_ent **mapp, char *devnm)$/;"	f	signature:(struct map_ent **mapp, char *devnm)
map_delete	libmdadm/mdadm.h	/^extern void map_delete(struct map_ent **mapp, char *devnm);$/;"	p	signature:(struct map_ent **mapp, char *devnm)
map_dev	libmdadm/mdadm.h	/^static inline char *map_dev(int major, int minor, int create)$/;"	f	signature:(int major, int minor, int create)
map_dev_preferred	libmdadm/lib.c	/^char *map_dev_preferred(int major, int minor, int create,$/;"	f	signature:(int major, int minor, int create, char *prefer)
map_dev_preferred	libmdadm/mdadm.h	/^extern char *map_dev_preferred(int major, int minor, int create,$/;"	p	signature:(int major, int minor, int create, char *prefer)
map_ent	libmdadm/mdadm.h	/^struct map_ent {$/;"	s
map_ent::bad	libmdadm/mdadm.h	/^	int	bad;$/;"	m	struct:map_ent	access:public
map_ent::devnm	libmdadm/mdadm.h	/^	char	devnm[32];$/;"	m	struct:map_ent	access:public
map_ent::metadata	libmdadm/mdadm.h	/^	char	metadata[20];$/;"	m	struct:map_ent	access:public
map_ent::next	libmdadm/mdadm.h	/^	struct map_ent *next;$/;"	m	struct:map_ent	typeref:struct:map_ent::map_ent	access:public
map_ent::path	libmdadm/mdadm.h	/^	char	*path;$/;"	m	struct:map_ent	access:public
map_ent::uuid	libmdadm/mdadm.h	/^	int	uuid[4];$/;"	m	struct:map_ent	access:public
map_fork	libmdadm/mapfile.c	/^void map_fork(void)$/;"	f	signature:(void)
map_fork	libmdadm/mdadm.h	/^extern void map_fork(void);$/;"	p	signature:(void)
map_free	libmdadm/mapfile.c	/^void map_free(struct map_ent *map)$/;"	f	signature:(struct map_ent *map)
map_free	libmdadm/mdadm.h	/^extern void map_free(struct map_ent *map);$/;"	p	signature:(struct map_ent *map)
map_free	libmdadm/mdadm.h	/^static inline void map_free(struct map_ent *map)$/;"	f	signature:(struct map_ent *map)
map_lock	libmdadm/mapfile.c	/^int map_lock(struct map_ent **melp)$/;"	f	signature:(struct map_ent **melp)
map_lock	libmdadm/mdadm.h	/^extern int map_lock(struct map_ent **melp);$/;"	p	signature:(struct map_ent **melp)
map_migr_block	libmdadm/super-intel.c	/^static __u32 map_migr_block(struct imsm_dev *dev, __u32 block)$/;"	f	file:	signature:(struct imsm_dev *dev, __u32 block)
map_name	libmdadm/maps.c	/^int map_name(mapping_t *map, char *name)$/;"	f	signature:(mapping_t *map, char *name)
map_name	libmdadm/mdadm.h	/^extern int map_name(mapping_t *map, char *name);$/;"	p	signature:(mapping_t *map, char *name)
map_num	libmdadm/maps.c	/^char *map_num(mapping_t *map, int num)$/;"	f	signature:(mapping_t *map, int num)
map_num	libmdadm/mdadm.h	/^extern char *map_num(mapping_t *map, int num);$/;"	p	signature:(mapping_t *map, int num)
map_read	libmdadm/mapfile.c	/^void map_read(struct map_ent **melp)$/;"	f	signature:(struct map_ent **melp)
map_read	libmdadm/mdadm.h	/^extern void map_read(struct map_ent **melp);$/;"	p	signature:(struct map_ent **melp)
map_remove	libmdadm/mapfile.c	/^void map_remove(struct map_ent **mapp, char *devnm)$/;"	f	signature:(struct map_ent **mapp, char *devnm)
map_remove	libmdadm/mdadm.h	/^extern void map_remove(struct map_ent **map, char *devnm);$/;"	p	signature:(struct map_ent **map, char *devnm)
map_state	libmdadm/super-intel.c	/^	__u8  map_state;	\/* Normal, Uninitialized, Degraded, Failed *\/$/;"	m	struct:imsm_map	file:	access:public
map_state_str	libmdadm/super-intel.c	/^static char *map_state_str[] = { "normal", "uninitialized", "degraded", "failed" };$/;"	v	file:
map_unlock	libmdadm/mapfile.c	/^void map_unlock(struct map_ent **melp)$/;"	f	signature:(struct map_ent **melp)
map_unlock	libmdadm/mdadm.h	/^extern void map_unlock(struct map_ent **melp);$/;"	p	signature:(struct map_ent **melp)
map_update	libmdadm/mapfile.c	/^int map_update(struct map_ent **mpp, char *devnm, char *metadata,$/;"	f	signature:(struct map_ent **mpp, char *devnm, char *metadata, int *uuid, char *path)
map_update	libmdadm/mdadm.h	/^extern int map_update(struct map_ent **mpp, char *devnm, char *metadata,$/;"	p	signature:(struct map_ent **mpp, char *devnm, char *metadata, int uuid[4], char *path)
map_write	libmdadm/mapfile.c	/^int map_write(struct map_ent *mel)$/;"	f	signature:(struct map_ent *mel)
map_write	libmdadm/mdadm.h	/^extern int map_write(struct map_ent *mel);$/;"	p	signature:(struct map_ent *mel)
mapmode	libmdadm/mapfile.c	/^int mapmode[3] = { O_RDONLY, O_RDWR|O_CREAT, O_RDWR|O_CREAT|O_TRUNC };$/;"	v
mapname	libmdadm/mapfile.c	/^char *mapname[4] = {$/;"	v
mapped_block	libmdadm/super-ddf.c	/^	struct mapped_block {$/;"	s	struct:bad_block_log	file:	access:public
mapped_block_entries	libmdadm/super-intel.c	/^	struct bbm_log_entry mapped_block_entries[BBM_LOG_MAX_ENTRIES];$/;"	m	struct:bbm_log	typeref:struct:bbm_log::bbm_log_entry	file:	access:public
mapping	libmdadm/mdadm.h	/^typedef struct mapping {$/;"	s
mapping::name	libmdadm/mdadm.h	/^	char *name;$/;"	m	struct:mapping	access:public
mapping::num	libmdadm/mdadm.h	/^	int num;$/;"	m	struct:mapping	access:public
mapping_t	libmdadm/mdadm.h	/^} mapping_t;$/;"	t	typeref:struct:mapping
mapsmode	libmdadm/mapfile.c	/^char *mapsmode[3] = { "r", "w", "w"};$/;"	v
mark_failure	libmdadm/super-intel.c	/^static int mark_failure(struct imsm_dev *dev, struct imsm_disk *disk, int idx)$/;"	f	file:	signature:(struct imsm_dev *dev, struct imsm_disk *disk, int idx)
mark_missing	libmdadm/super-intel.c	/^static void mark_missing(struct imsm_dev *dev, struct imsm_disk *disk, int idx)$/;"	f	file:	signature:(struct imsm_dev *dev, struct imsm_disk *disk, int idx)
mark_spare	libmdadm/super-intel.c	/^int mark_spare(struct dl *disk)$/;"	f	signature:(struct dl *disk)
match_home	libmdadm/mdadm.h	/^	int (*match_home)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
match_home0	libmdadm/super0.c	/^static int match_home0(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
match_home1	libmdadm/super1.c	/^static int match_home1(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
match_home_ddf	libmdadm/super-ddf.c	/^static int match_home_ddf(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
match_home_imsm	libmdadm/super-intel.c	/^static int match_home_imsm(struct supertype *st, char *homehost)$/;"	f	file:	signature:(struct supertype *st, char *homehost)
match_keyword	libmdadm/config.c	/^int match_keyword(char *word)$/;"	f	signature:(char *word)
match_metadata_desc	libmdadm/mdadm.h	/^	struct supertype * (*match_metadata_desc)(char *arg);$/;"	m	struct:superswitch	typeref:struct:superswitch::match_metadata_desc	access:public
match_metadata_desc	libmdadm/super-gpt.c	/^static struct supertype *match_metadata_desc(char *arg)$/;"	f	file:	signature:(char *arg)
match_metadata_desc	libmdadm/super-mbr.c	/^static struct supertype *match_metadata_desc(char *arg)$/;"	f	file:	signature:(char *arg)
match_metadata_desc0	libmdadm/super0.c	/^static struct supertype *match_metadata_desc0(char *arg)$/;"	f	file:	signature:(char *arg)
match_metadata_desc1	libmdadm/super1.c	/^static struct supertype *match_metadata_desc1(char *arg)$/;"	f	file:	signature:(char *arg)
match_metadata_desc_ddf	libmdadm/super-ddf.c	/^static struct supertype *match_metadata_desc_ddf(char *arg)$/;"	f	file:	signature:(char *arg)
match_metadata_desc_imsm	libmdadm/super-intel.c	/^static struct supertype *match_metadata_desc_imsm(char *arg)$/;"	f	file:	signature:(char *arg)
match_oneof	libmdadm/config.c	/^int match_oneof(char *devices, char *devname)$/;"	f	signature:(char *devices, char *devname)
match_oneof	libmdadm/mdadm.h	/^extern int match_oneof(char *devices, char *devname);$/;"	p	signature:(char *devices, char *devname)
max	libmdadm/mdadm.h	177;"	d
max	libmdadm/super-ddf.c	/^	be16	max;		\/* max SAEs *\/$/;"	m	struct:spare_assign	file:	access:public
max	libmke2fs/ext2fsP.h	/^	__u64		max;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
max	libmke2fs/mke2fs.c	/^	int max;$/;"	m	struct:str_list	file:	access:public
max	libmke2fs/profile.c	/^	size_t cur, max;$/;"	m	struct:prof_buf	file:	access:public
max_depth	libmke2fs/ext2fs.h	/^	int		max_depth;$/;"	m	struct:ext2_extent_info	access:public
max_dev	libmdadm/super1.c	/^	__u32	max_dev;	\/* size of dev_roles[] array to consider *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
max_devs	libmdadm/mdadm.h	/^	int max_devs;$/;"	m	struct:supertype	access:public
max_entries	libmke2fs/ext2fs.h	/^	int		max_entries;$/;"	m	struct:ext2_extent_info	access:public
max_fault	libmdadm/md_u.h	/^	int			max_fault;	\/* unused for now *\/$/;"	m	struct:mdu_param_s	access:public
max_lblk	libmke2fs/ext2fs.h	/^	blk64_t		max_lblk;$/;"	m	struct:ext2_extent_info	access:public
max_len	libmke2fs/ext2fs.h	/^	__u32		max_len;$/;"	m	struct:ext2_extent_info	access:public
max_part	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
max_partitions	libmdadm/super-ddf.c	/^	be16	max_partitions; \/* i.e. max num of configuration$/;"	m	struct:ddf_header	file:	access:public
max_pblk	libmke2fs/ext2fs.h	/^	blk64_t		max_pblk;$/;"	m	struct:ext2_extent_info	access:public
max_pd_entries	libmdadm/super-ddf.c	/^	be16	max_pd_entries;	\/* one of 15, 63, 255, 1023, 4095 *\/$/;"	m	struct:ddf_header	file:	access:public
max_pdes	libmdadm/super-ddf.c	/^	be16	max_pdes;$/;"	m	struct:phys_disk	file:	access:public
max_primary_element_entries	libmdadm/super-ddf.c	/^	be16	max_primary_element_entries; \/* 16, 64, 256, 1024, or 4096 *\/$/;"	m	struct:ddf_header	file:	access:public
max_uninit_len	libmke2fs/ext2fs.h	/^	__u32		max_uninit_len;$/;"	m	struct:ext2_extent_info	access:public
max_vd_entries	libmdadm/super-ddf.c	/^	be16	max_vd_entries; \/* 2^(4,6,8,10,12)-1 : i.e. as above *\/$/;"	m	struct:ddf_header	file:	access:public
max_vdes	libmdadm/super-ddf.c	/^	be16	max_vdes;$/;"	m	struct:virtual_disk	file:	access:public
mbr	libmdadm/super-mbr.c	/^struct superswitch mbr = {$/;"	v	typeref:struct:superswitch
md_event	libmdadm/md_p.h	/^static inline __u64 md_event(mdp_super_t *sb) {$/;"	f	signature:(mdp_super_t *sb)
md_get_version	libmdadm/mdadm.h	/^extern int md_get_version(int fd);$/;"	p	signature:(int fd)
md_get_version	libmdadm/util.c	/^int md_get_version(int fd)$/;"	f	signature:(int fd)
md_list	libmdadm/super-intel.c	/^struct md_list {$/;"	s	file:
md_list::container	libmdadm/super-intel.c	/^	int   container;$/;"	m	struct:md_list	file:	access:public
md_list::devname	libmdadm/super-intel.c	/^	char  *devname;$/;"	m	struct:md_list	file:	access:public
md_list::found	libmdadm/super-intel.c	/^	int   found;$/;"	m	struct:md_list	file:	access:public
md_list::next	libmdadm/super-intel.c	/^	struct md_list *next;$/;"	m	struct:md_list	typeref:struct:md_list::md_list	file:	access:public
md_list::st_rdev	libmdadm/super-intel.c	/^	dev_t st_rdev;$/;"	m	struct:md_list	file:	access:public
md_list::used	libmdadm/super-intel.c	/^	int   used;$/;"	m	struct:md_list	file:	access:public
md_magic	libmdadm/md_p.h	/^	__u32 md_magic;		\/*  0 MD identifier			      *\/$/;"	m	struct:mdp_superblock_s	access:public
md_minor	libmdadm/md_p.h	/^	__u32 md_minor;		\/* 11 preferred MD minor device number	      *\/$/;"	m	struct:mdp_superblock_s	access:public
md_minor	libmdadm/md_u.h	/^	int md_minor;$/;"	m	struct:mdu_array_info_s	access:public
mdadm_version	libmdadm/mdadm.h	/^extern int mdadm_version(char *version);$/;"	p	signature:(char *version)
mdadm_version	libmdadm/util.c	/^int mdadm_version(char *version)$/;"	f	signature:(char *version)
mddev	libmdadm/bitmap.h	/^	mddev_t *mddev; \/* the md device that the bitmap is for *\/$/;"	m	struct:bitmap	access:public
mddev_busy	libmdadm/mdadm.h	/^extern int mddev_busy(char *devnm);$/;"	p	signature:(char *devnm)
mddev_busy	libmdadm/mdstat.c	/^int mddev_busy(char *devnm)$/;"	f	signature:(char *devnm)
mddev_dev	libmdadm/mdadm.h	/^struct mddev_dev {$/;"	s
mddev_dev::data_offset	libmdadm/mdadm.h	/^	long long data_offset;$/;"	m	struct:mddev_dev	access:public
mddev_dev::devname	libmdadm/mdadm.h	/^	char *devname;$/;"	m	struct:mddev_dev	access:public
mddev_dev::disposition	libmdadm/mdadm.h	/^	int disposition;	\/* 'a' for add, 'r' for remove, 'f' for fail,$/;"	m	struct:mddev_dev	access:public
mddev_dev::next	libmdadm/mdadm.h	/^	struct mddev_dev *next;$/;"	m	struct:mddev_dev	typeref:struct:mddev_dev::mddev_dev	access:public
mddev_dev::used	libmdadm/mdadm.h	/^	int used;		\/* set when used *\/$/;"	m	struct:mddev_dev	access:public
mddev_dev::writemostly	libmdadm/mdadm.h	/^	char writemostly;	\/* 1 for 'set writemostly', 2 for 'clear writemostly' *\/$/;"	m	struct:mddev_dev	access:public
mddev_ident	libmdadm/mdadm.h	/^struct mddev_ident {$/;"	s
mddev_ident::__anon15::assembled	libmdadm/mdadm.h	/^		int assembled;	\/* set when assembly succeeds *\/$/;"	m	union:mddev_ident::__anon15	access:public
mddev_ident::autof	libmdadm/mdadm.h	/^	int	autof;		\/* 1 for normal, 2 for partitioned *\/$/;"	m	struct:mddev_ident	access:public
mddev_ident::bitmap_fd	libmdadm/mdadm.h	/^	int	bitmap_fd;$/;"	m	struct:mddev_ident	access:public
mddev_ident::bitmap_file	libmdadm/mdadm.h	/^	char	*bitmap_file;$/;"	m	struct:mddev_ident	access:public
mddev_ident::container	libmdadm/mdadm.h	/^	char	*container;	\/* \/dev\/whatever name of container, or$/;"	m	struct:mddev_ident	access:public
mddev_ident::devices	libmdadm/mdadm.h	/^	char	*devices;	\/* comma separated list of device$/;"	m	struct:mddev_ident	access:public
mddev_ident::devname	libmdadm/mdadm.h	/^	char	*devname;$/;"	m	struct:mddev_ident	access:public
mddev_ident::level	libmdadm/mdadm.h	/^	int	level;$/;"	m	struct:mddev_ident	access:public
mddev_ident::member	libmdadm/mdadm.h	/^	char	*member;	\/* subarray within a container *\/$/;"	m	struct:mddev_ident	access:public
mddev_ident::name	libmdadm/mdadm.h	/^	char	name[33];$/;"	m	struct:mddev_ident	access:public
mddev_ident::next	libmdadm/mdadm.h	/^	struct mddev_ident *next;$/;"	m	struct:mddev_ident	typeref:struct:mddev_ident::mddev_ident	access:public
mddev_ident::raid_disks	libmdadm/mdadm.h	/^	int raid_disks;$/;"	m	struct:mddev_ident	access:public
mddev_ident::spare_disks	libmdadm/mdadm.h	/^	int spare_disks;$/;"	m	struct:mddev_ident	access:public
mddev_ident::spare_group	libmdadm/mdadm.h	/^	char	*spare_group;$/;"	m	struct:mddev_ident	access:public
mddev_ident::st	libmdadm/mdadm.h	/^	struct supertype *st;$/;"	m	struct:mddev_ident	typeref:struct:mddev_ident::supertype	access:public
mddev_ident::super_minor	libmdadm/mdadm.h	/^	int super_minor;$/;"	m	struct:mddev_ident	access:public
mddev_ident::uuid	libmdadm/mdadm.h	/^	int	uuid[4];$/;"	m	struct:mddev_ident	access:public
mddev_ident::uuid_set	libmdadm/mdadm.h	/^	int	uuid_set;$/;"	m	struct:mddev_ident	access:public
mddevlist	libmdadm/config.c	/^struct mddev_ident *mddevlist = NULL;$/;"	v	typeref:struct:mddev_ident
mddevlp	libmdadm/config.c	/^struct mddev_ident **mddevlp = &mddevlist;$/;"	v	typeref:struct:mddev_ident
mdinfo	libmdadm/mdadm.h	/^struct mdinfo {$/;"	s
mdinfo::__anon14::recovery_start	libmdadm/mdadm.h	/^		unsigned long long recovery_start; \/* per-device rebuild position *\/$/;"	m	union:mdinfo::__anon14	access:public
mdinfo::__anon14::resync_start	libmdadm/mdadm.h	/^		unsigned long long resync_start; \/* per-array resync position *\/$/;"	m	union:mdinfo::__anon14	access:public
mdinfo::array	libmdadm/mdadm.h	/^	mdu_array_info_t	array;$/;"	m	struct:mdinfo	access:public
mdinfo::bitmap_offset	libmdadm/mdadm.h	/^	long			bitmap_offset;	\/* 0 == none, 1 == a file *\/$/;"	m	struct:mdinfo	access:public
mdinfo::cache_size	libmdadm/mdadm.h	/^	unsigned long		cache_size; \/* size of raid456 stripe cache*\/$/;"	m	struct:mdinfo	access:public
mdinfo::component_size	libmdadm/mdadm.h	/^	unsigned long long	component_size; \/* same as array.size, except in$/;"	m	struct:mdinfo	access:public
mdinfo::container_enough	libmdadm/mdadm.h	/^	int container_enough; \/* flag external handlers can set to$/;"	m	struct:mdinfo	access:public
mdinfo::container_member	libmdadm/mdadm.h	/^	int container_member; \/* for assembling external-metatdata arrays$/;"	m	struct:mdinfo	access:public
mdinfo::curr_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
mdinfo::custom_array_size	libmdadm/mdadm.h	/^	unsigned long long	custom_array_size; \/* size for non-default sized$/;"	m	struct:mdinfo	access:public
mdinfo::data_offset	libmdadm/mdadm.h	/^	unsigned long long	data_offset;$/;"	m	struct:mdinfo	access:public
mdinfo::delta_disks	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
mdinfo::devs	libmdadm/mdadm.h	/^	struct mdinfo *devs;$/;"	m	struct:mdinfo	typeref:struct:mdinfo::mdinfo	access:public
mdinfo::disk	libmdadm/mdadm.h	/^	mdu_disk_info_t		disk;$/;"	m	struct:mdinfo	access:public
mdinfo::errors	libmdadm/mdadm.h	/^	int			errors;$/;"	m	struct:mdinfo	access:public
mdinfo::events	libmdadm/mdadm.h	/^	__u64			events;$/;"	m	struct:mdinfo	access:public
mdinfo::mismatch_cnt	libmdadm/mdadm.h	/^	int			mismatch_cnt;$/;"	m	struct:mdinfo	access:public
mdinfo::name	libmdadm/mdadm.h	/^	char			name[33];$/;"	m	struct:mdinfo	access:public
mdinfo::new_chunk	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
mdinfo::new_data_offset	libmdadm/mdadm.h	/^	unsigned long long	new_data_offset;$/;"	m	struct:mdinfo	access:public
mdinfo::new_layout	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
mdinfo::new_level	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
mdinfo::next	libmdadm/mdadm.h	/^	struct mdinfo *next;$/;"	m	struct:mdinfo	typeref:struct:mdinfo::mdinfo	access:public
mdinfo::next_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
mdinfo::prev_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
mdinfo::recovery_blocked	libmdadm/mdadm.h	/^	int			recovery_blocked; \/* for external metadata it$/;"	m	struct:mdinfo	access:public
mdinfo::recovery_fd	libmdadm/mdadm.h	/^	int recovery_fd;$/;"	m	struct:mdinfo	access:public
mdinfo::reshape_active	libmdadm/mdadm.h	/^	int			reshape_active;$/;"	m	struct:mdinfo	access:public
mdinfo::reshape_progress	libmdadm/mdadm.h	/^	unsigned long long	reshape_progress;$/;"	m	struct:mdinfo	access:public
mdinfo::safe_mode_delay	libmdadm/mdadm.h	/^	unsigned long		safe_mode_delay; \/* ms delay to mark clean *\/$/;"	m	struct:mdinfo	access:public
mdinfo::space_after	libmdadm/mdadm.h	/^	unsigned long long	space_before, space_after;$/;"	m	struct:mdinfo	access:public
mdinfo::space_before	libmdadm/mdadm.h	/^	unsigned long long	space_before, space_after;$/;"	m	struct:mdinfo	access:public
mdinfo::state_fd	libmdadm/mdadm.h	/^	int state_fd;$/;"	m	struct:mdinfo	access:public
mdinfo::sys_name	libmdadm/mdadm.h	/^	char		sys_name[20];$/;"	m	struct:mdinfo	access:public
mdinfo::text_version	libmdadm/mdadm.h	/^	char			text_version[50];$/;"	m	struct:mdinfo	access:public
mdinfo::uuid	libmdadm/mdadm.h	/^	int			uuid[4];$/;"	m	struct:mdinfo	access:public
mdmon_pid	libmdadm/mdadm.h	/^extern int mdmon_pid(char *devnm);$/;"	p	signature:(char *devnm)
mdmon_pid	libmdadm/util.c	/^int mdmon_pid(char *devnm)$/;"	f	signature:(char *devnm)
mdmon_running	libmdadm/mdadm.h	/^extern int mdmon_running(char *devnm);$/;"	p	signature:(char *devnm)
mdmon_running	libmdadm/util.c	/^int mdmon_running(char *devnm)$/;"	f	signature:(char *devnm)
mdp_backup_super	libmdadm/Grow.c	/^static struct mdp_backup_super {$/;"	s	file:
mdp_backup_super::arraystart	libmdadm/Grow.c	/^	__u64	arraystart;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::arraystart2	libmdadm/Grow.c	/^	__u64	arraystart2;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::devstart	libmdadm/Grow.c	/^	__u64	devstart;	\/* address on backup device\/file of data *\/$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::devstart2	libmdadm/Grow.c	/^	__u64	devstart2;	\/* offset in to data of second section *\/$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::length	libmdadm/Grow.c	/^	__u64	length;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::length2	libmdadm/Grow.c	/^	__u64	length2;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::magic	libmdadm/Grow.c	/^	char	magic[16];  \/* md_backup_data-1 or -2 *\/$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::mtime	libmdadm/Grow.c	/^	__u64	mtime;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::pad	libmdadm/Grow.c	/^	__u8 pad[512-68-32];$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::pad1	libmdadm/Grow.c	/^	__u32   pad1;$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::sb_csum	libmdadm/Grow.c	/^	__u32	sb_csum;	\/* csum of preceeding bytes. *\/$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::sb_csum2	libmdadm/Grow.c	/^	__u32	sb_csum2;	\/* csum of preceeding bytes. *\/$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_backup_super::set_uuid	libmdadm/Grow.c	/^	__u8	set_uuid[16];$/;"	m	struct:mdp_backup_super	file:	access:public
mdp_device_descriptor_s	libmdadm/md_p.h	/^typedef struct mdp_device_descriptor_s {$/;"	s
mdp_device_descriptor_s::major	libmdadm/md_p.h	/^	__u32 major;		\/* 1 Device major number		      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_device_descriptor_s::minor	libmdadm/md_p.h	/^	__u32 minor;		\/* 2 Device minor number		      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_device_descriptor_s::number	libmdadm/md_p.h	/^	__u32 number;		\/* 0 Device number in the entire set	      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_device_descriptor_s::raid_disk	libmdadm/md_p.h	/^	__u32 raid_disk;	\/* 3 The role of the device in the raid set   *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_device_descriptor_s::reserved	libmdadm/md_p.h	/^	__u32 reserved[MD_SB_DESCRIPTOR_WORDS - 5];$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_device_descriptor_s::state	libmdadm/md_p.h	/^	__u32 state;		\/* 4 Operational state			      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
mdp_disk_t	libmdadm/md_p.h	/^} mdp_disk_t;$/;"	t	typeref:struct:mdp_device_descriptor_s
mdp_super_t	libmdadm/md_p.h	/^} mdp_super_t;$/;"	t	typeref:struct:mdp_superblock_s
mdp_superblock_1	libmdadm/super1.c	/^struct mdp_superblock_1 {$/;"	s	file:
mdp_superblock_1::bblog_offset	libmdadm/super1.c	/^	__u32	bblog_offset;	\/* sector offset from superblock to bblog, signed *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::bblog_shift	libmdadm/super1.c	/^	__u8	bblog_shift;	\/* shift from sectors to block size for badblocklist *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::bblog_size	libmdadm/super1.c	/^	__u16	bblog_size;	\/* number of sectors reserved for badblocklist *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::bitmap_offset	libmdadm/super1.c	/^	__u32	bitmap_offset;	\/* sectors after start of superblock that bitmap starts$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::chunksize	libmdadm/super1.c	/^	__u32	chunksize;	\/* in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::cnt_corrected_read	libmdadm/super1.c	/^	__u32	cnt_corrected_read; \/* number of read errors that were corrected by re-writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::ctime	libmdadm/super1.c	/^	__u64	ctime;		\/* lo 40 bits are seconds, top 24 are microseconds or 0*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::data_offset	libmdadm/super1.c	/^	__u64	data_offset;	\/* sector start of data, often 0 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::data_size	libmdadm/super1.c	/^	__u64	data_size;	\/* sectors in this device that can be used for data *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::delta_disks	libmdadm/super1.c	/^	__u32	delta_disks;	\/* change in number of raid_disks		*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::dev_number	libmdadm/super1.c	/^	__u32	dev_number;	\/* permanent identifier of this  device - not role in raid *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::dev_roles	libmdadm/super1.c	/^	__u16	dev_roles[0];	\/* role in array, or 0xffff for a spare, or 0xfffe for faulty *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::devflags	libmdadm/super1.c	/^	__u8    devflags;        \/* per-device flags.  Only one defined...*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::device_uuid	libmdadm/super1.c	/^	__u8	device_uuid[16]; \/* user-space setable, ignored by kernel *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::events	libmdadm/super1.c	/^	__u64	events;		\/* incremented when superblock updated *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::feature_map	libmdadm/super1.c	/^	__u32	feature_map;	\/* 0 for now *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::layout	libmdadm/super1.c	/^	__u32	layout;		\/* only for raid5 currently *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::level	libmdadm/super1.c	/^	__u32	level;		\/* -4 (multipath), -1 (linear), 0,1,4,5 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::magic	libmdadm/super1.c	/^	__u32	magic;		\/* MD_SB_MAGIC: 0xa92b4efc - little endian *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::major_version	libmdadm/super1.c	/^	__u32	major_version;	\/* 1 *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::max_dev	libmdadm/super1.c	/^	__u32	max_dev;	\/* size of dev_roles[] array to consider *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::new_chunk	libmdadm/super1.c	/^	__u32	new_chunk;	\/* new chunk size (sectors)			*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::new_layout	libmdadm/super1.c	/^	__u32	new_layout;	\/* new layout					*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::new_level	libmdadm/super1.c	/^	__u32	new_level;	\/* new level we are reshaping to		*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::new_offset	libmdadm/super1.c	/^	__u32	new_offset;	\/* signed number to add to data_offset in new$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::pad0	libmdadm/super1.c	/^	__u32	pad0;		\/* always set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::pad3	libmdadm/super1.c	/^	__u8	pad3[64-32];	\/* set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::raid_disks	libmdadm/super1.c	/^	__u32	raid_disks;$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::recovery_offset	libmdadm/super1.c	/^	__u64	recovery_offset;\/* sectors before this offset (from data_offset) have been recovered *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::reshape_position	libmdadm/super1.c	/^	__u64	reshape_position;	\/* next address in array-space for reshape *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::resync_offset	libmdadm/super1.c	/^	__u64	resync_offset;	\/* data before this offset (from data_offset) known to be in sync *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::sb_csum	libmdadm/super1.c	/^	__u32	sb_csum;	\/* checksum upto dev_roles[max_dev] *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::set_name	libmdadm/super1.c	/^	char	set_name[32];	\/* set and interpreted by user-space *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::set_uuid	libmdadm/super1.c	/^	__u8	set_uuid[16];	\/* user-space generated. *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::size	libmdadm/super1.c	/^	__u64	size;		\/* used size of component devices, in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::super_offset	libmdadm/super1.c	/^	__u64	super_offset;	\/* sector start of this superblock *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_1::utime	libmdadm/super1.c	/^	__u64	utime;		\/* 40 bits second, 24 btes microseconds *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
mdp_superblock_s	libmdadm/md_p.h	/^typedef struct mdp_superblock_s {$/;"	s
mdp_superblock_s::active_disks	libmdadm/md_p.h	/^	__u32 active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::chunk_size	libmdadm/md_p.h	/^	__u32 chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::cp_events_hi	libmdadm/md_p.h	/^	__u32 cp_events_hi;	\/*  9 high-order of checkpoint update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::cp_events_hi	libmdadm/md_p.h	/^	__u32 cp_events_hi;	\/* 10 high-order of checkpoint update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::cp_events_lo	libmdadm/md_p.h	/^	__u32 cp_events_lo;	\/*  9 low-order of checkpoint update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::cp_events_lo	libmdadm/md_p.h	/^	__u32 cp_events_lo;	\/* 10 low-order of checkpoint update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::ctime	libmdadm/md_p.h	/^	__u32 ctime;		\/*  6 Creation time			      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::delta_disks	libmdadm/md_p.h	/^	__u32 delta_disks;	\/* 15 change in number of raid_disks	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::disks	libmdadm/md_p.h	/^	mdp_disk_t disks[MD_SB_DISKS];$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::events_hi	libmdadm/md_p.h	/^	__u32 events_hi;	\/*  7 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::events_hi	libmdadm/md_p.h	/^	__u32 events_hi;	\/*  8 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::events_lo	libmdadm/md_p.h	/^	__u32 events_lo;	\/*  7 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::events_lo	libmdadm/md_p.h	/^	__u32 events_lo;	\/*  8 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::failed_disks	libmdadm/md_p.h	/^	__u32 failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::gstate_creserved	libmdadm/md_p.h	/^	__u32 gstate_creserved[MD_SB_GENERIC_CONSTANT_WORDS - 16];$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::gstate_sreserved	libmdadm/md_p.h	/^	__u32 gstate_sreserved[MD_SB_GENERIC_STATE_WORDS - 18];$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::gvalid_words	libmdadm/md_p.h	/^	__u32 gvalid_words;	\/*  4 Number of used words in this section    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::layout	libmdadm/md_p.h	/^	__u32 layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::level	libmdadm/md_p.h	/^	__u32 level;		\/*  7 Raid personality			      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::major_version	libmdadm/md_p.h	/^	__u32 major_version;	\/*  1 major version to which the set conforms *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::md_magic	libmdadm/md_p.h	/^	__u32 md_magic;		\/*  0 MD identifier			      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::md_minor	libmdadm/md_p.h	/^	__u32 md_minor;		\/* 11 preferred MD minor device number	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::minor_version	libmdadm/md_p.h	/^	__u32 minor_version;	\/*  2 minor version ...			      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::new_chunk	libmdadm/md_p.h	/^	__u32 new_chunk;	\/* 17 new chunk size (bytes)		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::new_layout	libmdadm/md_p.h	/^	__u32 new_layout;	\/* 16 new layout			      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::new_level	libmdadm/md_p.h	/^	__u32 new_level;	\/* 14 new level we are reshaping to	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::not_persistent	libmdadm/md_p.h	/^	__u32 not_persistent;	\/* 12 does it have a persistent superblock    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::nr_disks	libmdadm/md_p.h	/^	__u32 nr_disks;		\/*  9 total disks in the raid set	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::patch_version	libmdadm/md_p.h	/^	__u32 patch_version;	\/*  3 patchlevel version ...		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::pstate_reserved	libmdadm/md_p.h	/^	__u32 pstate_reserved[MD_SB_PERSONALITY_WORDS - 4];$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::raid_disks	libmdadm/md_p.h	/^	__u32 raid_disks;	\/* 10 disks in a fully functional raid set    *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::recovery_cp	libmdadm/md_p.h	/^	__u32 recovery_cp;	\/* 11 recovery checkpoint sector count	      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::reserved	libmdadm/md_p.h	/^	__u32 reserved[MD_SB_RESERVED_WORDS];$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::reshape_position	libmdadm/md_p.h	/^	__u64 reshape_position;	\/* 12,13 next address in array-space for reshape *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::root_block	libmdadm/md_p.h	/^	__u32 root_block;	\/*  3 LV root block *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::root_pv	libmdadm/md_p.h	/^	__u32 root_pv;		\/*  2 LV root PV *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::sb_csum	libmdadm/md_p.h	/^	__u32 sb_csum;		\/*  6 checksum of the whole superblock        *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::set_uuid0	libmdadm/md_p.h	/^	__u32 set_uuid0;	\/*  5 Raid set identifier		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::set_uuid1	libmdadm/md_p.h	/^	__u32 set_uuid1;	\/* 13 Raid set identifier #2		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::set_uuid2	libmdadm/md_p.h	/^	__u32 set_uuid2;	\/* 14 Raid set identifier #3		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::set_uuid3	libmdadm/md_p.h	/^	__u32 set_uuid3;	\/* 15 Raid set identifier #4		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::size	libmdadm/md_p.h	/^	__u32 size;		\/*  8 Apparent size of each individual disk   *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::spare_disks	libmdadm/md_p.h	/^	__u32 spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::state	libmdadm/md_p.h	/^	__u32 state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::this_disk	libmdadm/md_p.h	/^	mdp_disk_t this_disk;$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::utime	libmdadm/md_p.h	/^	__u32 utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdp_superblock_s::working_disks	libmdadm/md_p.h	/^	__u32 working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
mdstat_by_component	libmdadm/mdadm.h	/^extern struct mdstat_ent *mdstat_by_component(char *name);$/;"	p	signature:(char *name)
mdstat_by_component	libmdadm/mdstat.c	/^struct mdstat_ent *mdstat_by_component(char *name)$/;"	f	signature:(char *name)
mdstat_by_subdev	libmdadm/mdadm.h	/^extern struct mdstat_ent *mdstat_by_subdev(char *subdev, char *container);$/;"	p	signature:(char *subdev, char *container)
mdstat_by_subdev	libmdadm/mdstat.c	/^struct mdstat_ent *mdstat_by_subdev(char *subdev, char *container)$/;"	f	signature:(char *subdev, char *container)
mdstat_close	libmdadm/mdadm.h	/^extern void mdstat_close(void);$/;"	p	signature:(void)
mdstat_close	libmdadm/mdstat.c	/^void mdstat_close(void)$/;"	f	signature:(void)
mdstat_ent	libmdadm/mdadm.h	/^struct mdstat_ent {$/;"	s
mdstat_ent::active	libmdadm/mdadm.h	/^	int		active;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::dev	libmdadm/mdadm.h	/^	char		*dev;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::dev_member	libmdadm/mdadm.h	/^	struct dev_member {$/;"	s	struct:mdstat_ent	access:public
mdstat_ent::dev_member::name	libmdadm/mdadm.h	/^		char			*name;$/;"	m	struct:mdstat_ent::dev_member	access:public
mdstat_ent::dev_member::next	libmdadm/mdadm.h	/^		struct dev_member	*next;$/;"	m	struct:mdstat_ent::dev_member	typeref:struct:mdstat_ent::dev_member::dev_member	access:public
mdstat_ent::devcnt	libmdadm/mdadm.h	/^	int		devcnt;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::devnm	libmdadm/mdadm.h	/^	char		devnm[32];$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::level	libmdadm/mdadm.h	/^	char		*level;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::members	libmdadm/mdadm.h	/^	}		*members;$/;"	m	struct:mdstat_ent	typeref:struct:mdstat_ent::dev_member	access:public
mdstat_ent::metadata_version	libmdadm/mdadm.h	/^	char *		metadata_version;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::next	libmdadm/mdadm.h	/^	struct mdstat_ent *next;$/;"	m	struct:mdstat_ent	typeref:struct:mdstat_ent::mdstat_ent	access:public
mdstat_ent::pattern	libmdadm/mdadm.h	/^	char		*pattern; \/* U or up, _ for down *\/$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::percent	libmdadm/mdadm.h	/^	int		percent; \/* -1 if no resync *\/$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::raid_disks	libmdadm/mdadm.h	/^	int		raid_disks;$/;"	m	struct:mdstat_ent	access:public
mdstat_ent::resync	libmdadm/mdadm.h	/^	int		resync; \/* 3 if check, 2 if reshape, 1 if resync, 0 if recovery *\/$/;"	m	struct:mdstat_ent	access:public
mdstat_fd	libmdadm/mdstat.c	/^static int mdstat_fd = -1;$/;"	v	file:
mdstat_read	libmdadm/mdadm.h	/^extern struct mdstat_ent *mdstat_read(int hold, int start);$/;"	p	signature:(int hold, int start)
mdstat_read	libmdadm/mdmon.h	/^struct mdstat_ent *mdstat_read(int hold, int start);$/;"	p	signature:(int hold, int start)
mdstat_read	libmdadm/mdstat.c	/^struct mdstat_ent *mdstat_read(int hold, int start)$/;"	f	signature:(int hold, int start)
mdstat_wait	libmdadm/mdadm.h	/^extern void mdstat_wait(int seconds);$/;"	p	signature:(int seconds)
mdstat_wait	libmdadm/mdstat.c	/^void mdstat_wait(int seconds)$/;"	f	signature:(int seconds)
mdstat_wait_fd	libmdadm/mdadm.h	/^extern void mdstat_wait_fd(int fd, const sigset_t *sigmask);$/;"	p	signature:(int fd, const sigset_t *sigmask)
mdstat_wait_fd	libmdadm/mdstat.c	/^void mdstat_wait_fd(int fd, const sigset_t *sigmask)$/;"	f	signature:(int fd, const sigset_t *sigmask)
mdu_array_info_s	libmdadm/md_u.h	/^typedef struct mdu_array_info_s {$/;"	s
mdu_array_info_s::active_disks	libmdadm/md_u.h	/^	int active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::chunk_size	libmdadm/md_u.h	/^	int chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::ctime	libmdadm/md_u.h	/^	int ctime;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::failed_disks	libmdadm/md_u.h	/^	int failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::layout	libmdadm/md_u.h	/^	int layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::level	libmdadm/md_u.h	/^	int level;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::major_version	libmdadm/md_u.h	/^	int major_version;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::md_minor	libmdadm/md_u.h	/^	int md_minor;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::minor_version	libmdadm/md_u.h	/^	int minor_version;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::not_persistent	libmdadm/md_u.h	/^	int not_persistent;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::nr_disks	libmdadm/md_u.h	/^	int nr_disks;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::patch_version	libmdadm/md_u.h	/^	int patch_version;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::raid_disks	libmdadm/md_u.h	/^	int raid_disks;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::size	libmdadm/md_u.h	/^	int size;$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::spare_disks	libmdadm/md_u.h	/^	int spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::state	libmdadm/md_u.h	/^	int state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::utime	libmdadm/md_u.h	/^	int utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_s::working_disks	libmdadm/md_u.h	/^	int working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
mdu_array_info_t	libmdadm/md_u.h	/^} mdu_array_info_t;$/;"	t	typeref:struct:mdu_array_info_s
mdu_bitmap_file_s	libmdadm/md_u.h	/^typedef struct mdu_bitmap_file_s$/;"	s
mdu_bitmap_file_s::pathname	libmdadm/md_u.h	/^	char pathname[4096];$/;"	m	struct:mdu_bitmap_file_s	access:public
mdu_bitmap_file_t	libmdadm/md_u.h	/^} mdu_bitmap_file_t;$/;"	t	typeref:struct:mdu_bitmap_file_s
mdu_disk_info_s	libmdadm/md_u.h	/^typedef struct mdu_disk_info_s {$/;"	s
mdu_disk_info_s::major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_disk_info_s	access:public
mdu_disk_info_s::minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_disk_info_s	access:public
mdu_disk_info_s::number	libmdadm/md_u.h	/^	int number;$/;"	m	struct:mdu_disk_info_s	access:public
mdu_disk_info_s::raid_disk	libmdadm/md_u.h	/^	int raid_disk;$/;"	m	struct:mdu_disk_info_s	access:public
mdu_disk_info_s::state	libmdadm/md_u.h	/^	int state;$/;"	m	struct:mdu_disk_info_s	access:public
mdu_disk_info_t	libmdadm/md_u.h	/^} mdu_disk_info_t;$/;"	t	typeref:struct:mdu_disk_info_s
mdu_param_s	libmdadm/md_u.h	/^typedef struct mdu_param_s$/;"	s
mdu_param_s::chunk_size	libmdadm/md_u.h	/^	int			chunk_size;	\/* in bytes *\/$/;"	m	struct:mdu_param_s	access:public
mdu_param_s::max_fault	libmdadm/md_u.h	/^	int			max_fault;	\/* unused for now *\/$/;"	m	struct:mdu_param_s	access:public
mdu_param_s::personality	libmdadm/md_u.h	/^	int			personality;	\/* 1,2,3,4 *\/$/;"	m	struct:mdu_param_s	access:public
mdu_param_t	libmdadm/md_u.h	/^} mdu_param_t;$/;"	t	typeref:struct:mdu_param_s
mdu_start_info_s	libmdadm/md_u.h	/^typedef struct mdu_start_info_s {$/;"	s
mdu_start_info_s::major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_start_info_s	access:public
mdu_start_info_s::minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_start_info_s	access:public
mdu_start_info_s::raid_disk	libmdadm/md_u.h	/^	int raid_disk;$/;"	m	struct:mdu_start_info_s	access:public
mdu_start_info_s::state	libmdadm/md_u.h	/^	int state;$/;"	m	struct:mdu_start_info_s	access:public
mdu_start_info_t	libmdadm/md_u.h	/^} mdu_start_info_t;$/;"	t	typeref:struct:mdu_start_info_s
mdu_version_s	libmdadm/md_u.h	/^typedef struct mdu_version_s {$/;"	s
mdu_version_s::major	libmdadm/md_u.h	/^	int major;$/;"	m	struct:mdu_version_s	access:public
mdu_version_s::minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_version_s	access:public
mdu_version_s::patchlevel	libmdadm/md_u.h	/^	int patchlevel;$/;"	m	struct:mdu_version_s	access:public
mdu_version_t	libmdadm/md_u.h	/^} mdu_version_t;$/;"	t	typeref:struct:mdu_version_s
mdupdate	libmdadm/super-ddf.c	/^				void *mdupdate; \/* hold metadata update *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
member	libmdadm/mdadm.h	/^	char	*member;	\/* subarray within a container *\/$/;"	m	struct:mddev_ident	access:public
members	libmdadm/mdadm.h	/^	}		*members;$/;"	m	struct:mdstat_ent	typeref:struct:mdstat_ent::dev_member	access:public
merge_extents	libmdadm/super-intel.c	/^static unsigned long long merge_extents(struct intel_super *super, int sum_extents)$/;"	f	file:	signature:(struct intel_super *super, int sum_extents)
metadata	libmdadm/Monitor.c	/^	struct supertype *metadata;$/;"	m	struct:state	typeref:struct:state::supertype	file:	access:public
metadata	libmdadm/mdadm.h	/^	char	metadata[20];$/;"	m	struct:map_ent	access:public
metadata	libmdadm/mdadm.h	/^	const char *metadata;$/;"	m	struct:dev_policy	access:public
metadata_container_matches	libmdadm/mdadm.h	/^extern int metadata_container_matches(char *metadata, char *devnm);$/;"	p	signature:(char *metadata, char *devnm)
metadata_container_matches	libmdadm/util.c	/^int metadata_container_matches(char *metadata, char *devnm)$/;"	f	signature:(char *metadata, char *devnm)
metadata_fd	libmdadm/mdmon.h	/^	int metadata_fd; \/* for monitoring rw\/ro status *\/$/;"	m	struct:active_array	access:public
metadata_subdev_matches	libmdadm/mdadm.h	/^extern int metadata_subdev_matches(char *metadata, char *devnm);$/;"	p	signature:(char *metadata, char *devnm)
metadata_subdev_matches	libmdadm/util.c	/^int metadata_subdev_matches(char *metadata, char *devnm)$/;"	f	signature:(char *metadata, char *devnm)
metadata_update	libmdadm/mdadm.h	/^struct metadata_update {$/;"	s
metadata_update::buf	libmdadm/mdadm.h	/^	char	*buf;$/;"	m	struct:metadata_update	access:public
metadata_update::len	libmdadm/mdadm.h	/^	int	len;$/;"	m	struct:metadata_update	access:public
metadata_update::next	libmdadm/mdadm.h	/^	struct metadata_update *next;$/;"	m	struct:metadata_update	typeref:struct:metadata_update::metadata_update	access:public
metadata_update::space	libmdadm/mdadm.h	/^	void	*space; \/* allocated space that monitor will use *\/$/;"	m	struct:metadata_update	access:public
metadata_update::space_list	libmdadm/mdadm.h	/^	void	**space_list; \/* list of allocated spaces that monitor can$/;"	m	struct:metadata_update	access:public
metadata_version	libmdadm/mdadm.h	/^	char *		metadata_version;$/;"	m	struct:mdstat_ent	access:public
mgmt_disk	libmdadm/super-intel.c	/^static int mgmt_disk(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
migr_priority	libmdadm/super-intel.c	/^	__u8  migr_priority;$/;"	m	struct:imsm_dev	file:	access:public
migr_rec	libmdadm/super-intel.c	/^		struct migr_record *migr_rec; \/* migration record *\/$/;"	m	union:intel_super::__anon11	typeref:struct:intel_super::__anon11::migr_record	file:	access:public
migr_rec_buf	libmdadm/super-intel.c	/^		void *migr_rec_buf; \/* buffer for I\/O operations *\/$/;"	m	union:intel_super::__anon11	file:	access:public
migr_record	libmdadm/super-intel.c	/^struct migr_record {$/;"	s	file:
migr_record::ascending_migr	libmdadm/super-intel.c	/^	__u32 ascending_migr;	    \/* True if migrating in increasing$/;"	m	struct:migr_record	file:	access:public
migr_record::blocks_per_unit	libmdadm/super-intel.c	/^	__u32 blocks_per_unit;      \/* Num disk blocks per unit of operation *\/$/;"	m	struct:migr_record	file:	access:public
migr_record::ckpt_area_pba	libmdadm/super-intel.c	/^	__u32 ckpt_area_pba;	    \/* Pba of first block of ckpt copy area *\/$/;"	m	struct:migr_record	file:	access:public
migr_record::ckpt_read_disk_num	libmdadm/super-intel.c	/^	__u32 ckpt_read_disk_num;   \/* Which member disk in destSubMap[0] the$/;"	m	struct:migr_record	file:	access:public
migr_record::curr_migr_unit	libmdadm/super-intel.c	/^	__u32 curr_migr_unit;	    \/* 0..numMigrUnits-1 *\/$/;"	m	struct:migr_record	file:	access:public
migr_record::dest_1st_member_lba	libmdadm/super-intel.c	/^	__u32 dest_1st_member_lba;  \/* First member lba on first$/;"	m	struct:migr_record	file:	access:public
migr_record::dest_depth_per_unit	libmdadm/super-intel.c	/^	__u32 dest_depth_per_unit;  \/* Num member blocks each destMap$/;"	m	struct:migr_record	file:	access:public
migr_record::family_num	libmdadm/super-intel.c	/^	__u32 family_num;	    \/* Family number of MPB$/;"	m	struct:migr_record	file:	access:public
migr_record::num_migr_units	libmdadm/super-intel.c	/^	__u32 num_migr_units;	    \/* Total num migration units-of-op *\/$/;"	m	struct:migr_record	file:	access:public
migr_record::post_migr_vol_cap	libmdadm/super-intel.c	/^	__u32 post_migr_vol_cap;    \/* Size of volume after$/;"	m	struct:migr_record	file:	access:public
migr_record::post_migr_vol_cap_hi	libmdadm/super-intel.c	/^	__u32 post_migr_vol_cap_hi; \/* Expansion space for LBA64 *\/$/;"	m	struct:migr_record	file:	access:public
migr_record::rec_status	libmdadm/super-intel.c	/^	__u32 rec_status;	    \/* Status used to determine how to restart$/;"	m	struct:migr_record	file:	access:public
migr_state	libmdadm/super-intel.c	/^	__u8  migr_state;	\/* Normal or Migrating *\/$/;"	m	struct:imsm_vol	file:	access:public
migr_strip_blocks_rebuild	libmdadm/super-intel.c	/^static __u32 migr_strip_blocks_rebuild(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
migr_strip_blocks_resync	libmdadm/super-intel.c	/^static __u32 migr_strip_blocks_resync(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
migr_type	libmdadm/super-intel.c	/^	__u8  migr_type;	\/* Initializing, Rebuilding, ... *\/$/;"	m	struct:imsm_vol	file:	access:public
migr_type	libmdadm/super-intel.c	/^static __u8 migr_type(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
migrate	libmdadm/super-intel.c	/^static void migrate(struct imsm_dev *dev, struct intel_super *super,$/;"	f	file:	signature:(struct imsm_dev *dev, struct intel_super *super, __u8 to_state, int migr_type)
min	libmdadm/mdadm.h	171;"	d
min_acceptable_spare_size	libmdadm/mdadm.h	/^	unsigned long long (*min_acceptable_spare_size)(struct supertype *st);$/;"	m	struct:superswitch	access:public
min_acceptable_spare_size_imsm	libmdadm/super-intel.c	/^static unsigned long long min_acceptable_spare_size_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
min_offset_change	libmdadm/mdadm.h	/^	unsigned long long min_offset_change;$/;"	m	struct:reshape	access:public
min_recovery_start	libmdadm/mdadm.h	/^unsigned long long min_recovery_start(struct mdinfo *array);$/;"	p	signature:(struct mdinfo *array)
min_recovery_start	libmdadm/util.c	/^unsigned long long min_recovery_start(struct mdinfo *array)$/;"	f	signature:(struct mdinfo *array)
minor	libmdadm/lib.c	/^	int major, minor;$/;"	m	struct:devmap	file:	access:public
minor	libmdadm/md_p.h	/^	__u32 minor;		\/* 2 Device minor number		      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_disk_info_s	access:public
minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_start_info_s	access:public
minor	libmdadm/md_u.h	/^	int minor;$/;"	m	struct:mdu_version_s	access:public
minor	libmdadm/mdadm.h	1443;"	d
minor	libmdadm/mdadm.h	1446;"	d
minor	libmdadm/super-ddf.c	/^				int major, minor;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
minor	libmdadm/super-intel.c	/^		int major, minor;$/;"	m	struct:intel_super::dl	file:	access:public
minor_ver	libmdadm/platform-intel.h	/^	__u16 minor_ver; \/* Example: 6 as in 8.6.0.1020 *\/$/;"	m	struct:imsm_orom	access:public
minor_version	libmdadm/md_p.h	/^	__u32 minor_version;	\/*  2 minor version ...			      *\/$/;"	m	struct:mdp_superblock_s	access:public
minor_version	libmdadm/md_u.h	/^	int minor_version;$/;"	m	struct:mdu_array_info_s	access:public
minor_version	libmdadm/mdadm.h	/^	int minor_version;$/;"	m	struct:supertype	access:public
misc_dev_info	libmdadm/super1.c	/^struct misc_dev_info {$/;"	s	file:
misc_dev_info::device_size	libmdadm/super1.c	/^	__u64 device_size;$/;"	m	struct:misc_dev_info	file:	access:public
mismatch_cnt	libmdadm/mdadm.h	/^	int			mismatch_cnt;$/;"	m	struct:mdinfo	access:public
missing	libmdadm/super-intel.c	/^	struct dl *missing; \/* disks removed while we weren't looking *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::dl	file:	access:public
missing_pages	libmdadm/bitmap.h	/^	unsigned long missing_pages; \/* number of pages not yet allocated *\/$/;"	m	struct:bitmap	access:public
mke2fs	libmke2fs/mke2fs.c	/^int mke2fs(struct mke2fs_handle *handle)$/;"	f	signature:(struct mke2fs_handle *handle)
mke2fs	libmke2fs/mke2fs.h	/^extern int mke2fs(struct mke2fs_handle *handle);$/;"	p	signature:(struct mke2fs_handle *handle)
mke2fs_cb_func	libmke2fs/mke2fs.h	/^typedef void (*mke2fs_cb_func)(void *pData, int stat, int current, int total);$/;"	t
mke2fs_default_profile	libmke2fs/default_profile.c	/^const char *mke2fs_default_profile = $/;"	v
mke2fs_discard_device	libmke2fs/mke2fs.c	/^static int mke2fs_discard_device(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
mke2fs_handle	libmke2fs/mke2fs.h	/^struct mke2fs_handle {$/;"	s
mke2fs_handle::buf	libmke2fs/mke2fs.h	/^	char *buf;$/;"	m	struct:mke2fs_handle	access:public
mke2fs_handle::cb_func	libmke2fs/mke2fs.h	/^	mke2fs_cb_func cb_func;$/;"	m	struct:mke2fs_handle	access:public
mke2fs_handle::cfg	libmke2fs/mke2fs.h	/^	struct e2fs_cfg cfg;$/;"	m	struct:mke2fs_handle	typeref:struct:mke2fs_handle::e2fs_cfg	access:public
mke2fs_handle::device_name	libmke2fs/mke2fs.h	/^	char device_name[32];$/;"	m	struct:mke2fs_handle	access:public
mke2fs_handle::pData	libmke2fs/mke2fs.h	/^	void *pData;$/;"	m	struct:mke2fs_handle	access:public
mke2fs_setup_tdb	libmke2fs/mke2fs.c	/^static int mke2fs_setup_tdb(const char *name, io_manager *io_ptr)$/;"	f	file:	signature:(const char *name, io_manager *io_ptr)
mmp_buf	libmke2fs/ext2fs.h	/^	void *mmp_buf;$/;"	m	struct:struct_ext2_filsys	access:public
mmp_cmp	libmke2fs/ext2fs.h	/^	void *mmp_cmp;$/;"	m	struct:struct_ext2_filsys	access:public
mmp_fd	libmke2fs/ext2fs.h	/^	int mmp_fd;$/;"	m	struct:struct_ext2_filsys	access:public
mmp_last_written	libmke2fs/ext2fs.h	/^	long mmp_last_written;$/;"	m	struct:struct_ext2_filsys	access:public
mmp_update_interval	libmke2fs/mke2fs.h	/^	__u16 mmp_update_interval;$/;"	m	struct:extended_opt	access:public
mode	libmdadm/mdadm.h	/^	int	mode;$/;"	m	struct:createinfo	access:public
mode	libmdadm/mdadm.h	/^enum mode {$/;"	g
mode_count	libmdadm/mdadm.h	/^	mode_count$/;"	e	enum:mode
modes	libmdadm/maps.c	/^mapping_t modes[] = {$/;"	v
monitor_loop_cnt	libmdadm/monitor.c	/^int monitor_loop_cnt;$/;"	v
mount_dir	libmke2fs/mke2fs.c	/^static char *mount_dir;$/;"	v	file:
mount_dir	libmke2fs/mke2fs.h	/^	char mount_dir[64];$/;"	m	struct:e2fs_cfg	access:public
move_spare	libmdadm/Manage.c	/^int move_spare(char *from_devname, char *to_devname, dev_t devid)$/;"	f	signature:(char *from_devname, char *to_devname, dev_t devid)
move_spare	libmdadm/mdadm.h	/^extern int move_spare(char *from_devname, char *to_devname, dev_t devid);$/;"	p	signature:(char *from_devname, char *to_devname, dev_t devid)
mpb_sectors	libmdadm/super-intel.c	/^static unsigned int mpb_sectors(struct imsm_super *mpb)$/;"	f	file:	signature:(struct imsm_super *mpb)
mpb_size	libmdadm/super-intel.c	/^	__u32 mpb_size;			\/* 0x24 - 0x27 Size of MPB *\/$/;"	m	struct:imsm_super	file:	access:public
mppe	libmdadm/super-ddf.c	/^	unsigned int		max_part, mppe, conf_rec_len;$/;"	m	struct:ddf_super	file:	access:public
msgs	libmke2fs/prof_err.c	/^    char const * const * msgs;$/;"	m	struct:error_table	file:	access:public
mtime	libmdadm/Grow.c	/^	__u64	mtime;$/;"	m	struct:mdp_backup_super	file:	access:public
must_be_container	libmdadm/mdadm.h	/^extern int must_be_container(int fd);$/;"	p	signature:(int fd)
must_be_container	libmdadm/util.c	/^int must_be_container(int fd)$/;"	f	signature:(int fd)
n_msgs	libmke2fs/prof_err.c	/^    int n_msgs;$/;"	m	struct:error_table	file:	access:public
name	libmdadm/config.c	/^	char *name;$/;"	m	struct:conf_dev	file:	access:public
name	libmdadm/config.c	/^	char name[];$/;"	m	struct:fname	file:	access:public
name	libmdadm/lib.c	/^	char *name;$/;"	m	struct:devmap	file:	access:public
name	libmdadm/mdadm.h	/^		char			*name;$/;"	m	struct:mdstat_ent::dev_member	access:public
name	libmdadm/mdadm.h	/^		char *name;$/;"	m	struct:pol_rule::rule	access:public
name	libmdadm/mdadm.h	/^	char			name[33];$/;"	m	struct:mdinfo	access:public
name	libmdadm/mdadm.h	/^	char	name[33];$/;"	m	struct:mddev_ident	access:public
name	libmdadm/mdadm.h	/^	char *name;	\/* None of these strings are allocated.  They are$/;"	m	struct:dev_policy	access:public
name	libmdadm/mdadm.h	/^	char *name;$/;"	m	struct:mapping	access:public
name	libmdadm/mdadm.h	/^	const char *name; \/* canonical metadata name *\/$/;"	m	struct:superswitch	access:public
name	libmdadm/part.h	/^	unsigned char name[72];$/;"	m	struct:GPT_part_entry	access:public
name	libmdadm/probe_roms.c	/^	const char *name;$/;"	m	struct:resource	file:	access:public
name	libmdadm/super-ddf.c	/^		char	name[16];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
name	libmdadm/super-intel.c	/^	__u8 name[MAX_RAID_SERIAL_LEN];$/;"	m	struct:imsm_update_rename_array	file:	access:public
name	libmke2fs/profile.c	/^	char *name;$/;"	m	struct:profile_node	file:	access:public
name	libmke2fs/profile.c	/^	const char		*name;$/;"	m	struct:profile_iterator	file:	access:public
name_matches	libmdadm/Assemble.c	/^static int name_matches(char *found, char *required, char *homehost)$/;"	f	file:	signature:(char *found, char *required, char *homehost)
names	libmdadm/mdadm.h	/^	int	names;$/;"	m	struct:createinfo	access:public
names	libmke2fs/profile.c	/^	const char 		*const *names;$/;"	m	struct:profile_iterator	file:	access:public
need_double_quotes	libmke2fs/profile.c	/^static int need_double_quotes(char *str)$/;"	f	file:	signature:(char *str)
new_chunk	libmdadm/md_p.h	/^	__u32 new_chunk;	\/* 17 new chunk size (bytes)		      *\/$/;"	m	struct:mdp_superblock_s	access:public
new_chunk	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
new_chunk	libmdadm/super1.c	/^	__u32	new_chunk;	\/* new chunk size (sectors)			*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
new_chunksize	libmdadm/super-intel.c	/^	int new_chunksize;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
new_data_offset	libmdadm/mdadm.h	/^	unsigned long long	new_data_offset;$/;"	m	struct:mdinfo	access:public
new_disks	libmdadm/super-intel.c	/^	int new_disks[1]; \/* new_raid_disks - old_raid_disks makedev number *\/$/;"	m	struct:imsm_update_reshape	file:	access:public
new_disks	libmdadm/super-intel.c	/^	int new_disks[1]; \/* new_raid_disks - old_raid_disks makedev number *\/$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
new_layout	libmdadm/md_p.h	/^	__u32 new_layout;	\/* 16 new layout			      *\/$/;"	m	struct:mdp_superblock_s	access:public
new_layout	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
new_layout	libmdadm/super-intel.c	/^	int new_layout;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
new_layout	libmdadm/super1.c	/^	__u32	new_layout;	\/* new layout					*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
new_level	libmdadm/md_p.h	/^	__u32 new_level;	\/* 14 new level we are reshaping to	      *\/$/;"	m	struct:mdp_superblock_s	access:public
new_level	libmdadm/mdadm.h	/^	int			new_level, delta_disks, new_layout, new_chunk;$/;"	m	struct:mdinfo	access:public
new_level	libmdadm/super-intel.c	/^	int new_level;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
new_level	libmdadm/super1.c	/^	__u32	new_level;	\/* new level we are reshaping to		*\/$/;"	m	struct:mdp_superblock_1	file:	access:public
new_offset	libmdadm/super1.c	/^	__u32	new_offset;	\/* signed number to add to data_offset in new$/;"	m	struct:mdp_superblock_1	file:	access:public
new_raid_disks	libmdadm/super-intel.c	/^	int new_raid_disks;$/;"	m	struct:imsm_update_reshape	file:	access:public
new_raid_disks	libmdadm/super-intel.c	/^	int new_raid_disks;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
new_size	libmdadm/mdadm.h	/^	unsigned long long new_size; \/* New size of array in sectors *\/$/;"	m	struct:reshape	access:public
new_size	libmdadm/super-intel.c	/^	long long new_size;$/;"	m	struct:imsm_update_size_change	file:	access:public
next	libmdadm/Monitor.c	/^	struct state *next;$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
next	libmdadm/config.c	/^	struct conf_dev *next;$/;"	m	struct:conf_dev	typeref:struct:conf_dev::conf_dev	file:	access:public
next	libmdadm/config.c	/^	struct fname *next;$/;"	m	struct:fname	typeref:struct:fname::fname	file:	access:public
next	libmdadm/lib.c	/^	struct devmap *next;$/;"	m	struct:devmap	typeref:struct:devmap::devmap	file:	access:public
next	libmdadm/mdadm.h	/^		struct dev_member	*next;$/;"	m	struct:mdstat_ent::dev_member	typeref:struct:mdstat_ent::dev_member::dev_member	access:public
next	libmdadm/mdadm.h	/^		struct rule *next;$/;"	m	struct:pol_rule::rule	typeref:struct:pol_rule::rule::rule	access:public
next	libmdadm/mdadm.h	/^	struct dev_policy *next;$/;"	m	struct:dev_policy	typeref:struct:dev_policy::dev_policy	access:public
next	libmdadm/mdadm.h	/^	struct domainlist *next;$/;"	m	struct:domainlist	typeref:struct:domainlist::domainlist	access:public
next	libmdadm/mdadm.h	/^	struct map_ent *next;$/;"	m	struct:map_ent	typeref:struct:map_ent::map_ent	access:public
next	libmdadm/mdadm.h	/^	struct mddev_dev *next;$/;"	m	struct:mddev_dev	typeref:struct:mddev_dev::mddev_dev	access:public
next	libmdadm/mdadm.h	/^	struct mddev_ident *next;$/;"	m	struct:mddev_ident	typeref:struct:mddev_ident::mddev_ident	access:public
next	libmdadm/mdadm.h	/^	struct mdinfo *next;$/;"	m	struct:mdinfo	typeref:struct:mdinfo::mdinfo	access:public
next	libmdadm/mdadm.h	/^	struct mdstat_ent *next;$/;"	m	struct:mdstat_ent	typeref:struct:mdstat_ent::mdstat_ent	access:public
next	libmdadm/mdadm.h	/^	struct metadata_update *next;$/;"	m	struct:metadata_update	typeref:struct:metadata_update::metadata_update	access:public
next	libmdadm/mdadm.h	/^	struct pol_rule *next;$/;"	m	struct:pol_rule	typeref:struct:pol_rule::pol_rule	access:public
next	libmdadm/mdadm_other.h	/^	struct examine_result* next;$/;"	m	struct:examine_result	typeref:struct:examine_result::examine_result	access:public
next	libmdadm/mdmon.h	/^	struct active_array *next, *replaces;$/;"	m	struct:active_array	typeref:struct:active_array::active_array	access:public
next	libmdadm/platform-intel.h	/^	struct sys_dev *next;$/;"	m	struct:sys_dev	typeref:struct:sys_dev::sys_dev	access:public
next	libmdadm/super-ddf.c	/^				struct dl	*next;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	typeref:struct:ddf_super::dl::__anon8::__anon9::dl	file:	access:public
next	libmdadm/super-ddf.c	/^				struct vcl	*next;$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	typeref:struct:ddf_super::vcl::__anon6::__anon7::vcl	file:	access:public
next	libmdadm/super-intel.c	/^		struct dl *next;$/;"	m	struct:intel_super::dl	typeref:struct:intel_super::dl::dl	file:	access:public
next	libmdadm/super-intel.c	/^	struct imsm_update_activate_spare *next;$/;"	m	struct:imsm_update_activate_spare	typeref:struct:imsm_update_activate_spare::imsm_update_activate_spare	file:	access:public
next	libmdadm/super-intel.c	/^	struct intel_dev *next;$/;"	m	struct:intel_dev	typeref:struct:intel_dev::intel_dev	file:	access:public
next	libmdadm/super-intel.c	/^	struct intel_disk *next;$/;"	m	struct:intel_disk	typeref:struct:intel_disk::intel_disk	file:	access:public
next	libmdadm/super-intel.c	/^	struct intel_hba *next;$/;"	m	struct:intel_hba	typeref:struct:intel_hba::intel_hba	file:	access:public
next	libmdadm/super-intel.c	/^	struct intel_super *next; \/* (temp) list for disambiguating family_num *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::intel_super	file:	access:public
next	libmdadm/super-intel.c	/^	struct md_list *next;$/;"	m	struct:md_list	typeref:struct:md_list::md_list	file:	access:public
next	libmdadm/super0.c	/^	struct devinfo *next;$/;"	m	struct:devinfo	typeref:struct:devinfo::devinfo	file:	access:public
next	libmdadm/super1.c	/^	struct devinfo *next;$/;"	m	struct:devinfo	typeref:struct:devinfo::devinfo	file:	access:public
next	libmke2fs/prof_err.c	/^    struct et_list *next;$/;"	m	struct:et_list	typeref:struct:et_list::et_list	file:	access:public
next	libmke2fs/profile.c	/^	struct _prf_file_t *next;$/;"	m	struct:_prf_file_t	typeref:struct:_prf_file_t::_prf_file_t	file:	access:public
next	libmke2fs/profile.c	/^	struct profile_node *next, *prev;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
next_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
next_buf	libmdadm/super-intel.c	/^	void *next_buf; \/* for realloc'ing buf from the manager *\/$/;"	m	struct:intel_super	file:	access:public
next_len	libmdadm/super-intel.c	/^	size_t next_len;$/;"	m	struct:intel_super	file:	access:public
next_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
next_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::	access:public
nftw	libmdadm/lib.c	/^int nftw(const char *path, int (*han)(const char *name, const struct stat *stb, int flag, struct FTW *s), int nopenfd, int flags)$/;"	f	signature:(const char *path, int (*han)(const char *name, const struct stat *stb, int flag, struct FTW *s), int nopenfd, int flags)
noaction	libmke2fs/mke2fs.c	/^static int	noaction;$/;"	v	file:
noaction	libmke2fs/mke2fs.h	/^	int noaction;$/;"	m	struct:e2fs_cfg	access:public
node	libmke2fs/profile.c	/^	struct profile_node 	*node;$/;"	m	struct:profile_iterator	typeref:struct:profile_iterator::profile_node	file:	access:public
not_persistent	libmdadm/md_p.h	/^	__u32 not_persistent;	\/* 12 does it have a persistent superblock    *\/$/;"	m	struct:mdp_superblock_s	access:public
not_persistent	libmdadm/md_u.h	/^	int not_persistent;$/;"	m	struct:mdu_array_info_s	access:public
now	libmke2fs/ext2fs.h	/^	time_t				now;$/;"	m	struct:struct_ext2_filsys	access:public
nr_disks	libmdadm/md_p.h	/^	__u32 nr_disks;		\/*  9 total disks in the raid set	      *\/$/;"	m	struct:mdp_superblock_s	access:public
nr_disks	libmdadm/md_u.h	/^	int nr_disks;$/;"	m	struct:mdu_array_info_s	access:public
num	libmdadm/mdadm.h	/^	int num;$/;"	m	struct:mapping	access:public
num	libmke2fs/ext2fsP.h	/^	int	num;$/;"	m	struct:ext2_struct_u32_list	access:public
num	libmke2fs/mke2fs.c	/^	int num;$/;"	m	struct:str_list	file:	access:public
num	libmke2fs/profile.c	/^	int			num;$/;"	m	struct:profile_iterator	file:	access:public
num_data_stripes	libmdadm/super-intel.c	/^static unsigned long long num_data_stripes(struct imsm_map *map)$/;"	f	file:	signature:(struct imsm_map *map)
num_data_stripes_hi	libmdadm/super-intel.c	/^	__u32 num_data_stripes_hi;$/;"	m	struct:imsm_map	file:	access:public
num_data_stripes_lo	libmdadm/super-intel.c	/^	__u32 num_data_stripes_lo;	\/* number of data stripes *\/$/;"	m	struct:imsm_map	file:	access:public
num_disks	libmdadm/super-intel.c	/^	__u8 num_disks;			\/* 0x38 Number of configured disks *\/$/;"	m	struct:imsm_super	file:	access:public
num_domains	libmdadm/super-intel.c	/^	__u8  num_domains;	\/* number of parity domains *\/$/;"	m	struct:imsm_map	file:	access:public
num_entries	libmke2fs/ext2fs.h	/^	int		num_entries;$/;"	m	struct:ext2_extent_info	access:public
num_inodes	libmke2fs/mke2fs.h	/^	unsigned long long num_inodes;$/;"	m	struct:e2fs_cfg	access:public
num_members	libmdadm/super-intel.c	/^	__u8  num_members;	\/* number of member disks *\/$/;"	m	struct:imsm_map	file:	access:public
num_migr_units	libmdadm/super-intel.c	/^	__u32 num_migr_units;	    \/* Total num migration units-of-op *\/$/;"	m	struct:migr_record	file:	access:public
num_raid_devs	libmdadm/super-intel.c	/^	__u8 num_raid_devs;		\/* 0x39 Number of configured volumes *\/$/;"	m	struct:imsm_super	file:	access:public
num_stripes_per_unit_rebuild	libmdadm/super-intel.c	/^static __u32 num_stripes_per_unit_rebuild(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
num_stripes_per_unit_resync	libmdadm/super-intel.c	/^static __u32 num_stripes_per_unit_resync(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
num_sub_vols	libmdadm/super-intel.c	/^	__u8  num_sub_vols;$/;"	m	struct:imsm_dev	file:	access:public
number	libmdadm/md_p.h	/^	__u32 number;		\/* 0 Device number in the entire set	      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
number	libmdadm/md_u.h	/^	int number;$/;"	m	struct:mdu_disk_info_s	access:public
ok_features	libmke2fs/mke2fs.c	/^static __u32 ok_features[3] = {$/;"	v	file:
old_raid_disks	libmdadm/super-intel.c	/^	int old_raid_disks;$/;"	m	struct:imsm_update_reshape	file:	access:public
old_raid_disks	libmdadm/super-intel.c	/^	int old_raid_disks;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
op	libmdadm/util.c	/^	int op;$/;"	m	struct:blkpg_ioctl_arg	file:	access:public
open_backup_targets	libmdadm/super-intel.c	/^int open_backup_targets(struct mdinfo *info, int raid_disks, int *raid_fds,$/;"	f	signature:(struct mdinfo *info, int raid_disks, int *raid_fds, struct intel_super *super, struct imsm_dev *dev)
open_container	libmdadm/mdadm.h	/^extern int open_container(int fd);$/;"	p	signature:(int fd)
open_container	libmdadm/util.c	/^int open_container(int fd)$/;"	f	signature:(int fd)
open_dev	libmdadm/mdadm.h	/^extern int open_dev(char *devnm);$/;"	p	signature:(char *devnm)
open_dev	libmdadm/util.c	/^int open_dev(char *devnm)$/;"	f	signature:(char *devnm)
open_dev_excl	libmdadm/mdadm.h	/^extern int open_dev_excl(char *devnm);$/;"	p	signature:(char *devnm)
open_dev_excl	libmdadm/util.c	/^int open_dev_excl(char *devnm)$/;"	f	signature:(char *devnm)
open_dev_flags	libmdadm/mdadm.h	/^extern int open_dev_flags(char *devnm, int flags);$/;"	p	signature:(char *devnm, int flags)
open_dev_flags	libmdadm/util.c	/^int open_dev_flags(char *devnm, int flags)$/;"	f	signature:(char *devnm, int flags)
open_map	libmdadm/mapfile.c	/^FILE *open_map(int modenum)$/;"	f	signature:(int modenum)
open_mddev	libmdadm/mdadm.h	/^extern int open_mddev(char *dev, int report_errors);$/;"	p	signature:(char *dev, int report_errors)
open_mddev	libmdadm/mdopen.c	/^int open_mddev(char *dev, int report_errors)$/;"	f	signature:(char *dev, int report_errors)
open_new	libmdadm/mdadm.h	/^	int (*open_new)(struct supertype *c, struct active_array *a,$/;"	m	struct:superswitch	access:public
open_subarray	libmdadm/mdadm.h	/^extern int open_subarray(char *dev, char *subarray, struct supertype *st, int quiet);$/;"	p	signature:(char *dev, char *subarray, struct supertype *st, int quiet)
open_subarray	libmdadm/util.c	/^int open_subarray(char *dev, char *subarray, struct supertype *st, int quiet)$/;"	f	signature:(char *dev, char *subarray, struct supertype *st, int quiet)
openflag	libmdadm/super-ddf.c	/^	__u8	openflag;$/;"	m	struct:ddf_header	file:	access:public
operator =	RAIDManager.h	/^	MiscDiskInfo& operator=(const MiscDiskInfo& rhs)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const MiscDiskInfo& rhs)
operator =	RAIDManager.h	/^	RAIDDiskInfo& operator=(const RAIDDiskInfo& rhs)$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const RAIDDiskInfo& rhs)
operator =	RAIDManager.h	/^	RAIDDiskInfo& operator=(const struct array_disk_info& rhs)$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const struct array_disk_info& rhs)
operator =	RAIDManager.h	/^	RAIDInfo& operator=(const RAIDInfo& rhs)$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& rhs)
operator =	RAIDManager.h	/^	RAIDInfo& operator=(const struct array_detail& rhs)$/;"	f	struct:RAIDInfo	access:public	signature:(const struct array_detail& rhs)
operator ==	RAIDManager.h	/^	bool operator==(const MiscDiskInfo& rhs)$/;"	f	struct:MiscDiskInfo	access:public	signature:(const MiscDiskInfo& rhs)
operator ==	RAIDManager.h	/^	bool operator==(const RAIDDiskInfo& rhs) const$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const RAIDDiskInfo& rhs) const
operator ==	RAIDManager.h	/^	bool operator==(const RAIDInfo& rhs) const$/;"	f	struct:RAIDInfo	access:public	signature:(const RAIDInfo& rhs) const
operator ==	RAIDManager.h	/^	bool operator==(const string& rhs) const$/;"	f	struct:RAIDDiskInfo	access:public	signature:(const string& rhs) const
operator ==	RAIDManager.h	/^	bool operator==(const string& rhs) const$/;"	f	struct:RAIDInfo	access:public	signature:(const string& rhs) const
ord_to_idx	libmdadm/super-intel.c	788;"	d	file:
orig_family_num	libmdadm/super-intel.c	/^	__u32 orig_family_num;		\/* 0x40 - 0x43 original family num *\/$/;"	m	struct:imsm_super	file:	access:public
orig_super	libmke2fs/ext2fs.h	/^	struct ext2_super_block *	orig_super;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_super_block	access:public
orom	libmdadm/super-intel.c	/^	const struct imsm_orom *orom; \/* platform firmware support *\/$/;"	m	struct:intel_super	typeref:struct:intel_super::imsm_orom	file:	access:public
other	libmdadm/mdadm.h	/^	void *other; \/* Hack used to convert v0.90 to v1.0 *\/$/;"	m	struct:supertype	access:public
other_bvds	libmdadm/super-ddf.c	/^				struct vd_config **other_bvds;$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	typeref:struct:ddf_super::vcl::__anon6::__anon7::vd_config	file:	access:public
output_quoted_string	libmke2fs/profile.c	/^static void output_quoted_string(char *str, void (*cb)(const char *,void *),$/;"	f	file:	signature:(char *str, void (*cb)(const char *,void *), void *data)
owner	libmdadm/super-intel.c	/^	int owner;$/;"	m	struct:intel_disk	file:	access:public
owner_cfg_num	libmdadm/super-intel.c	/^	__u32 owner_cfg_num; \/* which config 0,1,2... owns this disk *\/$/;"	m	struct:imsm_disk	file:	access:public
pData	libmke2fs/mke2fs.h	/^	void *pData;$/;"	m	struct:mke2fs_handle	access:public
pad	libmdadm/Grow.c	/^	__u8 pad[512-68-32];$/;"	m	struct:mdp_backup_super	file:	access:public
pad	libmdadm/bitmap.h	/^	__u8  pad[256 - 64]; \/* set to zero *\/$/;"	m	struct:bitmap_super_s	access:public
pad	libmdadm/part.h	/^	__u8 pad[446];$/;"	m	struct:MBR	access:public
pad	libmdadm/super-ddf.c	/^		__u8	pad[2];$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
pad	libmdadm/super-ddf.c	/^		__u8	pad[6];$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
pad	libmdadm/super-ddf.c	/^		__u8	pad[6];$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[10];$/;"	m	struct:bad_block_log	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[442];$/;"	m	struct:disk_data	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[52];$/;"	m	struct:phys_disk	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[52];$/;"	m	struct:virtual_disk	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[8];	\/* 0xff *\/$/;"	m	struct:ddf_controller_data	file:	access:public
pad	libmdadm/super-ddf.c	/^	__u8	pad[8];$/;"	m	struct:spare_assign	file:	access:public
pad	libmke2fs/ext2fs.h	/^	__u16				pad;$/;"	m	struct:struct_ext2_filsys	access:public
pad0	libmdadm/super-ddf.c	/^		__u16	pad0;	\/* 0xffff *\/$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
pad0	libmdadm/super-ddf.c	/^	__u8	pad0;		\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
pad0	libmdadm/super-ddf.c	/^	__u8	pad0[24];$/;"	m	struct:vd_config	file:	access:public
pad0	libmdadm/super1.c	/^	__u32	pad0;		\/* always set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
pad1	libmdadm/Grow.c	/^	__u32   pad1;$/;"	m	struct:mdp_backup_super	file:	access:public
pad1	libmdadm/part.h	/^	__u32 pad1;$/;"	m	struct:GPT	access:public
pad1	libmdadm/super-ddf.c	/^		__u8	pad1[14];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
pad1	libmdadm/super-ddf.c	/^	__u8	pad1[12];	\/* 12 * 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
pad1	libmdadm/super-ddf.c	/^	__u8	pad1[8];$/;"	m	struct:vd_config	file:	access:public
pad2	libmdadm/part.h	/^	__u8 pad2[420];$/;"	m	struct:GPT	access:public
pad2	libmdadm/super-ddf.c	/^	__u8	pad2[3];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
pad2	libmdadm/super-ddf.c	/^	__u8	pad2[3];$/;"	m	struct:vd_config	file:	access:public
pad3	libmdadm/super-ddf.c	/^	__u8	pad3[52];$/;"	m	struct:vd_config	file:	access:public
pad3	libmdadm/super-ddf.c	/^	__u8	pad3[54];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
pad3	libmdadm/super1.c	/^	__u8	pad3[64-32];	\/* set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
pad4	libmdadm/super-ddf.c	/^	__u8	pad4[192];$/;"	m	struct:vd_config	file:	access:public
pad4	libmdadm/super-ddf.c	/^	__u8	pad4[256];	\/* 0xff *\/$/;"	m	struct:ddf_header	file:	access:public
page	libmdadm/bitmap.h	/^	struct page *page;$/;"	m	struct:page_list	typeref:struct:page_list::page	access:public
page_list	libmdadm/bitmap.h	/^struct page_list {$/;"	s
page_list::list	libmdadm/bitmap.h	/^	struct list_head list;$/;"	m	struct:page_list	typeref:struct:page_list::list_head	access:public
page_list::page	libmdadm/bitmap.h	/^	struct page *page;$/;"	m	struct:page_list	typeref:struct:page_list::page	access:public
pages	libmdadm/bitmap.h	/^	unsigned long pages; \/* total number of pages in the bitmap *\/$/;"	m	struct:bitmap	access:public
parent	libmdadm/Monitor.c	/^	struct state *parent;  \/* for a subarray it is a link to its container$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
parent	libmke2fs/profile.c	/^	struct profile_node *parent;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
parent_devnm	libmdadm/Monitor.c	/^	char parent_devnm[32]; \/* For subarray, devnm of parent.$/;"	m	struct:state	file:	access:public
parity	libmdadm/mdadm.h	/^	int parity; \/* number of parity blocks\/devices *\/$/;"	m	struct:reshape	access:public
parity_segment_depth	libmdadm/super-intel.c	/^static __u32 parity_segment_depth(struct imsm_dev *dev)$/;"	f	file:	signature:(struct imsm_dev *dev)
parse_auto	libmdadm/config.c	/^int parse_auto(char *str, char *msg, int config)$/;"	f	signature:(char *str, char *msg, int config)
parse_auto	libmdadm/mdadm.h	/^extern int parse_auto(char *str, char *msg, int config);$/;"	p	signature:(char *str, char *msg, int config)
parse_extended_opts	libmke2fs/mke2fs.c	/^static void parse_extended_opts(struct ext2_super_block *param,$/;"	f	file:	signature:(struct ext2_super_block *param, const char *opts)
parse_fs_type	libmke2fs/mke2fs.c	/^static char **parse_fs_type(const char *fs_type,$/;"	f	file:	signature:(const char *fs_type, const char *usage_types, struct ext2_super_block *sb, blk64_t fs_blocks_count, char *progname)
parse_journal_opts	libmke2fs/util.c	/^void parse_journal_opts(const char *opts)$/;"	f	signature:(const char *opts)
parse_journal_opts	libmke2fs/util.h	/^extern void parse_journal_opts(const char *opts);$/;"	p	signature:(const char *opts)
parse_layout_10	libmdadm/mdadm.h	/^extern int parse_layout_10(char *layout);$/;"	p	signature:(char *layout)
parse_layout_10	libmdadm/util.c	/^int parse_layout_10(char *layout)$/;"	f	signature:(char *layout)
parse_layout_faulty	libmdadm/mdadm.h	/^extern int parse_layout_faulty(char *layout);$/;"	p	signature:(char *layout)
parse_layout_faulty	libmdadm/util.c	/^int parse_layout_faulty(char *layout)$/;"	f	signature:(char *layout)
parse_line	libmke2fs/profile.c	/^static errcode_t parse_line(char *line, struct parse_state *state)$/;"	f	file:	signature:(char *line, struct parse_state *state)
parse_line	libmke2fs/profile.c	/^static errcode_t parse_line(char *line, struct parse_state *state);$/;"	p	file:	signature:(char *line, struct parse_state *state)
parse_num	libmdadm/mdadm.h	/^extern long parse_num(char *num);$/;"	p	signature:(char *num)
parse_num	libmdadm/util.c	/^long parse_num(char *num)$/;"	f	signature:(char *num)
parse_quoted_string	libmke2fs/profile.c	/^static void parse_quoted_string(char *str)$/;"	f	file:	signature:(char *str)
parse_raid_devices	libmdadm/super-intel.c	/^static int parse_raid_devices(struct intel_super *super)$/;"	f	file:	signature:(struct intel_super *super)
parse_size	libmdadm/mdadm.h	/^extern unsigned long long parse_size(char *size);$/;"	p	signature:(char *size)
parse_size	libmdadm/util.c	/^unsigned long long parse_size(char *size)$/;"	f	signature:(char *size)
parse_state	libmke2fs/profile.c	/^struct parse_state {$/;"	s	file:
parse_state::current_section	libmke2fs/profile.c	/^	struct profile_node *current_section;$/;"	m	struct:parse_state	typeref:struct:parse_state::profile_node	file:	access:public
parse_state::group_level	libmke2fs/profile.c	/^	int	group_level;$/;"	m	struct:parse_state	file:	access:public
parse_state::line_num	libmke2fs/profile.c	/^	int	line_num;$/;"	m	struct:parse_state	file:	access:public
parse_state::root_section	libmke2fs/profile.c	/^	struct profile_node *root_section;$/;"	m	struct:parse_state	typeref:struct:parse_state::profile_node	file:	access:public
parse_state::state	libmke2fs/profile.c	/^	int	state;$/;"	m	struct:parse_state	file:	access:public
parse_uuid	libmdadm/mdadm.h	/^extern int parse_uuid(char *str, int uuid[4]);$/;"	p	signature:(char *str, int uuid[4])
parse_uuid	libmdadm/util.c	/^int parse_uuid(char *str, int uuid[4])$/;"	f	signature:(char *str, int uuid[4])
parse_version_number	libmke2fs/mke2fs.c	/^static int parse_version_number(const char *s)$/;"	f	file:	signature:(const char *s)
part_cnt	libmdadm/part.h	/^	__u32 part_cnt;$/;"	m	struct:GPT	access:public
part_crc	libmdadm/part.h	/^	__u32 part_crc;$/;"	m	struct:GPT	access:public
part_size	libmdadm/part.h	/^	__u32 part_size;$/;"	m	struct:GPT	access:public
part_start	libmdadm/part.h	/^	__u64 part_start;$/;"	m	struct:GPT	access:public
part_type	libmdadm/part.h	/^  __u8 part_type;$/;"	m	struct:MBR_part_record	access:public
partition_guid	libmdadm/part.h	/^	unsigned char partition_guid[16];$/;"	m	struct:GPT_part_entry	access:public
partition_try_spare	libmdadm/Incremental.c	/^static int partition_try_spare(char *devname, int *dfdp, struct dev_policy *pol,$/;"	f	file:	signature:(char *devname, int *dfdp, struct dev_policy *pol, struct supertype *st, int verbose)
parts	libmdadm/part.h	/^	struct MBR_part_record parts[MBR_PARTITIONS];$/;"	m	struct:MBR	typeref:struct:MBR::MBR_part_record	access:public
patch_version	libmdadm/md_p.h	/^	__u32 patch_version;	\/*  3 patchlevel version ...		      *\/$/;"	m	struct:mdp_superblock_s	access:public
patch_version	libmdadm/md_u.h	/^	int patch_version;$/;"	m	struct:mdu_array_info_s	access:public
patchlevel	libmdadm/md_u.h	/^	int patchlevel;$/;"	m	struct:mdu_version_s	access:public
path	libmdadm/mdadm.h	/^	char	*path;$/;"	m	struct:map_ent	access:public
path	libmdadm/platform-intel.h	/^	char *path;$/;"	m	struct:sys_dev	access:public
path	libmdadm/super-ddf.c	/^		char	path[18];	\/* Another horrible structure really$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
path	libmdadm/super-intel.c	/^	char *path;$/;"	m	struct:intel_hba	file:	access:public
path_attached_to_hba	libmdadm/platform-intel.c	/^int path_attached_to_hba(const char *disk_path, const char *hba_path)$/;"	f	signature:(const char *disk_path, const char *hba_path)
path_attached_to_hba	libmdadm/platform-intel.h	/^int path_attached_to_hba(const char *disk_path, const char *hba_path);$/;"	p	signature:(const char *disk_path, const char *hba_path)
path_has_part	libmdadm/policy.c	/^static int path_has_part(char *path, char **part)$/;"	f	file:	signature:(char *path, char **part)
path_policy	libmdadm/mdadm.h	/^extern struct dev_policy *path_policy(char *path, char *type);$/;"	p	signature:(char *path, char *type)
path_policy	libmdadm/policy.c	/^struct dev_policy *path_policy(char *path, char *type)$/;"	f	signature:(char *path, char *type)
pathname	libmdadm/md_u.h	/^	char pathname[4096];$/;"	m	struct:mdu_bitmap_file_s	access:public
pattern	libmdadm/mdadm.h	/^	char		*pattern; \/* U or up, _ for down *\/$/;"	m	struct:mdstat_ent	access:public
pba_of_lba0	libmdadm/super-intel.c	/^static unsigned long long pba_of_lba0(struct imsm_map *map)$/;"	f	file:	signature:(struct imsm_map *map)
pba_of_lba0_hi	libmdadm/super-intel.c	/^	__u32 pba_of_lba0_hi;$/;"	m	struct:imsm_map	file:	access:public
pba_of_lba0_lo	libmdadm/super-intel.c	/^	__u32 pba_of_lba0_lo;	\/* start address of partition *\/$/;"	m	struct:imsm_map	file:	access:public
pciExpDataStructFormat	libmdadm/platform-intel.c	/^struct pciExpDataStructFormat {$/;"	s	file:
pciExpDataStructFormat::deviceID	libmdadm/platform-intel.c	/^	__u16 deviceID;$/;"	m	struct:pciExpDataStructFormat	file:	access:public
pciExpDataStructFormat::vendorID	libmdadm/platform-intel.c	/^	__u16 vendorID;$/;"	m	struct:pciExpDataStructFormat	file:	access:public
pciExpDataStructFormat::ver	libmdadm/platform-intel.c	/^	__u8  ver[4];$/;"	m	struct:pciExpDataStructFormat	file:	access:public
pci_id	libmdadm/platform-intel.h	/^	char *pci_id;$/;"	m	struct:sys_dev	access:public
pci_id	libmdadm/super-intel.c	/^	char *pci_id;$/;"	m	struct:intel_hba	file:	access:public
pdnum	libmdadm/super-ddf.c	/^				int pdnum;	\/* index in ->phys *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
pdsize	libmdadm/super-ddf.c	/^	int			pdsize, vdsize;$/;"	m	struct:ddf_super	file:	access:public
percent	libmdadm/Monitor.c	/^	int percent;$/;"	m	struct:state	file:	access:public
percent	libmdadm/mdadm.h	/^	int		percent; \/* -1 if no resync *\/$/;"	m	struct:mdstat_ent	access:public
pers	libmdadm/maps.c	/^mapping_t pers[] = {$/;"	v
personality	libmdadm/md_u.h	/^	int			personality;	\/* 1,2,3,4 *\/$/;"	m	struct:mdu_param_s	access:public
phys	libmdadm/super-ddf.c	/^	struct phys_disk	*phys;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::phys_disk	file:	access:public
phys_disk	libmdadm/super-ddf.c	/^struct phys_disk {$/;"	s	file:
phys_disk::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:phys_disk	file:	access:public
phys_disk::entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:phys_disk	typeref:struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_PHYS_RECORDS_MAGIC *\/$/;"	m	struct:phys_disk	file:	access:public
phys_disk::max_pdes	libmdadm/super-ddf.c	/^	be16	max_pdes;$/;"	m	struct:phys_disk	file:	access:public
phys_disk::pad	libmdadm/super-ddf.c	/^	__u8	pad[52];$/;"	m	struct:phys_disk	file:	access:public
phys_disk::phys_disk_entry	libmdadm/super-ddf.c	/^	struct phys_disk_entry {$/;"	s	struct:phys_disk	file:	access:public
phys_disk::phys_disk_entry::config_size	libmdadm/super-ddf.c	/^		be64	config_size;	\/* DDF structures must be after here *\/$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::pad	libmdadm/super-ddf.c	/^		__u8	pad[6];$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::path	libmdadm/super-ddf.c	/^		char	path[18];	\/* Another horrible structure really$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::refnum	libmdadm/super-ddf.c	/^		be32	refnum;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::state	libmdadm/super-ddf.c	/^		be16	state;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::phys_disk_entry::type	libmdadm/super-ddf.c	/^		be16	type;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
phys_disk::used_pdes	libmdadm/super-ddf.c	/^	be16	used_pdes;	\/* This is a counter, not a max - the list$/;"	m	struct:phys_disk	file:	access:public
phys_disk_entry	libmdadm/super-ddf.c	/^	struct phys_disk_entry {$/;"	s	struct:phys_disk	file:	access:public
phys_refnum	libmdadm/super-ddf.c	/^	be32	phys_refnum[0];	\/* refnum of each disk in sequence *\/$/;"	m	struct:vd_config	file:	access:public
phys_section_length	libmdadm/super-ddf.c	/^	be32	phys_section_length;$/;"	m	struct:ddf_header	file:	access:public
phys_section_offset	libmdadm/super-ddf.c	/^	be32	phys_section_offset;$/;"	m	struct:ddf_header	file:	access:public
ping_manager	libmdadm/msg.c	/^int ping_manager(char *devname)$/;"	f	signature:(char *devname)
ping_manager	libmdadm/msg.h	/^extern int ping_manager(char *devname);$/;"	p	signature:(char *devname)
ping_monitor	libmdadm/msg.c	/^int ping_monitor(char *devname)$/;"	f	signature:(char *devname)
ping_monitor	libmdadm/msg.h	/^extern int ping_monitor(char *devname);$/;"	p	signature:(char *devname)
ping_monitor_version	libmdadm/msg.c	/^static char *ping_monitor_version(char *devname)$/;"	f	file:	signature:(char *devname)
pno	libmdadm/util.c	/^	int pno;			\/* partition number *\/$/;"	m	struct:blkpg_partition	file:	access:public
pol_act	libmdadm/policy.c	/^char pol_act[] = "action";$/;"	v
pol_add	libmdadm/mdadm.h	/^extern void pol_add(struct dev_policy **pol, char *name, char *val, char *metadata);$/;"	p	signature:(struct dev_policy **pol, char *name, char *val, char *metadata)
pol_add	libmdadm/policy.c	/^void pol_add(struct dev_policy **pol,$/;"	f	signature:(struct dev_policy **pol, char *name, char *val, char *metadata)
pol_auto	libmdadm/policy.c	/^char pol_auto[] = "auto";$/;"	v
pol_dedup	libmdadm/policy.c	/^static void pol_dedup(struct dev_policy *pol)$/;"	f	file:	signature:(struct dev_policy *pol)
pol_domain	libmdadm/policy.c	/^char pol_domain[] = "domain";$/;"	v
pol_find	libmdadm/mdadm.h	/^extern struct dev_policy *pol_find(struct dev_policy *pol, char *name);$/;"	p	signature:(struct dev_policy *pol, char *name)
pol_find	libmdadm/policy.c	/^struct dev_policy *pol_find(struct dev_policy *pol, char *name)$/;"	f	signature:(struct dev_policy *pol, char *name)
pol_for_each	libmdadm/mdadm.h	1006;"	d
pol_lesseq	libmdadm/policy.c	/^static int pol_lesseq(struct dev_policy *a, struct dev_policy *b)$/;"	f	file:	signature:(struct dev_policy *a, struct dev_policy *b)
pol_match	libmdadm/policy.c	/^static int pol_match(struct rule *rule, char *path, char *type)$/;"	f	file:	signature:(struct rule *rule, char *path, char *type)
pol_merge	libmdadm/policy.c	/^static void pol_merge(struct dev_policy **pol, struct rule *rule)$/;"	f	file:	signature:(struct dev_policy **pol, struct rule *rule)
pol_merge_part	libmdadm/policy.c	/^static void pol_merge_part(struct dev_policy **pol, struct rule *rule, char *part)$/;"	f	file:	signature:(struct dev_policy **pol, struct rule *rule, char *part)
pol_metadata	libmdadm/policy.c	/^char pol_metadata[] = "metadata";$/;"	v
pol_new	libmdadm/policy.c	/^static void pol_new(struct dev_policy **pol, char *name, const char *val,$/;"	f	file:	signature:(struct dev_policy **pol, char *name, const char *val, const char *metadata)
pol_rule	libmdadm/mdadm.h	/^struct pol_rule {$/;"	s
pol_rule::next	libmdadm/mdadm.h	/^	struct pol_rule *next;$/;"	m	struct:pol_rule	typeref:struct:pol_rule::pol_rule	access:public
pol_rule::rule	libmdadm/mdadm.h	/^	struct rule {$/;"	s	struct:pol_rule	access:public
pol_rule::rule	libmdadm/mdadm.h	/^	} *rule;$/;"	m	struct:pol_rule	typeref:struct:pol_rule::rule	access:public
pol_rule::rule::dups	libmdadm/mdadm.h	/^		char *dups; \/* duplicates of 'value' with a partNN appended *\/$/;"	m	struct:pol_rule::rule	access:public
pol_rule::rule::name	libmdadm/mdadm.h	/^		char *name;$/;"	m	struct:pol_rule::rule	access:public
pol_rule::rule::next	libmdadm/mdadm.h	/^		struct rule *next;$/;"	m	struct:pol_rule::rule	typeref:struct:pol_rule::rule::rule	access:public
pol_rule::rule::value	libmdadm/mdadm.h	/^		char *value;$/;"	m	struct:pol_rule::rule	access:public
pol_rule::type	libmdadm/mdadm.h	/^	char *type;	\/* rule_policy or rule_part *\/$/;"	m	struct:pol_rule	access:public
pol_sort	libmdadm/policy.c	/^static void pol_sort(struct dev_policy **pol)$/;"	f	file:	signature:(struct dev_policy **pol)
policy_action	libmdadm/mdadm.h	/^enum policy_action {$/;"	g
policy_action	libmdadm/policy.c	/^static enum policy_action policy_action(struct dev_policy *plist, const char *metadata)$/;"	f	file:	signature:(struct dev_policy *plist, const char *metadata)
policy_action_allows	libmdadm/mdadm.h	/^extern int policy_action_allows(struct dev_policy *plist, const char *metadata,$/;"	p	signature:(struct dev_policy *plist, const char *metadata, enum policy_action want)
policy_action_allows	libmdadm/policy.c	/^int policy_action_allows(struct dev_policy *plist, const char *metadata, enum policy_action want)$/;"	f	signature:(struct dev_policy *plist, const char *metadata, enum policy_action want)
policy_add	libmdadm/mdadm.h	/^extern void policy_add(char *type, ...);$/;"	p	signature:(char *type, ...)
policy_add	libmdadm/policy.c	/^void policy_add(char *type, ...)$/;"	f	signature:(char *type, ...)
policy_check_path	libmdadm/mdadm.h	/^extern int policy_check_path(struct mdinfo *disk, struct map_ent *array);$/;"	p	signature:(struct mdinfo *disk, struct map_ent *array)
policy_check_path	libmdadm/policy.c	/^int policy_check_path(struct mdinfo *disk, struct map_ent *array)$/;"	f	signature:(struct mdinfo *disk, struct map_ent *array)
policy_free	libmdadm/mdadm.h	/^extern void policy_free(void);$/;"	p	signature:(void)
policy_free	libmdadm/policy.c	/^void policy_free(void)$/;"	f	signature:(void)
policy_save_path	libmdadm/mdadm.h	/^extern void policy_save_path(char *id_path, struct map_ent *array);$/;"	p	signature:(char *id_path, struct map_ent *array)
policy_save_path	libmdadm/policy.c	/^void policy_save_path(char *id_path, struct map_ent *array)$/;"	f	signature:(char *id_path, struct map_ent *array)
policyline	libmdadm/mdadm.h	/^extern void policyline(char *line, char *type);$/;"	p	signature:(char *line, char *type)
policyline	libmdadm/policy.c	/^void policyline(char *line, char *type)$/;"	f	signature:(char *line, char *type)
populated	libmdadm/super-ddf.c	/^	be16	populated;	\/* SAEs used *\/$/;"	m	struct:spare_assign	file:	access:public
populated_efi	libmdadm/platform-intel.c	/^int populated_efi[SYS_DEV_MAX] = { 0, 0 };$/;"	v
populated_orom	libmdadm/platform-intel.c	/^static int populated_orom[SYS_DEV_MAX];$/;"	v	file:
populated_vdes	libmdadm/super-ddf.c	/^	be16	populated_vdes;$/;"	m	struct:virtual_disk	file:	access:public
post_migr_vol_cap	libmdadm/super-intel.c	/^	__u32 post_migr_vol_cap;    \/* Size of volume after$/;"	m	struct:migr_record	file:	access:public
post_migr_vol_cap_hi	libmdadm/super-intel.c	/^	__u32 post_migr_vol_cap_hi; \/* Expansion space for LBA64 *\/$/;"	m	struct:migr_record	file:	access:public
pr_err	libmdadm/mdadm.h	1400;"	d
pr_err	libmdadm/mdadm.h	1403;"	d
pr_err	libmdadm/mdmon.h	21;"	d
pr_err	libmdadm/mdmon.h	22;"	d
pr_state	libmdadm/super-ddf.c	/^static void pr_state(const struct ddf_super *ddf, const char *msg) {}$/;"	f	file:	signature:(const struct ddf_super *ddf, const char *msg)
pr_state	libmdadm/super-ddf.c	/^static void pr_state(struct ddf_super *ddf, const char *msg)$/;"	f	file:	signature:(struct ddf_super *ddf, const char *msg)
pr_vrb	libmdadm/super-intel.c	296;"	d	file:
prefer	libmdadm/mdadm.h	/^	char	*prefer;$/;"	m	struct:context	access:public
prefix_standard	libmdadm/mdadm.h	/^enum prefix_standard {$/;"	g
prepare_update	libmdadm/mdadm.h	/^	int (*prepare_update)(struct supertype *st,$/;"	m	struct:superswitch	access:public
prev	libmke2fs/profile.c	/^	struct profile_node *next, *prev;$/;"	m	struct:profile_node	typeref:struct:profile_node::	file:	access:public
prev_action	libmdadm/mdmon.h	/^	enum sync_action prev_action, curr_action, next_action;$/;"	m	struct:active_array	typeref:enum:active_array::sync_action	access:public
prev_state	libmdadm/mdadm.h	/^	int prev_state, curr_state, next_state;$/;"	m	struct:mdinfo	access:public
prev_state	libmdadm/mdmon.h	/^	enum array_state prev_state, curr_state, next_state;$/;"	m	struct:active_array	typeref:enum:active_array::array_state	access:public
prf_file_t	libmke2fs/profile.c	/^typedef struct _prf_file_t *prf_file_t;$/;"	t	typeref:struct:_prf_file_t	file:
prf_magic_t	libmke2fs/profile.c	/^typedef long prf_magic_t;$/;"	t	file:
prim_elmnt_count	libmdadm/super-ddf.c	/^	be16	prim_elmnt_count;$/;"	m	struct:vd_config	file:	access:public
primary	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::	file:	access:public
primary_lba	libmdadm/super-ddf.c	/^				be64 primary_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
primary_lba	libmdadm/super-ddf.c	/^	be64	primary_lba;$/;"	m	struct:ddf_header	file:	access:public
print_check_message	libmke2fs/util.c	/^void print_check_message(int mnt, unsigned int check)$/;"	f	signature:(int mnt, unsigned int check)
print_check_message	libmke2fs/util.h	/^extern void print_check_message(int, unsigned int);$/;"	p	signature:(int, unsigned int)
print_escape	libmdadm/lib.c	/^void print_escape(char *str)$/;"	f	signature:(char *str)
print_escape	libmdadm/mdadm.h	/^extern void print_escape(char *str);$/;"	p	signature:(char *str)
print_found_intel_controllers	libmdadm/super-intel.c	/^static void print_found_intel_controllers(struct sys_dev *elem)$/;"	f	file:	signature:(struct sys_dev *elem)
print_guid	libmdadm/super-ddf.c	/^static void print_guid(char *guid, int tstamp)$/;"	f	file:	signature:(char *guid, int tstamp)
print_imsm_capability	libmdadm/super-intel.c	/^static void print_imsm_capability(const struct imsm_orom *orom)$/;"	f	file:	signature:(const struct imsm_orom *orom)
print_imsm_capability_export	libmdadm/super-intel.c	/^static void print_imsm_capability_export(const struct imsm_orom *orom)$/;"	f	file:	signature:(const struct imsm_orom *orom)
print_imsm_dev	libmdadm/super-intel.c	/^static void print_imsm_dev(struct intel_super *super,$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev, char *uuid, int disk_idx)
print_imsm_disk	libmdadm/super-intel.c	/^static void print_imsm_disk(struct imsm_disk *disk, int index, __u32 reserved)$/;"	f	file:	signature:(struct imsm_disk *disk, int index, __u32 reserved)
print_quoted	libmdadm/lib.c	/^void print_quoted(char *str)$/;"	f	signature:(char *str)
print_quoted	libmdadm/mdadm.h	/^extern void print_quoted(char *str);$/;"	p	signature:(char *str)
print_r10_layout	libmdadm/mdadm.h	/^extern void print_r10_layout(int layout);$/;"	p	signature:(int layout)
print_r10_layout	libmdadm/util.c	/^void print_r10_layout(int layout)$/;"	f	signature:(int layout)
print_str_list	libmke2fs/mke2fs.c	/^static void print_str_list(char **list)$/;"	f	file:	signature:(char **list)
priv_data	libmke2fs/ext2fs.h	/^	void *				priv_data;$/;"	m	struct:struct_ext2_filsys	access:public
priv_data	libmke2fs/ext2fsP.h	/^	void		*priv_data;$/;"	m	struct:dir_context	access:public
prl	libmdadm/super-ddf.c	/^	__u8	prl;$/;"	m	struct:vd_config	file:	access:public
probe_address16	libmdadm/probe_roms.c	/^static int probe_address16(const __u16 *ptr, __u16 *val)$/;"	f	file:	signature:(const __u16 *ptr, __u16 *val)
probe_address8	libmdadm/probe_roms.c	/^static int probe_address8(const __u8 *ptr, __u8 *val)$/;"	f	file:	signature:(const __u8 *ptr, __u8 *val)
probe_roms	libmdadm/probe_roms.c	/^void probe_roms(void)$/;"	f	signature:(void)
probe_roms	libmdadm/probe_roms.h	/^void probe_roms(void);$/;"	p	signature:(void)
probe_roms_exit	libmdadm/probe_roms.c	/^void probe_roms_exit(void)$/;"	f	signature:(void)
probe_roms_exit	libmdadm/probe_roms.h	/^void probe_roms_exit(void);$/;"	p	signature:(void)
probe_roms_init	libmdadm/probe_roms.c	/^int probe_roms_init(unsigned long align)$/;"	f	signature:(unsigned long align)
probe_roms_init	libmdadm/probe_roms.h	/^int probe_roms_init(unsigned long align);$/;"	p	signature:(unsigned long align)
proceed_question	libmke2fs/util.c	/^void proceed_question(void)$/;"	f	signature:(void)
proceed_question	libmke2fs/util.h	/^extern void proceed_question(void);$/;"	p	signature:(void)
process_update	libmdadm/mdadm.h	/^	void (*process_update)(struct supertype *st,$/;"	m	struct:superswitch	access:public
product_id	libmdadm/super-ddf.c	/^	char	product_id[16];$/;"	m	struct:ddf_controller_data	file:	access:public
prof_buf	libmke2fs/profile.c	/^struct prof_buf {$/;"	s	file:
prof_buf::base	libmke2fs/profile.c	/^	char *base;$/;"	m	struct:prof_buf	file:	access:public
prof_buf::cur	libmke2fs/profile.c	/^	size_t cur, max;$/;"	m	struct:prof_buf	file:	access:public
prof_buf::err	libmke2fs/profile.c	/^	int err;$/;"	m	struct:prof_buf	file:	access:public
prof_buf::max	libmke2fs/profile.c	/^	size_t cur, max;$/;"	m	struct:prof_buf	file:	access:public
prof_err_base	libmke2fs/prof_err.h	49;"	d
profile	libmke2fs/mke2fs.c	/^static profile_t	profile;$/;"	v	file:
profile	libmke2fs/profile.c	/^	profile_t		profile;$/;"	m	struct:profile_iterator	file:	access:public
profile_add_node	libmke2fs/profile.c	/^errcode_t profile_add_node(struct profile_node *section, const char *name,$/;"	f	signature:(struct profile_node *section, const char *name, const char *value, struct profile_node **ret_node)
profile_add_node	libmke2fs/profile.c	/^static errcode_t profile_add_node$/;"	p	file:	signature:(struct profile_node *section, const char *name, const char *value, struct profile_node **ret_node)
profile_create_node	libmke2fs/profile.c	/^errcode_t profile_create_node(const char *name, const char *value,$/;"	f	signature:(const char *name, const char *value, struct profile_node **ret_node)
profile_create_node	libmke2fs/profile.c	/^static errcode_t profile_create_node$/;"	p	file:	signature:(const char *name, const char *value, struct profile_node **ret_node)
profile_find_node	libmke2fs/profile.c	/^errcode_t profile_find_node(struct profile_node *section, const char *name,$/;"	f	signature:(struct profile_node *section, const char *name, const char *value, int section_flag, void **state, struct profile_node **node)
profile_find_node	libmke2fs/profile.c	/^static errcode_t profile_find_node$/;"	p	file:	signature:(struct profile_node *section, const char *name, const char *value, int section_flag, void **state, struct profile_node **node)
profile_free_file	libmke2fs/profile.c	/^static void profile_free_file$/;"	p	file:	signature:(prf_file_t profile)
profile_free_file	libmke2fs/profile.c	/^void profile_free_file(prf_file_t prf)$/;"	f	signature:(prf_file_t prf)
profile_free_node	libmke2fs/profile.c	/^static void profile_free_node$/;"	p	file:	signature:(struct profile_node *relation)
profile_free_node	libmke2fs/profile.c	/^void profile_free_node(struct profile_node *node)$/;"	f	signature:(struct profile_node *node)
profile_get_boolean	libmke2fs/profile.c	/^profile_get_boolean(profile_t profile, const char *name, const char *subname,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_boolean)
profile_get_boolean	libmke2fs/profile.h	/^long profile_get_boolean$/;"	p	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default)
profile_get_double	libmke2fs/profile.c	/^profile_get_double(profile_t profile, const char *name, const char *subname,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, double def_val, double *ret_double)
profile_get_double	libmke2fs/profile.h	/^long profile_get_double$/;"	p	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, double def_val, double *ret_float)
profile_get_integer	libmke2fs/profile.c	/^profile_get_integer(profile_t profile, const char *name, const char *subname,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_int)
profile_get_integer	libmke2fs/profile.h	/^long profile_get_integer$/;"	p	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default)
profile_get_string	libmke2fs/profile.c	/^profile_get_string(profile_t profile, const char *name, const char *subname,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, const char *def_val, char **ret_string)
profile_get_string	libmke2fs/profile.h	/^long profile_get_string$/;"	p	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, const char *def_val, char **ret_string)
profile_get_uint	libmke2fs/profile.c	/^profile_get_uint(profile_t profile, const char *name, const char *subname,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, unsigned int def_val, unsigned int *ret_int)
profile_get_uint	libmke2fs/profile.h	/^long profile_get_uint$/;"	p	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, unsigned int def_val, unsigned int *ret_int)
profile_get_value	libmke2fs/profile.c	/^errcode_t profile_get_value(profile_t profile, const char *name,$/;"	f	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, const char **ret_value)
profile_get_value	libmke2fs/profile.c	/^static errcode_t profile_get_value(profile_t profile, const char *name,$/;"	p	file:	signature:(profile_t profile, const char *name, const char *subname, const char *subsubname, const char **ret_value)
profile_has_subsection	libmke2fs/mke2fs.c	/^static int profile_has_subsection(profile_t prof, const char *section,$/;"	f	file:	signature:(profile_t prof, const char *section, const char *subsection)
profile_init	libmke2fs/profile.c	/^profile_init(const char **files, profile_t *ret_profile)$/;"	f	signature:(const char **files, profile_t *ret_profile)
profile_init	libmke2fs/profile.h	/^long profile_init$/;"	p	signature:(const char * *files, profile_t *ret_profile)
profile_iterator	libmke2fs/profile.c	/^profile_iterator(void **iter_p, char **ret_name, char **ret_value)$/;"	f	signature:(void **iter_p, char **ret_name, char **ret_value)
profile_iterator	libmke2fs/profile.c	/^struct profile_iterator {$/;"	s	file:
profile_iterator	libmke2fs/profile.h	/^long profile_iterator$/;"	p	signature:(void **iter_p, char **ret_name, char **ret_value)
profile_iterator::done_idx	libmke2fs/profile.c	/^	int			done_idx;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::file	libmke2fs/profile.c	/^	prf_file_t		file;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::file_serial	libmke2fs/profile.c	/^	int			file_serial;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::flags	libmke2fs/profile.c	/^	int			flags;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::magic	libmke2fs/profile.c	/^	prf_magic_t		magic;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::name	libmke2fs/profile.c	/^	const char		*name;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::names	libmke2fs/profile.c	/^	const char 		*const *names;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::node	libmke2fs/profile.c	/^	struct profile_node 	*node;$/;"	m	struct:profile_iterator	typeref:struct:profile_iterator::profile_node	file:	access:public
profile_iterator::num	libmke2fs/profile.c	/^	int			num;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator::profile	libmke2fs/profile.c	/^	profile_t		profile;$/;"	m	struct:profile_iterator	file:	access:public
profile_iterator_create	libmke2fs/profile.c	/^profile_iterator_create(profile_t profile, const char *const *names, int flags,$/;"	f	signature:(profile_t profile, const char *const *names, int flags, void **ret_iter)
profile_iterator_create	libmke2fs/profile.h	/^long profile_iterator_create$/;"	p	signature:(profile_t profile, const char *const *names, int flags, void **ret_iter)
profile_iterator_free	libmke2fs/profile.c	/^void profile_iterator_free(void **iter_p)$/;"	f	signature:(void **iter_p)
profile_iterator_free	libmke2fs/profile.h	/^void profile_iterator_free$/;"	p	signature:(void **iter_p)
profile_node	libmke2fs/profile.c	/^struct profile_node {$/;"	s	file:
profile_node::deleted	libmke2fs/profile.c	/^	unsigned int deleted:1;$/;"	m	struct:profile_node	file:	access:public
profile_node::final	libmke2fs/profile.c	/^	unsigned int final:1;		\/* Indicate don't search next file *\/$/;"	m	struct:profile_node	file:	access:public
profile_node::first_child	libmke2fs/profile.c	/^	struct profile_node *first_child;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
profile_node::group_level	libmke2fs/profile.c	/^	int group_level;$/;"	m	struct:profile_node	file:	access:public
profile_node::magic	libmke2fs/profile.c	/^	errcode_t	magic;$/;"	m	struct:profile_node	file:	access:public
profile_node::name	libmke2fs/profile.c	/^	char *name;$/;"	m	struct:profile_node	file:	access:public
profile_node::next	libmke2fs/profile.c	/^	struct profile_node *next, *prev;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
profile_node::parent	libmke2fs/profile.c	/^	struct profile_node *parent;$/;"	m	struct:profile_node	typeref:struct:profile_node::profile_node	file:	access:public
profile_node::prev	libmke2fs/profile.c	/^	struct profile_node *next, *prev;$/;"	m	struct:profile_node	typeref:struct:profile_node::	file:	access:public
profile_node::value	libmke2fs/profile.c	/^	char *value;$/;"	m	struct:profile_node	file:	access:public
profile_node_iterator	libmke2fs/profile.c	/^errcode_t profile_node_iterator(void **iter_p, struct profile_node **ret_node,$/;"	f	signature:(void **iter_p, struct profile_node **ret_node, char **ret_name, char **ret_value)
profile_node_iterator	libmke2fs/profile.c	/^static errcode_t profile_node_iterator$/;"	p	file:	signature:(void **iter_p, struct profile_node **ret_node, char **ret_name, char **ret_value)
profile_open_file	libmke2fs/profile.c	/^errcode_t profile_open_file(const char * filespec,$/;"	f	signature:(const char * filespec, prf_file_t *ret_prof)
profile_open_file	libmke2fs/profile.c	/^static errcode_t profile_open_file$/;"	p	file:	signature:(const char * file, prf_file_t *ret_prof)
profile_parse_boolean	libmke2fs/profile.c	/^profile_parse_boolean(const char *s, int *ret_boolean)$/;"	f	file:	signature:(const char *s, int *ret_boolean)
profile_release	libmke2fs/profile.c	/^profile_release(profile_t profile)$/;"	f	signature:(profile_t profile)
profile_release	libmke2fs/profile.h	/^void profile_release$/;"	p	signature:(profile_t profile)
profile_set_default	libmke2fs/profile.c	/^errcode_t profile_set_default(profile_t profile, const char *def_string)$/;"	f	signature:(profile_t profile, const char *def_string)
profile_set_default	libmke2fs/profile.h	/^long profile_set_default$/;"	p	signature:(profile_t profile, const char *def_string)
profile_set_syntax_err_cb	libmke2fs/profile.c	/^profile_syntax_err_cb_t profile_set_syntax_err_cb(profile_syntax_err_cb_t hook)$/;"	f	signature:(profile_syntax_err_cb_t hook)
profile_set_syntax_err_cb	libmke2fs/profile.h	/^profile_syntax_err_cb_t profile_set_syntax_err_cb(profile_syntax_err_cb_t hook);$/;"	p	signature:(profile_syntax_err_cb_t hook)
profile_syntax_err_cb_t	libmke2fs/profile.h	/^typedef void (*profile_syntax_err_cb_t)(const char *file, long err,$/;"	t
profile_t	libmke2fs/profile.h	/^typedef struct _profile_t *profile_t;$/;"	t	typeref:struct:_profile_t
profile_update_file	libmke2fs/profile.c	/^errcode_t profile_update_file(prf_file_t prf)$/;"	f	signature:(prf_file_t prf)
profile_update_file	libmke2fs/profile.c	/^static errcode_t profile_update_file$/;"	p	file:	signature:(prf_file_t prf)
profile_verify_node	libmke2fs/profile.c	/^errcode_t profile_verify_node(struct profile_node *node)$/;"	f	signature:(struct profile_node *node)
profile_verify_node	libmke2fs/profile.c	/^static errcode_t profile_verify_node$/;"	p	file:	signature:(struct profile_node *node)
profile_write_tree_file	libmke2fs/profile.c	/^errcode_t profile_write_tree_file(struct profile_node *root, FILE *dstfile)$/;"	f	signature:(struct profile_node *root, FILE *dstfile)
profile_write_tree_file	libmke2fs/profile.c	/^static errcode_t profile_write_tree_file$/;"	p	file:	signature:(struct profile_node *root, FILE *dstfile)
profile_write_tree_to_buffer	libmke2fs/profile.c	/^errcode_t profile_write_tree_to_buffer(struct profile_node *root,$/;"	f	signature:(struct profile_node *root, char **buf)
profile_write_tree_to_buffer	libmke2fs/profile.c	/^static errcode_t profile_write_tree_to_buffer$/;"	p	file:	signature:(struct profile_node *root, char **buf)
program_name	libmke2fs/mke2fs.c	/^static const char * program_name = "mke2fs";$/;"	v	file:
program_name	libmke2fs/profile.c	/^const char *program_name = "test_profile";$/;"	v
programline	libmdadm/config.c	/^void programline(char *line)$/;"	f	signature:(char *line)
progress_reshape	libmdadm/Grow.c	/^int progress_reshape(struct mdinfo *info, struct reshape *reshape,$/;"	f	signature:(struct mdinfo *info, struct reshape *reshape, unsigned long long backup_point, unsigned long long wait_point, unsigned long long *suspend_point, unsigned long long *reshape_completed, int *frozen)
pstate_reserved	libmdadm/md_p.h	/^	__u32 pstate_reserved[MD_SB_PERSONALITY_WORDS - 4];$/;"	m	struct:mdp_superblock_s	access:public
ptr	libmke2fs/ext2fsP.h	/^	int			ptr;$/;"	m	struct:ext2_struct_u32_iterate	access:public
ptrdiff_t	libmdadm/crc32.c	/^typedef long ptrdiff_t;$/;"	t	file:
push_string	libmke2fs/mke2fs.c	/^static errcode_t push_string(struct str_list *sl, const char *str)$/;"	f	file:	signature:(struct str_list *sl, const char *str)
put_md_name	libmdadm/mdadm.h	/^extern void put_md_name(char *name);$/;"	p	signature:(char *name)
put_md_name	libmdadm/util.c	/^void put_md_name(char *name)$/;"	f	signature:(char *name)
pwr_cycle_count	libmdadm/super-intel.c	/^	__u32 pwr_cycle_count;		\/* 0x44 - 0x47 simulated power cycle count for array *\/$/;"	m	struct:imsm_super	file:	access:public
qsyndrome	libmdadm/restripe.c	/^void qsyndrome(uint8_t *p, uint8_t *q, uint8_t **sources, int disks, int size)$/;"	f	signature:(uint8_t *p, uint8_t *q, uint8_t **sources, int disks, int size)
query_result	libmdadm/mdadm_other.h	/^struct query_result {$/;"	s
query_result::bHasMDDetail	libmdadm/mdadm_other.h	/^	int bHasMDDetail;$/;"	m	struct:query_result	access:public
query_result::bHasMDError	libmdadm/mdadm_other.h	/^	int bHasMDError;$/;"	m	struct:query_result	access:public
query_result::bIsMD	libmdadm/mdadm_other.h	/^	int bIsMD;$/;"	m	struct:query_result	access:public
query_result::bIsMDActive	libmdadm/mdadm_other.h	/^	int bIsMDActive;$/;"	m	struct:query_result	access:public
query_result::iDiskNumber	libmdadm/mdadm_other.h	/^	int iDiskNumber;$/;"	m	struct:query_result	access:public
query_result::iMDRaidDiskNum	libmdadm/mdadm_other.h	/^	int iMDRaidDiskNum;	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
query_result::iMDRaidLevel	libmdadm/mdadm_other.h	/^	int iMDRaidLevel;	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
query_result::iMDSpareDiskNum	libmdadm/mdadm_other.h	/^	int iMDSpareDiskNum;	$/;"	m	struct:query_result	access:public
query_result::strDiskActivity	libmdadm/mdadm_other.h	/^	char strDiskActivity[32];$/;"	m	struct:query_result	access:public
query_result::strDiskDevName	libmdadm/mdadm_other.h	/^	char strDiskDevName[32];$/;"	m	struct:query_result	access:public
query_result::strMDDevName	libmdadm/mdadm_other.h	/^	char strMDDevName[32];	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
query_result::strMDError	libmdadm/mdadm_other.h	/^	char strMDError[128];$/;"	m	struct:query_result	access:public
query_result::strMDLevel	libmdadm/mdadm_other.h	/^	char strMDLevel[16];	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
query_result::strMDSize	libmdadm/mdadm_other.h	/^	char strMDSize[32];$/;"	m	struct:query_result	access:public
queue_metadata_update	libmdadm/managemon.c	/^static void queue_metadata_update(struct metadata_update *mu)$/;"	f	file:	signature:(struct metadata_update *mu)
quiet	libmke2fs/mke2fs.c	/^static int	quiet;$/;"	v	file:
quiet	libmke2fs/mke2fs.h	/^	int quiet;$/;"	m	struct:e2fs_cfg	access:public
quotatype	libmke2fs/mke2fs.c	/^static int	quotatype = -1;  \/* Initialize both user and group quotas by default *\/$/;"	v	file:
r5layout	libmdadm/maps.c	/^mapping_t r5layout[] = {$/;"	v
r6layout	libmdadm/maps.c	/^mapping_t r6layout[] = {$/;"	v
r_opt	libmke2fs/mke2fs.h	/^	int r_opt;$/;"	m	struct:e2fs_cfg	access:public
raid	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
raid10_degraded	libmdadm/super-ddf.c	/^static int raid10_degraded(struct mdinfo *info)$/;"	f	file:	signature:(struct mdinfo *info)
raid10_reshape	libmdadm/Grow.c	/^static int raid10_reshape(char *container, int fd, char *devname,$/;"	f	file:	signature:(char *container, int fd, char *devname, struct supertype *st, struct mdinfo *info, struct reshape *reshape, unsigned long long data_offset, int force, int verbose)
raid6_2data_recov	libmdadm/restripe.c	/^void raid6_2data_recov(int disks, size_t bytes, int faila, int failb,$/;"	f	signature:(int disks, size_t bytes, int faila, int failb, uint8_t **ptrs)
raid6_check_disks	libmdadm/restripe.c	/^int raid6_check_disks(int data_disks, int start, int chunk_size,$/;"	f	signature:(int data_disks, int start, int chunk_size, int level, int layout, int diskP, int diskQ, char *p, char *q, char **stripes)
raid6_datap_recov	libmdadm/restripe.c	/^void raid6_datap_recov(int disks, size_t bytes, int faila, uint8_t **ptrs)$/;"	f	signature:(int disks, size_t bytes, int faila, uint8_t **ptrs)
raid6_gfexi	libmdadm/restripe.c	/^uint8_t raid6_gfexi[256];$/;"	v
raid6_gfexp	libmdadm/restripe.c	/^uint8_t raid6_gfexp[256];$/;"	v
raid6_gfilog	libmdadm/restripe.c	/^uint8_t raid6_gfilog[256];$/;"	v
raid6_gfinv	libmdadm/restripe.c	/^uint8_t raid6_gfinv[256];$/;"	v
raid6_gflog	libmdadm/restripe.c	/^uint8_t raid6_gflog[256];$/;"	v
raid6_gfmul	libmdadm/restripe.c	/^uint8_t raid6_gfmul[256][256];$/;"	v
raid_disk	libmdadm/md_p.h	/^	__u32 raid_disk;	\/* 3 The role of the device in the raid set   *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
raid_disk	libmdadm/md_u.h	/^	int raid_disk;$/;"	m	struct:mdu_disk_info_s	access:public
raid_disk	libmdadm/md_u.h	/^	int raid_disk;$/;"	m	struct:mdu_start_info_s	access:public
raid_disks	libmdadm/md_p.h	/^	__u32 raid_disks;	\/* 10 disks in a fully functional raid set    *\/$/;"	m	struct:mdp_superblock_s	access:public
raid_disks	libmdadm/md_u.h	/^	int raid_disks;$/;"	m	struct:mdu_array_info_s	access:public
raid_disks	libmdadm/mdadm.h	/^	int		raid_disks;$/;"	m	struct:mdstat_ent	access:public
raid_disks	libmdadm/mdadm.h	/^	int raid_disks;$/;"	m	struct:mddev_ident	access:public
raid_disks	libmdadm/super-intel.c	/^	int raid_disks;$/;"	m	struct:geo_params	file:	access:public
raid_disks	libmdadm/super1.c	/^	__u32	raid_disks;$/;"	m	struct:mdp_superblock_1	file:	access:public
raid_level	libmdadm/super-intel.c	/^	__u8  raid_level;$/;"	m	struct:imsm_map	file:	access:public
raiddisk	libmdadm/super-ddf.c	/^				int raiddisk; \/* slot to fill in autolayout *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
raiddisk	libmdadm/super-intel.c	/^		int raiddisk; \/* slot to fill in autolayout *\/$/;"	m	struct:intel_super::dl	file:	access:public
raiddisks	libmdadm/mdadm.h	/^	int	raiddisks;$/;"	m	struct:shape	access:public
random	libmdadm/mdadm.h	50;"	d
random	libmdadm/super-intel.c	/^	__u32 random; \/* random data for seeding new family numbers *\/$/;"	m	struct:intel_super	file:	access:public
random32	libmdadm/mdadm.h	/^extern __u32 random32(void);$/;"	p	signature:(void)
random32	libmdadm/util.c	/^__u32 random32(void)$/;"	f	signature:(void)
read_action	libmdadm/monitor.c	/^static enum sync_action read_action( int fd)$/;"	f	file:	signature:( int fd)
read_and_act	libmdadm/monitor.c	/^static int read_and_act(struct active_array *a)$/;"	f	file:	signature:(struct active_array *a)
read_attr	libmdadm/monitor.c	/^static int read_attr(char *buf, int len, int fd)$/;"	f	file:	signature:(char *buf, int len, int fd)
read_auto	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	e	enum:array_state
read_bb_file	libmke2fs/mke2fs.c	/^static int read_bb_file(ext2_filsys fs, badblocks_list *bb_list,$/;"	f	file:	signature:(ext2_filsys fs, badblocks_list *bb_list, const char *bad_blocks_file)
read_dev_state	libmdadm/mdmon.h	/^int read_dev_state(int fd);$/;"	p	signature:(int fd)
read_dev_state	libmdadm/monitor.c	/^int read_dev_state(int fd)$/;"	f	signature:(int fd)
read_efi_variable	libmdadm/platform-intel.c	/^int read_efi_variable(void *buffer, ssize_t buf_size, char *variable_name, struct efi_guid guid)$/;"	f	signature:(void *buffer, ssize_t buf_size, char *variable_name, struct efi_guid guid)
read_imsm_migr_rec	libmdadm/super-intel.c	/^static int read_imsm_migr_rec(int fd, struct intel_super *super)$/;"	f	file:	signature:(int fd, struct intel_super *super)
read_imsm_migr_rec	libmdadm/super-intel.c	/^static int read_imsm_migr_rec(int fd, struct intel_super *super);$/;"	p	file:	signature:(int fd, struct intel_super *super)
read_inode	libmke2fs/ext2fs.h	/^	errcode_t (*read_inode)(ext2_filsys fs, ext2_ino_t ino,$/;"	m	struct:struct_ext2_filsys	access:public
read_resync_start	libmdadm/monitor.c	/^static void read_resync_start(int fd, unsigned long long *v)$/;"	f	file:	signature:(int fd, unsigned long long *v)
read_sock	libmdadm/managemon.c	/^void read_sock(struct supertype *container)$/;"	f	signature:(struct supertype *container)
read_state	libmdadm/monitor.c	/^static enum array_state read_state(int fd)$/;"	f	file:	signature:(int fd)
read_sync_completed	libmdadm/monitor.c	/^static unsigned long long read_sync_completed(int fd)$/;"	f	file:	signature:(int fd)
readonly	libmdadm/mdadm.h	/^	int	readonly;$/;"	m	struct:context	access:public
readonly	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	e	enum:array_state
rec_status	libmdadm/super-intel.c	/^	__u32 rec_status;	    \/* Status used to determine how to restart$/;"	m	struct:migr_record	file:	access:public
receive_message	libmdadm/msg.c	/^int receive_message(int fd, struct metadata_update *msg, int tmo)$/;"	f	signature:(int fd, struct metadata_update *msg, int tmo)
receive_message	libmdadm/msg.h	/^extern int receive_message(int fd, struct metadata_update *msg, int tmo);$/;"	p	signature:(int fd, struct metadata_update *msg, int tmo)
reconcile_failed	libmdadm/monitor.c	/^static void reconcile_failed(struct active_array *aa, struct mdinfo *failed)$/;"	f	file:	signature:(struct active_array *aa, struct mdinfo *failed)
recover	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
recover_backup	libmdadm/mdadm.h	/^	int (*recover_backup)(struct supertype *st, struct mdinfo *info);$/;"	m	struct:superswitch	access:public
recover_backup_imsm	libmdadm/super-intel.c	/^int recover_backup_imsm(struct supertype *st, struct mdinfo *info)$/;"	f	signature:(struct supertype *st, struct mdinfo *info)
recover_backup_imsm	libmdadm/super-intel.c	/^static int recover_backup_imsm(struct supertype *st, struct mdinfo *info);$/;"	p	file:	signature:(struct supertype *st, struct mdinfo *info)
recovery_blocked	libmdadm/mdadm.h	/^	int			recovery_blocked; \/* for external metadata it$/;"	m	struct:mdinfo	access:public
recovery_cp	libmdadm/md_p.h	/^	__u32 recovery_cp;	\/* 11 recovery checkpoint sector count	      *\/$/;"	m	struct:mdp_superblock_s	access:public
recovery_fd	libmdadm/mdadm.h	/^	int recovery_fd;$/;"	m	struct:mdinfo	access:public
recovery_offset	libmdadm/super1.c	/^	__u64	recovery_offset;\/* sectors before this offset (from data_offset) have been recovered *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
recovery_start	libmdadm/mdadm.h	/^		unsigned long long recovery_start; \/* per-device rebuild position *\/$/;"	m	union:mdinfo::__anon14	access:public
recv_buf	libmdadm/msg.c	/^static int recv_buf(int fd, void* buf, int len, int tmo)$/;"	f	file:	signature:(int fd, void* buf, int len, int tmo)
refcount	libmke2fs/ext2fsP.h	/^	int				refcount;$/;"	m	struct:ext2_inode_cache	access:public
refnum	libmdadm/super-ddf.c	/^		be32	refnum;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
refnum	libmdadm/super-ddf.c	/^	be32	refnum;		\/* crc of some magic drive data ... *\/$/;"	m	struct:disk_data	file:	access:public
remap_count	libmdadm/super-ddf.c	/^		be16	remap_count;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
remapped_marked_count	libmdadm/super-intel.c	/^	__u16 remapped_marked_count;$/;"	m	struct:bbm_log_entry	file:	access:public
remove_devices	libmdadm/Manage.c	/^static void remove_devices(char *devnm, char *path)$/;"	f	file:	signature:(char *devnm, char *path)
remove_disk	libmdadm/mdadm.h	/^extern int remove_disk(int mdfd, struct supertype *st,$/;"	p	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, struct mdinfo *info)
remove_disk	libmdadm/util.c	/^int remove_disk(int mdfd, struct supertype *st,$/;"	f	signature:(int mdfd, struct supertype *st, struct mdinfo *sra, struct mdinfo *info)
remove_disk_from_container	libmdadm/managemon.c	/^static void remove_disk_from_container(struct supertype *st, struct mdinfo *sd)$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *sd)
remove_disk_super	libmdadm/super-intel.c	/^static int remove_disk_super(struct intel_super *super, int major, int minor)$/;"	f	file:	signature:(struct intel_super *super, int major, int minor)
remove_disks_for_takeover	libmdadm/Grow.c	/^int remove_disks_for_takeover(struct supertype *st,$/;"	f	signature:(struct supertype *st, struct mdinfo *sra, int layout)
remove_from_super	libmdadm/mdadm.h	/^	int (*remove_from_super)(struct supertype *st, mdu_disk_info_t *dinfo);$/;"	m	struct:superswitch	access:public
remove_from_super_ddf	libmdadm/super-ddf.c	/^static int remove_from_super_ddf(struct supertype *st, mdu_disk_info_t *dk)$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk)
remove_from_super_imsm	libmdadm/super-intel.c	/^static int remove_from_super_imsm(struct supertype *st, mdu_disk_info_t *dk)$/;"	f	file:	signature:(struct supertype *st, mdu_disk_info_t *dk)
remove_old	libmdadm/managemon.c	/^static void remove_old(void)$/;"	f	file:	signature:(void)
remove_partitions	libmdadm/mdadm.h	/^extern void remove_partitions(int fd);$/;"	p	signature:(int fd)
remove_partitions	libmdadm/util.c	/^void remove_partitions(int fd)$/;"	f	signature:(int fd)
remove_pidfile	libmdadm/mdmon.h	/^void remove_pidfile(char *devname);$/;"	p	signature:(char *devname)
reopen_mddev	libmdadm/mdadm.h	/^extern void reopen_mddev(int mdfd);$/;"	p	signature:(int mdfd)
reopen_mddev	libmdadm/util.c	/^void reopen_mddev(int mdfd)$/;"	f	signature:(int mdfd)
repair	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
replace_array	libmdadm/managemon.c	/^static void replace_array(struct supertype *container,$/;"	f	file:	signature:(struct supertype *container, struct active_array *old, struct active_array *new)
replacement_start	libmdadm/super-ddf.c	/^		be32	replacement_start;$/;"	m	struct:bad_block_log::mapped_block	file:	access:public
replaces	libmdadm/mdmon.h	/^	struct active_array *next, *replaces;$/;"	m	struct:active_array	typeref:struct:active_array::	access:public
require_homehost	libmdadm/config.c	/^static int require_homehost = 1;$/;"	v	file:
require_homehost	libmdadm/mdadm.h	/^	int	require_homehost;$/;"	m	struct:context	access:public
reserve_inodes	libmke2fs/mke2fs.c	/^static void reserve_inodes(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
reserve_space	libmdadm/super-ddf.c	/^static int reserve_space(struct supertype *st, int raiddisks,$/;"	f	file:	signature:(struct supertype *st, int raiddisks, unsigned long long size, int chunk, unsigned long long data_offset, unsigned long long *freesize)
reserve_space	libmdadm/super-intel.c	/^static int reserve_space(struct supertype *st, int raiddisks,$/;"	f	file:	signature:(struct supertype *st, int raiddisks, unsigned long long size, int chunk, unsigned long long *freesize)
reserved	libmdadm/md_p.h	/^	__u32 reserved[MD_SB_DESCRIPTOR_WORDS - 5];$/;"	m	struct:mdp_device_descriptor_s	access:public
reserved	libmdadm/md_p.h	/^	__u32 reserved[MD_SB_RESERVED_WORDS];$/;"	m	struct:mdp_superblock_s	access:public
reserved	libmdadm/super-ddf.c	/^	__u8	reserved[7];$/;"	m	struct:spare_assign	file:	access:public
reserved	libmdadm/super-intel.c	/^	__u32 reserved; \/* 0xFFFF *\/$/;"	m	struct:bbm_log	file:	access:public
reserved	libmke2fs/ext2fs.h	/^	__u32				reserved[5];$/;"	m	struct:struct_ext2_filsys	access:public
reserved_blocks	libmdadm/super-intel.c	/^	__u32 reserved_blocks; \/* Reserved blocks at beginning of volume *\/$/;"	m	struct:imsm_dev	file:	access:public
reserved_ratio	libmke2fs/mke2fs.h	/^	double reserved_ratio;$/;"	m	struct:e2fs_cfg	access:public
reserved_spare_block_count	libmdadm/super-intel.c	/^	__u32 reserved_spare_block_count; \/* 0 *\/$/;"	m	struct:bbm_log	file:	access:public
reshape	libmdadm/mdadm.h	/^struct reshape {$/;"	s
reshape	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
reshape::__anon16::data_disks	libmdadm/mdadm.h	/^		int data_disks;$/;"	m	struct:reshape::__anon16	access:public
reshape::__anon16::layout	libmdadm/mdadm.h	/^		int layout;$/;"	m	struct:reshape::__anon16	access:public
reshape::after	libmdadm/mdadm.h	/^	} before, after;$/;"	m	struct:reshape	typeref:struct:reshape::__anon16	access:public
reshape::backup_blocks	libmdadm/mdadm.h	/^	unsigned long long backup_blocks;$/;"	m	struct:reshape	access:public
reshape::before	libmdadm/mdadm.h	/^	} before, after;$/;"	m	struct:reshape	typeref:struct:reshape::__anon16	access:public
reshape::level	libmdadm/mdadm.h	/^	int level;$/;"	m	struct:reshape	access:public
reshape::min_offset_change	libmdadm/mdadm.h	/^	unsigned long long min_offset_change;$/;"	m	struct:reshape	access:public
reshape::new_size	libmdadm/mdadm.h	/^	unsigned long long new_size; \/* New size of array in sectors *\/$/;"	m	struct:reshape	access:public
reshape::parity	libmdadm/mdadm.h	/^	int parity; \/* number of parity blocks\/devices *\/$/;"	m	struct:reshape	access:public
reshape::stripes	libmdadm/mdadm.h	/^	unsigned long long stripes; \/* number of old stripes that comprise 'blocks'*\/$/;"	m	struct:reshape	access:public
reshape_active	libmdadm/mdadm.h	/^	int			reshape_active;$/;"	m	struct:mdinfo	access:public
reshape_array	libmdadm/Grow.c	/^static int reshape_array(char *container, int fd, char *devname,$/;"	f	file:	signature:(char *container, int fd, char *devname, struct supertype *st, struct mdinfo *info, int force, struct mddev_dev *devlist, unsigned long long data_offset, char *backup_file, int verbose, int forked, int restart, int freeze_reshape)
reshape_array	libmdadm/Grow.c	/^static int reshape_array(char *container, int fd, char *devname,$/;"	p	file:	signature:(char *container, int fd, char *devname, struct supertype *st, struct mdinfo *info, int force, struct mddev_dev *devlist, unsigned long long data_offset, char *backup_file, int verbose, int forked, int restart, int freeze_reshape)
reshape_container	libmdadm/Grow.c	/^int reshape_container(char *container, char *devname,$/;"	f	signature:(char *container, char *devname, int mdfd, struct supertype *st, struct mdinfo *info, int force, char *backup_file, int verbose, int forked, int restart, int freeze_reshape)
reshape_container	libmdadm/Grow.c	/^static int reshape_container(char *container, char *devname,$/;"	p	file:	signature:(char *container, char *devname, int mdfd, struct supertype *st, struct mdinfo *info, int force, char *backup_file, int verbose, int forked, int restart, int freeze_reshape)
reshape_free_fdlist	libmdadm/Grow.c	/^void reshape_free_fdlist(int *fdlist,$/;"	f	signature:(int *fdlist, unsigned long long *offsets, int size)
reshape_free_fdlist	libmdadm/mdadm.h	/^extern void reshape_free_fdlist(int *fdlist,$/;"	p	signature:(int *fdlist, unsigned long long *offsets, int size)
reshape_open_backup_file	libmdadm/Grow.c	/^int reshape_open_backup_file(char *backup_file,$/;"	f	signature:(char *backup_file, int fd, char *devname, long blocks, int *fdlist, unsigned long long *offsets, char *sys_name, int restart)
reshape_open_backup_file	libmdadm/mdadm.h	/^extern int reshape_open_backup_file(char *backup,$/;"	p	signature:(char *backup, int fd, char *devname, long blocks, int *fdlist, unsigned long long *offsets, char *sysfs_name, int restart)
reshape_position	libmdadm/md_p.h	/^	__u64 reshape_position;	\/* 12,13 next address in array-space for reshape *\/$/;"	m	struct:mdp_superblock_s	access:public
reshape_position	libmdadm/super1.c	/^	__u64	reshape_position;	\/* next address in array-space for reshape *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
reshape_prepare_fdlist	libmdadm/Grow.c	/^int reshape_prepare_fdlist(char *devname,$/;"	f	signature:(char *devname, struct mdinfo *sra, int raid_disks, int nrdisks, unsigned long blocks, char *backup_file, int *fdlist, unsigned long long *offsets)
reshape_prepare_fdlist	libmdadm/mdadm.h	/^extern int reshape_prepare_fdlist(char *devname,$/;"	p	signature:(char *devname, struct mdinfo *sra, int raid_disks, int nrdisks, unsigned long blocks, char *backup_file, int *fdlist, unsigned long long *offsets)
reshape_progress	libmdadm/mdadm.h	/^	unsigned long long	reshape_progress;$/;"	m	struct:mdinfo	access:public
reshape_super	libmdadm/Grow.c	/^static int reshape_super(struct supertype *st, unsigned long long size,$/;"	f	file:	signature:(struct supertype *st, unsigned long long size, int level, int layout, int chunksize, int raid_disks, int delta_disks, char *backup_file, char *dev, int direction, int verbose)
reshape_super	libmdadm/mdadm.h	/^	int (*reshape_super)(struct supertype *st,$/;"	m	struct:superswitch	access:public
resource	libmdadm/probe_roms.c	/^struct resource {$/;"	s	file:
resource::data	libmdadm/probe_roms.c	/^	unsigned long data;$/;"	m	struct:resource	file:	access:public
resource::end	libmdadm/probe_roms.c	/^	unsigned long end;$/;"	m	struct:resource	file:	access:public
resource::name	libmdadm/probe_roms.c	/^	const char *name;$/;"	m	struct:resource	file:	access:public
resource::start	libmdadm/probe_roms.c	/^	unsigned long start;$/;"	m	struct:resource	file:	access:public
restore_backup	libmdadm/Grow.c	/^int restore_backup(struct supertype *st,$/;"	f	signature:(struct supertype *st, struct mdinfo *content, int working_disks, int next_spare, char **backup_filep, int verbose)
restore_backup	libmdadm/mdadm.h	/^extern int restore_backup(struct supertype *st,$/;"	p	signature:(struct supertype *st, struct mdinfo *content, int working_disks, int spares, char **backup_filep, int verbose)
restore_stripes	libmdadm/mdadm.h	/^extern int restore_stripes(int *dest, unsigned long long *offsets,$/;"	p	signature:(int *dest, unsigned long long *offsets, int raid_disks, int chunk_size, int level, int layout, int source, unsigned long long read_offset, unsigned long long start, unsigned long long length, char *src_buf)
restore_stripes	libmdadm/restripe.c	/^int restore_stripes(int *dest, unsigned long long *offsets,$/;"	f	signature:(int *dest, unsigned long long *offsets, int raid_disks, int chunk_size, int level, int layout, int source, unsigned long long read_offset, unsigned long long start, unsigned long long length, char *src_buf)
resync	libmdadm/mdadm.h	/^	int		resync; \/* 3 if check, 2 if reshape, 1 if resync, 0 if recovery *\/$/;"	m	struct:mdstat_ent	access:public
resync	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	e	enum:sync_action
resync_offset	libmdadm/super1.c	/^	__u64	resync_offset;	\/* data before this offset (from data_offset) known to be in sync *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
resync_start	libmdadm/mdadm.h	/^		unsigned long long resync_start; \/* per-array resync position *\/$/;"	m	union:mdinfo::__anon14	access:public
resync_start_fd	libmdadm/mdmon.h	/^	int resync_start_fd;$/;"	m	struct:active_array	access:public
retry_soon	libmdadm/mdadm.h	/^	int retry_soon;$/;"	m	struct:supertype	access:public
revision	libmdadm/part.h	/^	__u32 revision;$/;"	m	struct:GPT	access:public
revision	libmdadm/super-ddf.c	/^	char	revision[8];	\/* 01.02.00 *\/$/;"	m	struct:ddf_header	file:	access:public
rlc	libmdadm/platform-intel.h	/^	__u16 rlc; \/* RAID Level Capability *\/$/;"	m	struct:imsm_orom	access:public
rlq	libmdadm/super-ddf.c	/^	__u8	rlq;$/;"	m	struct:vd_config	file:	access:public
rol	libmdadm/sha1.c	305;"	d	file:
rom_align	libmdadm/probe_roms.c	/^static unsigned long rom_align;$/;"	v	file:
rom_fd	libmdadm/probe_roms.c	/^static int rom_fd = -1;$/;"	v	file:
rom_len	libmdadm/probe_roms.c	/^static const int rom_len = 0xf0000 - 0xc0000; \/* option-rom memory region *\/$/;"	v	file:
rom_mem	libmdadm/probe_roms.c	/^static void *rom_mem = MAP_FAILED;$/;"	v	file:
romchecksum	libmdadm/probe_roms.c	/^static int romchecksum(const unsigned char *rom, unsigned long length)$/;"	f	file:	signature:(const unsigned char *rom, unsigned long length)
romsignature	libmdadm/probe_roms.c	/^static int romsignature(const unsigned char *rom)$/;"	f	file:	signature:(const unsigned char *rom)
root	libmke2fs/profile.c	/^	struct profile_node *root;$/;"	m	struct:_prf_file_t	typeref:struct:_prf_file_t::profile_node	file:	access:public
root_block	libmdadm/md_p.h	/^	__u32 root_block;	\/*  3 LV root block *\/$/;"	m	struct:mdp_superblock_s	access:public
root_gid	libmke2fs/mke2fs.c	/^static gid_t	root_gid;$/;"	v	file:
root_pv	libmdadm/md_p.h	/^	__u32 root_pv;		\/*  2 LV root PV *\/$/;"	m	struct:mdp_superblock_s	access:public
root_section	libmke2fs/profile.c	/^	struct profile_node *root_section;$/;"	m	struct:parse_state	typeref:struct:parse_state::profile_node	file:	access:public
root_uid	libmke2fs/mke2fs.c	/^static uid_t	root_uid;$/;"	v	file:
rule	libmdadm/mdadm.h	/^	struct rule {$/;"	s	struct:pol_rule	access:public
rule	libmdadm/mdadm.h	/^	} *rule;$/;"	m	struct:pol_rule	typeref:struct:pol_rule::rule	access:public
rule_part	libmdadm/policy.c	/^char rule_part[] = "part-policy";$/;"	v
rule_path	libmdadm/policy.c	/^char rule_path[] = "path";$/;"	v
rule_policy	libmdadm/policy.c	/^char rule_policy[] = "policy";$/;"	v
rule_type	libmdadm/policy.c	/^char rule_type[] = "type";$/;"	v
run_udisks	libmdadm/Incremental.c	/^static void run_udisks(char *arg1, char *arg2)$/;"	f	file:	signature:(char *arg1, char *arg2)
runstop	libmdadm/mdadm.h	/^	int	runstop;$/;"	m	struct:context	access:public
safe_mode_delay	libmdadm/mdadm.h	/^	unsigned long		safe_mode_delay; \/* ms delay to mark clean *\/$/;"	m	struct:mdinfo	access:public
same_dev	libmdadm/mdadm.h	/^extern int same_dev(char *one, char *two);$/;"	p	signature:(char *one, char *two)
same_dev	libmdadm/util.c	/^int same_dev(char *one, char *two)$/;"	f	signature:(char *one, char *two)
same_uuid	libmdadm/mdadm.h	/^extern int same_uuid(int a[4], int b[4], int swapuuid);$/;"	p	signature:(int a[4], int b[4], int swapuuid)
same_uuid	libmdadm/util.c	/^int same_uuid(int a[4], int b[4], int swapuuid)$/;"	f	signature:(int a[4], int b[4], int swapuuid)
save_backup_imsm	libmdadm/super-intel.c	/^int save_backup_imsm(struct supertype *st,$/;"	f	signature:(struct supertype *st, struct imsm_dev *dev, struct mdinfo *info, void *buf, int length)
save_checkpoint_imsm	libmdadm/super-intel.c	/^int save_checkpoint_imsm(struct supertype *st, struct mdinfo *info, int state)$/;"	f	signature:(struct supertype *st, struct mdinfo *info, int state)
save_stripes	libmdadm/mdadm.h	/^extern int save_stripes(int *source, unsigned long long *offsets,$/;"	p	signature:(int *source, unsigned long long *offsets, int raid_disks, int chunk_size, int level, int layout, int nwrites, int *dest, unsigned long long start, unsigned long long length, char *buf)
save_stripes	libmdadm/restripe.c	/^int save_stripes(int *source, unsigned long long *offsets,$/;"	f	signature:(int *source, unsigned long long *offsets, int raid_disks, int chunk_size, int level, int layout, int nwrites, int *dest, unsigned long long start, unsigned long long length, char *buf)
sb	libmdadm/bitmap.c	/^	bitmap_super_t sb;$/;"	m	struct:bitmap_info_s	file:	access:public
sb	libmdadm/mdadm.h	/^	void *sb;$/;"	m	struct:supertype	access:public
sb_cpu_to_le	libmdadm/bitmap.c	/^inline void sb_cpu_to_le(bitmap_super_t *sb)$/;"	f	signature:(bitmap_super_t *sb)
sb_csum	libmdadm/Grow.c	/^	__u32	sb_csum;	\/* csum of preceeding bytes. *\/$/;"	m	struct:mdp_backup_super	file:	access:public
sb_csum	libmdadm/md_p.h	/^	__u32 sb_csum;		\/*  6 checksum of the whole superblock        *\/$/;"	m	struct:mdp_superblock_s	access:public
sb_csum	libmdadm/super1.c	/^	__u32	sb_csum;	\/* checksum upto dev_roles[max_dev] *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
sb_csum2	libmdadm/Grow.c	/^	__u32	sb_csum2;	\/* csum of preceeding bytes. *\/$/;"	m	struct:mdp_backup_super	file:	access:public
sb_le_to_cpu	libmdadm/bitmap.c	/^inline void sb_le_to_cpu(bitmap_super_t *sb)$/;"	f	signature:(bitmap_super_t *sb)
sb_page	libmdadm/bitmap.h	/^	struct page *sb_page; \/* cached copy of the bitmap file superblock *\/$/;"	m	struct:bitmap	typeref:struct:bitmap::page	access:public
scan	libmdadm/mdadm.h	/^	int	scan;$/;"	m	struct:context	access:public
scan	libmdadm/platform-intel.c	/^static int scan(const void *start, const void *end, const void *data)$/;"	f	file:	signature:(const void *start, const void *end, const void *data)
scan_adapter_roms	libmdadm/probe_roms.c	/^int scan_adapter_roms(scan_fn fn)$/;"	f	signature:(scan_fn fn)
scan_adapter_roms	libmdadm/probe_roms.h	/^int scan_adapter_roms(scan_fn fn);$/;"	p	signature:(scan_fn fn)
scan_fn	libmdadm/probe_roms.h	/^typedef int (*scan_fn)(const void *start, const void *end, const void *data);$/;"	t
scsi_get_serial	libmdadm/sg_io.c	/^int scsi_get_serial(int fd, void *buf, size_t buf_len)$/;"	f	signature:(int fd, void *buf, size_t buf_len)
scsi_get_serial	libmdadm/super-intel.c	/^extern int scsi_get_serial(int fd, void *buf, size_t buf_len);$/;"	p	file:	signature:(int fd, void *buf, size_t buf_len)
scsi_id	libmdadm/super-intel.c	/^	__u32 scsi_id;			 \/* 0xEC - 0xEF scsi ID *\/$/;"	m	struct:imsm_disk	file:	access:public
sec_elmnt_count	libmdadm/super-ddf.c	/^	__u8	sec_elmnt_count;$/;"	m	struct:vd_config	file:	access:public
sec_elmnt_seq	libmdadm/super-ddf.c	/^	__u8	sec_elmnt_seq;$/;"	m	struct:vd_config	file:	access:public
secondary	libmdadm/super-ddf.c	/^	struct ddf_header	anchor, primary, secondary;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::	file:	access:public
secondary_element	libmdadm/super-ddf.c	/^		be16	secondary_element;$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
secondary_lba	libmdadm/super-ddf.c	/^				be64 secondary_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
secondary_lba	libmdadm/super-ddf.c	/^	be64	secondary_lba;$/;"	m	struct:ddf_header	file:	access:public
secondary_state	libmdadm/super-ddf.c	/^static int secondary_state(int state, int other, int seclevel)$/;"	f	file:	signature:(int state, int other, int seclevel)
sector_count	libmdadm/super-intel.c	/^static unsigned int sector_count(__u32 bytes)$/;"	f	file:	signature:(__u32 bytes)
select_devices	libmdadm/Assemble.c	/^static int select_devices(struct mddev_dev *devlist,$/;"	f	file:	signature:(struct mddev_dev *devlist, struct mddev_ident *ident, struct supertype **stp, struct mdinfo **contentp, struct context *c, int inargv, int auto_assem)
send_buf	libmdadm/msg.c	/^static int send_buf(int fd, const void* buf, int len, int tmo)$/;"	f	file:	signature:(int fd, const void* buf, int len, int tmo)
send_message	libmdadm/msg.c	/^int send_message(int fd, struct metadata_update *msg, int tmo)$/;"	f	signature:(int fd, struct metadata_update *msg, int tmo)
send_message	libmdadm/msg.h	/^extern int send_message(int fd, struct metadata_update *msg, int tmo);$/;"	p	signature:(int fd, struct metadata_update *msg, int tmo)
seq	libmdadm/super-ddf.c	/^	be32	seq;		\/* starts at '1' *\/$/;"	m	struct:ddf_header	file:	access:public
seqnum	libmdadm/super-ddf.c	/^	be32	seqnum;$/;"	m	struct:vd_config	file:	access:public
serial	libmdadm/super-intel.c	/^		__u8 serial[MAX_RAID_SERIAL_LEN];$/;"	m	struct:intel_super::dl	file:	access:public
serial	libmdadm/super-intel.c	/^	__u8 serial[MAX_RAID_SERIAL_LEN];$/;"	m	struct:disk_info	file:	access:public
serial	libmdadm/super-intel.c	/^	__u8 serial[MAX_RAID_SERIAL_LEN];\/* 0xD8 - 0xE7 ascii serial number *\/$/;"	m	struct:imsm_disk	file:	access:public
serial_to_dl	libmdadm/super-intel.c	/^static struct dl *serial_to_dl(__u8 *serial, struct intel_super *super)$/;"	f	file:	signature:(__u8 *serial, struct intel_super *super)
serialcmp	libmdadm/super-intel.c	/^static int serialcmp(__u8 *s1, __u8 *s2)$/;"	f	file:	signature:(__u8 *s1, __u8 *s2)
serialcpy	libmdadm/super-intel.c	/^static void serialcpy(__u8 *dest, __u8 *src)$/;"	f	file:	signature:(__u8 *dest, __u8 *src)
set_array_info	libmdadm/mdadm.h	/^extern int set_array_info(int mdfd, struct supertype *st, struct mdinfo *info);$/;"	p	signature:(int mdfd, struct supertype *st, struct mdinfo *info)
set_array_info	libmdadm/util.c	/^int set_array_info(int mdfd, struct supertype *st, struct mdinfo *info)$/;"	f	signature:(int mdfd, struct supertype *st, struct mdinfo *info)
set_array_size	libmdadm/Grow.c	/^static int set_array_size(struct supertype *st, struct mdinfo *sra,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *sra, char *text_version)
set_array_state	libmdadm/mdadm.h	/^	int (*set_array_state)(struct active_array *a, int consistent);$/;"	m	struct:superswitch	access:public
set_blocks_per_member	libmdadm/super-intel.c	/^static void set_blocks_per_member(struct imsm_map *map, unsigned long long n)$/;"	f	file:	signature:(struct imsm_map *map, unsigned long long n)
set_conffile	libmdadm/config.c	/^void set_conffile(char *file)$/;"	f	signature:(char *file)
set_conffile	libmdadm/mdadm.h	/^extern void set_conffile(char *file);$/;"	p	signature:(char *file)
set_disk	libmdadm/mdadm.h	/^	void (*set_disk)(struct active_array *a, int n, int state);$/;"	m	struct:superswitch	access:public
set_imsm_ord_tbl_ent	libmdadm/super-intel.c	/^static void set_imsm_ord_tbl_ent(struct imsm_map *map, int slot, __u32 ord)$/;"	f	file:	signature:(struct imsm_map *map, int slot, __u32 ord)
set_migr_type	libmdadm/super-intel.c	/^static void set_migr_type(struct imsm_dev *dev, __u8 migr_type)$/;"	f	file:	signature:(struct imsm_dev *dev, __u8 migr_type)
set_name	libmdadm/super1.c	/^	char	set_name[32];	\/* set and interpreted by user-space *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
set_new_data_offset	libmdadm/Grow.c	/^static int set_new_data_offset(struct mdinfo *sra, struct supertype *st,$/;"	f	file:	signature:(struct mdinfo *sra, struct supertype *st, char *devname, int delta_disks, unsigned long long data_offset, unsigned long long min, int can_fallback)
set_num_data_stripes	libmdadm/super-intel.c	/^static void set_num_data_stripes(struct imsm_map *map, unsigned long long n)$/;"	f	file:	signature:(struct imsm_map *map, unsigned long long n)
set_os	libmke2fs/mke2fs.c	/^static int set_os(struct ext2_super_block *sb, char *os)$/;"	f	file:	signature:(struct ext2_super_block *sb, char *os)
set_pba_of_lba0	libmdadm/super-intel.c	/^static void set_pba_of_lba0(struct imsm_map *map, unsigned long long n)$/;"	f	file:	signature:(struct imsm_map *map, unsigned long long n)
set_total_blocks	libmdadm/super-intel.c	/^static void set_total_blocks(struct imsm_disk *disk, unsigned long long n)$/;"	f	file:	signature:(struct imsm_disk *disk, unsigned long long n)
set_uuid	libmdadm/Grow.c	/^	__u8	set_uuid[16];$/;"	m	struct:mdp_backup_super	file:	access:public
set_uuid	libmdadm/super1.c	/^	__u8	set_uuid[16];	\/* user-space generated. *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
set_uuid0	libmdadm/md_p.h	/^	__u32 set_uuid0;	\/*  5 Raid set identifier		      *\/$/;"	m	struct:mdp_superblock_s	access:public
set_uuid1	libmdadm/md_p.h	/^	__u32 set_uuid1;	\/* 13 Raid set identifier #2		      *\/$/;"	m	struct:mdp_superblock_s	access:public
set_uuid2	libmdadm/md_p.h	/^	__u32 set_uuid2;	\/* 14 Raid set identifier #3		      *\/$/;"	m	struct:mdp_superblock_s	access:public
set_uuid3	libmdadm/md_p.h	/^	__u32 set_uuid3;	\/* 15 Raid set identifier #4		      *\/$/;"	m	struct:mdp_superblock_s	access:public
sha1_buffer	libmdadm/sha1.c	/^sha1_buffer (const char *buffer, size_t len, void *resblock)$/;"	f	signature:(const char *buffer, size_t len, void *resblock)
sha1_buffer	libmdadm/sha1.h	/^extern void *sha1_buffer (const char *buffer, size_t len, void *resblock);$/;"	p	signature:(const char *buffer, size_t len, void *resblock)
sha1_ctx	libmdadm/sha1.h	/^struct sha1_ctx$/;"	s
sha1_ctx::A	libmdadm/sha1.h	/^  sha1_uint32 A;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::B	libmdadm/sha1.h	/^  sha1_uint32 B;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::C	libmdadm/sha1.h	/^  sha1_uint32 C;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::D	libmdadm/sha1.h	/^  sha1_uint32 D;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::E	libmdadm/sha1.h	/^  sha1_uint32 E;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::buffer	libmdadm/sha1.h	/^  sha1_uint32 buffer[32];$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::buflen	libmdadm/sha1.h	/^  sha1_uint32 buflen;$/;"	m	struct:sha1_ctx	access:public
sha1_ctx::total	libmdadm/sha1.h	/^  sha1_uint32 total[2];$/;"	m	struct:sha1_ctx	access:public
sha1_finish_ctx	libmdadm/sha1.c	/^sha1_finish_ctx (struct sha1_ctx *ctx, void *resbuf)$/;"	f	signature:(struct sha1_ctx *ctx, void *resbuf)
sha1_finish_ctx	libmdadm/sha1.h	/^extern void *sha1_finish_ctx (struct sha1_ctx *ctx, void *resbuf);$/;"	p	signature:(struct sha1_ctx *ctx, void *resbuf)
sha1_init_ctx	libmdadm/sha1.c	/^sha1_init_ctx (struct sha1_ctx *ctx)$/;"	f	signature:(struct sha1_ctx *ctx)
sha1_init_ctx	libmdadm/sha1.h	/^extern void sha1_init_ctx (struct sha1_ctx *ctx);$/;"	p	signature:(struct sha1_ctx *ctx)
sha1_process_block	libmdadm/sha1.c	/^sha1_process_block (const void *buffer, size_t len, struct sha1_ctx *ctx)$/;"	f	signature:(const void *buffer, size_t len, struct sha1_ctx *ctx)
sha1_process_block	libmdadm/sha1.h	/^extern void sha1_process_block (const void *buffer, size_t len,$/;"	p	signature:(const void *buffer, size_t len, struct sha1_ctx *ctx)
sha1_process_bytes	libmdadm/sha1.c	/^sha1_process_bytes (const void *buffer, size_t len, struct sha1_ctx *ctx)$/;"	f	signature:(const void *buffer, size_t len, struct sha1_ctx *ctx)
sha1_process_bytes	libmdadm/sha1.h	/^extern void sha1_process_bytes (const void *buffer, size_t len,$/;"	p	signature:(const void *buffer, size_t len, struct sha1_ctx *ctx)
sha1_read_ctx	libmdadm/sha1.c	/^sha1_read_ctx (const struct sha1_ctx *ctx, void *resbuf)$/;"	f	signature:(const struct sha1_ctx *ctx, void *resbuf)
sha1_read_ctx	libmdadm/sha1.h	/^extern void *sha1_read_ctx (const struct sha1_ctx *ctx, void *resbuf);$/;"	p	signature:(const struct sha1_ctx *ctx, void *resbuf)
sha1_stream	libmdadm/sha1.c	/^sha1_stream (FILE *stream, void *resblock)$/;"	f	signature:(FILE *stream, void *resblock)
sha1_stream	libmdadm/sha1.h	/^extern int sha1_stream (FILE *stream, void *resblock);$/;"	p	signature:(FILE *stream, void *resblock)
sha1_uint32	libmdadm/sha1.h	/^     typedef unsigned long sha1_uint32;$/;"	t
sha1_uint32	libmdadm/sha1.h	/^    typedef unsigned short sha1_uint32;$/;"	t
sha1_uint32	libmdadm/sha1.h	/^   typedef unsigned int sha1_uint32;$/;"	t
sha1_uint32	libmdadm/sha1.h	/^typedef u_int32_t sha1_uint32;$/;"	t
sha1_uintptr	libmdadm/sha1.h	/^typedef uintptr_t sha1_uintptr;$/;"	t
shape	libmdadm/mdadm.h	/^struct shape {$/;"	s
shape::assume_clean	libmdadm/mdadm.h	/^	int	assume_clean;$/;"	m	struct:shape	access:public
shape::bitmap_chunk	libmdadm/mdadm.h	/^	int	bitmap_chunk;$/;"	m	struct:shape	access:public
shape::bitmap_file	libmdadm/mdadm.h	/^	char	*bitmap_file;$/;"	m	struct:shape	access:public
shape::chunk	libmdadm/mdadm.h	/^	int	chunk;$/;"	m	struct:shape	access:public
shape::layout	libmdadm/mdadm.h	/^	int	layout;$/;"	m	struct:shape	access:public
shape::layout_str	libmdadm/mdadm.h	/^	char	*layout_str;$/;"	m	struct:shape	access:public
shape::level	libmdadm/mdadm.h	/^	int	level;$/;"	m	struct:shape	access:public
shape::raiddisks	libmdadm/mdadm.h	/^	int	raiddisks;$/;"	m	struct:shape	access:public
shape::size	libmdadm/mdadm.h	/^	unsigned long long size;$/;"	m	struct:shape	access:public
shape::sparedisks	libmdadm/mdadm.h	/^	int	sparedisks;$/;"	m	struct:shape	access:public
shape::write_behind	libmdadm/mdadm.h	/^	int	write_behind;$/;"	m	struct:shape	access:public
should_do_undo	libmke2fs/mke2fs.c	/^static int should_do_undo(const char *name)$/;"	f	file:	signature:(const char *name)
show_conflicts	libmdadm/super-intel.c	/^static void show_conflicts(__u32 family_num, struct intel_super *super_list)$/;"	f	file:	signature:(__u32 family_num, struct intel_super *super_list)
show_stats	libmke2fs/mke2fs.c	/^static void show_stats(ext2_filsys fs)$/;"	f	file:	signature:(ext2_filsys fs)
sig	libmdadm/super-intel.c	/^	__u8 sig[MAX_SIGNATURE_LENGTH];	\/* 0x00 - 0x1F *\/$/;"	m	struct:imsm_super	file:	access:public
sig_handler	unitest/RAIDManager_test.cpp	/^static void sig_handler(int sig)$/;"	f	file:	signature:(int sig)
sigbus	libmdadm/probe_roms.c	/^static void sigbus(int sig)$/;"	f	file:	signature:(int sig)
signal_manager	libmdadm/monitor.c	/^static void signal_manager(void)$/;"	f	file:	signature:(void)
signature	libmdadm/platform-intel.h	/^	__u8 signature[4];$/;"	m	struct:imsm_orom	access:public
signature	libmdadm/super-intel.c	/^	__u32 signature; \/* 0xABADB10C *\/$/;"	m	struct:bbm_log	file:	access:public
sigterm	libmdadm/Grow.c	/^int sigterm = 0;$/;"	v
size	libmdadm/md_p.h	/^	__u32 size;		\/*  8 Apparent size of each individual disk   *\/$/;"	m	struct:mdp_superblock_s	access:public
size	libmdadm/md_u.h	/^	int size;$/;"	m	struct:mdu_array_info_s	access:public
size	libmdadm/mdadm.h	/^	unsigned long long size;$/;"	m	struct:shape	access:public
size	libmdadm/super-ddf.c	/^				unsigned long long size; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
size	libmdadm/super-ddf.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
size	libmdadm/super-intel.c	/^	unsigned long long size;$/;"	m	struct:geo_params	file:	access:public
size	libmdadm/super-intel.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
size	libmdadm/super1.c	/^	__u64	size;		\/* used size of component devices, in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
size	libmke2fs/ext2fsP.h	/^	int	size;$/;"	m	struct:ext2_struct_u32_list	access:public
size	libmke2fs/ext2fsP.h	/^	unsigned long long	size;$/;"	m	struct:ext2_struct_dblist	access:public
size_high	libmdadm/super-intel.c	/^	__u32 size_high;$/;"	m	struct:imsm_dev	file:	access:public
size_low	libmdadm/super-intel.c	/^	__u32 size_low;$/;"	m	struct:imsm_dev	file:	access:public
sizeof_imsm_dev	libmdadm/super-intel.c	/^static size_t sizeof_imsm_dev(struct imsm_dev *dev, int migr_state)$/;"	f	file:	signature:(struct imsm_dev *dev, int migr_state)
sizeof_imsm_map	libmdadm/super-intel.c	/^static size_t sizeof_imsm_map(struct imsm_map *map)$/;"	f	file:	signature:(struct imsm_map *map)
skip_over_blanks	libmke2fs/profile.c	/^static char *skip_over_blanks(char *cp)$/;"	f	file:	signature:(char *cp)
skip_over_nonblanks	libmke2fs/profile.c	/^static char *skip_over_nonblanks(char *cp)$/;"	f	file:	signature:(char *cp)
skip_progress	libmke2fs/ext2fsP.h	/^	int		skip_progress;$/;"	m	struct:ext2fs_numeric_progress_struct	access:public
slot	libmdadm/super-intel.c	/^	int slot;$/;"	m	struct:imsm_update_activate_spare	file:	access:public
sock	libmdadm/mdadm.h	/^	int sock; \/* listen to external programs *\/$/;"	m	struct:supertype	access:public
sorted	libmke2fs/ext2fsP.h	/^	int			sorted;$/;"	m	struct:ext2_struct_dblist	access:public
space	libmdadm/mdadm.h	/^	void	*space; \/* allocated space that monitor will use *\/$/;"	m	struct:metadata_update	access:public
space	libmdadm/super-ddf.c	/^			char space[512];$/;"	m	union:ddf_super::dl::__anon8	file:	access:public
space	libmdadm/super-ddf.c	/^			char space[512];$/;"	m	union:ddf_super::vcl::__anon6	file:	access:public
space_after	libmdadm/mdadm.h	/^	unsigned long long	space_before, space_after;$/;"	m	struct:mdinfo	access:public
space_before	libmdadm/mdadm.h	/^	unsigned long long	space_before, space_after;$/;"	m	struct:mdinfo	access:public
space_list	libmdadm/mdadm.h	/^	void	**space_list; \/* list of allocated spaces that monitor can$/;"	m	struct:metadata_update	access:public
spare	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
spare	libmdadm/super-ddf.c	/^				struct spare_assign *spare;$/;"	m	struct:ddf_super::dl::__anon8::__anon9	typeref:struct:ddf_super::dl::__anon8::__anon9::spare_assign	file:	access:public
spare_assign	libmdadm/super-ddf.c	/^struct spare_assign {$/;"	s	file:
spare_assign::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:spare_assign	file:	access:public
spare_assign::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_SPARE_ASSIGN_MAGIC *\/$/;"	m	struct:spare_assign	file:	access:public
spare_assign::max	libmdadm/super-ddf.c	/^	be16	max;		\/* max SAEs *\/$/;"	m	struct:spare_assign	file:	access:public
spare_assign::pad	libmdadm/super-ddf.c	/^	__u8	pad[8];$/;"	m	struct:spare_assign	file:	access:public
spare_assign::populated	libmdadm/super-ddf.c	/^	be16	populated;	\/* SAEs used *\/$/;"	m	struct:spare_assign	file:	access:public
spare_assign::reserved	libmdadm/super-ddf.c	/^	__u8	reserved[7];$/;"	m	struct:spare_assign	file:	access:public
spare_assign::spare_assign_entry	libmdadm/super-ddf.c	/^	struct spare_assign_entry {$/;"	s	struct:spare_assign	file:	access:public
spare_assign::spare_assign_entry::guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
spare_assign::spare_assign_entry::pad	libmdadm/super-ddf.c	/^		__u8	pad[6];$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
spare_assign::spare_assign_entry::secondary_element	libmdadm/super-ddf.c	/^		be16	secondary_element;$/;"	m	struct:spare_assign::spare_assign_entry	file:	access:public
spare_assign::spare_ents	libmdadm/super-ddf.c	/^	} spare_ents[0];$/;"	m	struct:spare_assign	typeref:struct:spare_assign::spare_assign_entry	file:	access:public
spare_assign::timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:spare_assign	file:	access:public
spare_assign::type	libmdadm/super-ddf.c	/^	__u8	type;$/;"	m	struct:spare_assign	file:	access:public
spare_assign_entry	libmdadm/super-ddf.c	/^	struct spare_assign_entry {$/;"	s	struct:spare_assign	file:	access:public
spare_block_offset	libmdadm/super-intel.c	/^	__u32 spare_block_offset;$/;"	m	struct:bbm_log_entry	file:	access:public
spare_count	libmdadm/super-ddf.c	/^	be32	spare_count;$/;"	m	struct:bad_block_log	file:	access:public
spare_disks	libmdadm/md_p.h	/^	__u32 spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
spare_disks	libmdadm/md_u.h	/^	int spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
spare_disks	libmdadm/mdadm.h	/^	int spare_disks;$/;"	m	struct:mddev_ident	access:public
spare_ents	libmdadm/super-ddf.c	/^	} spare_ents[0];$/;"	m	struct:spare_assign	typeref:struct:spare_assign::spare_assign_entry	file:	access:public
spare_group	libmdadm/Monitor.c	/^	char *spare_group;$/;"	m	struct:state	file:	access:public
spare_group	libmdadm/mdadm.h	/^	char	*spare_group;$/;"	m	struct:mddev_ident	access:public
spare_record	libmdadm/super-intel.c	/^} spare_record __attribute__ ((aligned(512)));$/;"	v	typeref:union:__anon12	file:
spare_refs	libmdadm/super-ddf.c	/^	be32	spare_refs[8];	\/* This is used to detect missing spares.$/;"	m	struct:vd_config	file:	access:public
sparedisks	libmdadm/mdadm.h	/^	int	sparedisks;$/;"	m	struct:shape	access:public
split_ull	libmdadm/super-intel.c	/^static int split_ull(unsigned long long n, __u32 *lo, __u32 *hi)$/;"	f	file:	signature:(unsigned long long n, __u32 *lo, __u32 *hi)
srandom	libmdadm/mdadm.h	51;"	d
srl	libmdadm/super-ddf.c	/^	__u8	srl;$/;"	m	struct:vd_config	file:	access:public
ss	libmdadm/mdadm.h	/^	struct superswitch *ss;$/;"	m	struct:supertype	typeref:struct:supertype::superswitch	access:public
sss	libmdadm/platform-intel.h	/^	__u16 sss; \/* Strip Size Supported *\/$/;"	m	struct:imsm_orom	access:public
st	libmdadm/mdadm.h	/^	struct supertype *st;$/;"	m	struct:mddev_ident	typeref:struct:mddev_ident::supertype	access:public
st_rdev	libmdadm/super-intel.c	/^	dev_t st_rdev;$/;"	m	struct:md_list	file:	access:public
start	libmdadm/probe_roms.c	/^	unsigned long start;$/;"	m	struct:resource	file:	access:public
start	libmdadm/super-ddf.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
start	libmdadm/super-intel.c	/^	unsigned long long start, size;$/;"	m	struct:extent	file:	access:public
start	libmdadm/util.c	/^	long long start;		\/* starting offset in bytes *\/$/;"	m	struct:blkpg_partition	file:	access:public
start_array	libmdadm/Assemble.c	/^static int start_array(int mdfd,$/;"	f	file:	signature:(int mdfd, char *mddev, struct mdinfo *content, struct supertype *st, struct mddev_ident *ident, int *best, int bestcnt, int chosen_drive, struct devs *devices, unsigned int okcnt, unsigned int sparecnt, unsigned int rebuilding_cnt, struct context *c, int clean, char *avail, int start_partial_ok, int err_ok, int was_forced )
start_magic	libmdadm/msg.c	/^static const __u32 start_magic = 0x5a5aa5a5;$/;"	v	file:
start_mdmon	libmdadm/mdadm.h	/^extern int start_mdmon(char *devnm);$/;"	p	signature:(char *devnm)
start_mdmon	libmdadm/util.c	/^int start_mdmon(char *devnm)$/;"	f	signature:(char *devnm)
start_reshape	libmdadm/Grow.c	/^int start_reshape(struct mdinfo *sra, int already_running,$/;"	f	signature:(struct mdinfo *sra, int already_running, int before_data_disks, int data_disks)
starting_lba	libmdadm/part.h	/^	__u64 starting_lba;$/;"	m	struct:GPT_part_entry	access:public
stat2devnm	libmdadm/lib.c	/^char *stat2devnm(struct stat *st)$/;"	f	signature:(struct stat *st)
stat2devnm	libmdadm/mdadm.h	/^extern char *stat2devnm(struct stat *st);$/;"	p	signature:(struct stat *st)
state	libmdadm/Monitor.c	/^struct state {$/;"	s	file:
state	libmdadm/bitmap.h	/^	__u32 state;        \/* 48  bitmap state information *\/$/;"	m	struct:bitmap_super_s	access:public
state	libmdadm/md_p.h	/^	__u32 state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:mdp_superblock_s	access:public
state	libmdadm/md_p.h	/^	__u32 state;		\/* 4 Operational state			      *\/$/;"	m	struct:mdp_device_descriptor_s	access:public
state	libmdadm/md_u.h	/^	int state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:mdu_array_info_s	access:public
state	libmdadm/md_u.h	/^	int state;$/;"	m	struct:mdu_disk_info_s	access:public
state	libmdadm/md_u.h	/^	int state;$/;"	m	struct:mdu_start_info_s	access:public
state	libmdadm/super-ddf.c	/^		__u8	state;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
state	libmdadm/super-ddf.c	/^		be16	state;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
state	libmke2fs/profile.c	/^	int	state;$/;"	m	struct:parse_state	file:	access:public
state::active	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
state::devid	libmdadm/Monitor.c	/^	dev_t devid[MAX_DISKS];$/;"	m	struct:state	file:	access:public
state::devname	libmdadm/Monitor.c	/^	char *devname;$/;"	m	struct:state	file:	access:public
state::devnm	libmdadm/Monitor.c	/^	char devnm[32];	\/* to sync with mdstat info *\/$/;"	m	struct:state	file:	access:public
state::devstate	libmdadm/Monitor.c	/^	int devstate[MAX_DISKS];$/;"	m	struct:state	file:	access:public
state::err	libmdadm/Monitor.c	/^	int err;$/;"	m	struct:state	file:	access:public
state::expected_spares	libmdadm/Monitor.c	/^	int expected_spares;$/;"	m	struct:state	file:	access:public
state::failed	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
state::from_auto	libmdadm/Monitor.c	/^	int from_auto;$/;"	m	struct:state	file:	access:public
state::from_config	libmdadm/Monitor.c	/^	int from_config;$/;"	m	struct:state	file:	access:public
state::metadata	libmdadm/Monitor.c	/^	struct supertype *metadata;$/;"	m	struct:state	typeref:struct:state::supertype	file:	access:public
state::next	libmdadm/Monitor.c	/^	struct state *next;$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
state::parent	libmdadm/Monitor.c	/^	struct state *parent;  \/* for a subarray it is a link to its container$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
state::parent_devnm	libmdadm/Monitor.c	/^	char parent_devnm[32]; \/* For subarray, devnm of parent.$/;"	m	struct:state	file:	access:public
state::percent	libmdadm/Monitor.c	/^	int percent;$/;"	m	struct:state	file:	access:public
state::raid	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
state::spare	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
state::spare_group	libmdadm/Monitor.c	/^	char *spare_group;$/;"	m	struct:state	file:	access:public
state::subarray	libmdadm/Monitor.c	/^	struct state *subarray;\/* for a container it is a link to first subarray$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
state::utime	libmdadm/Monitor.c	/^	long utime;$/;"	m	struct:state	file:	access:public
state::working	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
state_fd	libmdadm/mdadm.h	/^	int state_fd;$/;"	m	struct:mdinfo	access:public
status	libmdadm/super-intel.c	/^	__u32 status;			 \/* 0xF0 - 0xF3 *\/$/;"	m	struct:imsm_disk	file:	access:public
status	libmdadm/super-intel.c	/^	__u32 status;	\/* Persistent RaidDev status *\/$/;"	m	struct:imsm_dev	file:	access:public
store_gpt	libmdadm/super-gpt.c	/^static int store_gpt(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
store_imsm_mpb	libmdadm/super-intel.c	/^static int store_imsm_mpb(int fd, struct imsm_super *mpb)$/;"	f	file:	signature:(int fd, struct imsm_super *mpb)
store_imsm_mpb	libmdadm/super-intel.c	/^static int store_imsm_mpb(int fd, struct imsm_super *mpb);$/;"	p	file:	signature:(int fd, struct imsm_super *mpb)
store_mbr	libmdadm/super-mbr.c	/^static int store_mbr(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
store_super	libmdadm/mdadm.h	/^	int (*store_super)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
store_super0	libmdadm/super0.c	/^static int store_super0(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
store_super1	libmdadm/super1.c	/^static int store_super1(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
store_super_ddf	libmdadm/super-ddf.c	/^static int store_super_ddf(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
store_super_imsm	libmdadm/super-intel.c	/^static int store_super_imsm(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
strArrayDevName	libmdadm/mdadm_other.h	/^	char strArrayDevName[32];$/;"	m	struct:array_detail	access:public
strArraySize	libmdadm/mdadm_other.h	/^	char strArraySize[32];$/;"	m	struct:array_detail	access:public
strArrayState	libmdadm/mdadm_other.h	/^	char strArrayState[128];$/;"	m	struct:array_detail	access:public
strContainer	libmdadm/mdadm_other.h	/^	char strContainer[32];$/;"	m	struct:array_detail	access:public
strDevName	libmdadm/mdadm_other.h	/^	char strDevName[32];$/;"	m	struct:examine_result	access:public
strDevName	libmdadm/mdadm_other.h	/^	char strDevName[64];$/;"	m	struct:array_disk_info	access:public
strDiskActivity	libmdadm/mdadm_other.h	/^	char strDiskActivity[32];$/;"	m	struct:query_result	access:public
strDiskDevName	libmdadm/mdadm_other.h	/^	char strDiskDevName[32];$/;"	m	struct:query_result	access:public
strMDDevName	libmdadm/mdadm_other.h	/^	char strMDDevName[32];	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
strMDError	libmdadm/mdadm_other.h	/^	char strMDError[128];$/;"	m	struct:query_result	access:public
strMDLevel	libmdadm/mdadm_other.h	/^	char strMDLevel[16];	\/\/ Available for MD, Disk$/;"	m	struct:query_result	access:public
strMDSize	libmdadm/mdadm_other.h	/^	char strMDSize[32];$/;"	m	struct:query_result	access:public
strMember	libmdadm/mdadm_other.h	/^	char strMember[32];$/;"	m	struct:array_detail	access:public
strRaidLayout	libmdadm/mdadm_other.h	/^	char strRaidLayout[32];$/;"	m	struct:array_detail	access:public
strRaidLevel	libmdadm/mdadm_other.h	/^	char strRaidLevel[16];$/;"	m	struct:array_detail	access:public
strRaidNewLayout	libmdadm/mdadm_other.h	/^	char strRaidNewLayout[32];$/;"	m	struct:array_detail	access:public
strRebuildOperation	libmdadm/mdadm_other.h	/^	char strRebuildOperation[16];$/;"	m	struct:array_detail	access:public
strState	libmdadm/mdadm_other.h	/^	char strState[256];$/;"	m	struct:array_disk_info	access:public
strUsedSize	libmdadm/mdadm_other.h	/^	char strUsedSize[32];$/;"	m	struct:array_detail	access:public
str_list	libmke2fs/mke2fs.c	/^struct str_list {$/;"	s	file:
str_list::list	libmke2fs/mke2fs.c	/^	char **list;$/;"	m	struct:str_list	file:	access:public
str_list::max	libmke2fs/mke2fs.c	/^	int max;$/;"	m	struct:str_list	file:	access:public
str_list::num	libmke2fs/mke2fs.c	/^	int num;$/;"	m	struct:str_list	file:	access:public
strdup	libmke2fs/profile.c	1063;"	d	file:
strdup	libmke2fs/profile.c	1064;"	d	file:
stride	libmke2fs/ext2fs.h	/^	__u32				stride;	\/* for mke2fs *\/$/;"	m	struct:struct_ext2_filsys	access:public
stride	libmke2fs/mke2fs.h	/^	__u16 stride;$/;"	m	struct:extended_opt	access:public
string_format	test_utils.cpp	/^string string_format(const char* fmt, ...)$/;"	f	signature:(const char* fmt, ...)
string_format	test_utils.h	/^extern string string_format(const char* fmt, ...);$/;"	p	signature:(const char* fmt, ...)
strip_line	libmke2fs/profile.c	/^static void strip_line(char *line)$/;"	f	file:	signature:(char *line)
stripe_width	libmke2fs/mke2fs.h	/^	__u32 stripe_width;$/;"	m	struct:extended_opt	access:public
stripes	libmdadm/mdadm.h	/^	unsigned long long stripes; \/* number of old stripes that comprise 'blocks'*\/$/;"	m	struct:reshape	access:public
struct_ext2_filsys	libmke2fs/ext2fs.h	/^struct struct_ext2_filsys {$/;"	s
struct_ext2_filsys::badblocks	libmke2fs/ext2fs.h	/^	ext2_badblocks_list		badblocks;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::block_alloc_stats	libmke2fs/ext2fs.h	/^	void (*block_alloc_stats)(ext2_filsys fs, blk64_t blk, int inuse);$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::block_map	libmke2fs/ext2fs.h	/^	ext2fs_block_bitmap		block_map;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::blocksize	libmke2fs/ext2fs.h	/^	unsigned int			blocksize;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::check_directory	libmke2fs/ext2fs.h	/^	errcode_t (*check_directory)(ext2_filsys fs, ext2_ino_t ino);$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::cluster_ratio_bits	libmke2fs/ext2fs.h	/^	int				cluster_ratio_bits;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::dblist	libmke2fs/ext2fs.h	/^	ext2_dblist			dblist;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::default_bitmap_type	libmke2fs/ext2fs.h	/^	__u16				default_bitmap_type;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::desc_blocks	libmke2fs/ext2fs.h	/^	unsigned long			desc_blocks;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::device_name	libmke2fs/ext2fs.h	/^	char *				device_name;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::flags	libmke2fs/ext2fs.h	/^	int				flags;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::fragsize	libmke2fs/ext2fs.h	/^	int				fragsize;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::get_alloc_block	libmke2fs/ext2fs.h	/^	errcode_t (*get_alloc_block)(ext2_filsys fs, blk64_t goal,$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::get_blocks	libmke2fs/ext2fs.h	/^	errcode_t (*get_blocks)(ext2_filsys fs, ext2_ino_t ino, blk_t *blocks);$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::group_desc	libmke2fs/ext2fs.h	/^	struct opaque_ext2_group_desc *	group_desc;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::opaque_ext2_group_desc	access:public
struct_ext2_filsys::group_desc_count	libmke2fs/ext2fs.h	/^	dgrp_t				group_desc_count;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::icache	libmke2fs/ext2fs.h	/^	struct ext2_inode_cache		*icache;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_inode_cache	access:public
struct_ext2_filsys::image_header	libmke2fs/ext2fs.h	/^	struct ext2_image_hdr *		image_header;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_image_hdr	access:public
struct_ext2_filsys::image_io	libmke2fs/ext2fs.h	/^	io_channel			image_io;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::inode_blocks_per_group	libmke2fs/ext2fs.h	/^	unsigned int			inode_blocks_per_group;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::inode_map	libmke2fs/ext2fs.h	/^	ext2fs_inode_bitmap		inode_map;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::io	libmke2fs/ext2fs.h	/^	io_channel			io;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::magic	libmke2fs/ext2fs.h	/^	errcode_t			magic;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::mmp_buf	libmke2fs/ext2fs.h	/^	void *mmp_buf;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::mmp_cmp	libmke2fs/ext2fs.h	/^	void *mmp_cmp;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::mmp_fd	libmke2fs/ext2fs.h	/^	int mmp_fd;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::mmp_last_written	libmke2fs/ext2fs.h	/^	long mmp_last_written;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::now	libmke2fs/ext2fs.h	/^	time_t				now;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::orig_super	libmke2fs/ext2fs.h	/^	struct ext2_super_block *	orig_super;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_super_block	access:public
struct_ext2_filsys::pad	libmke2fs/ext2fs.h	/^	__u16				pad;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::priv_data	libmke2fs/ext2fs.h	/^	void *				priv_data;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::read_inode	libmke2fs/ext2fs.h	/^	errcode_t (*read_inode)(ext2_filsys fs, ext2_ino_t ino,$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::reserved	libmke2fs/ext2fs.h	/^	__u32				reserved[5];$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::stride	libmke2fs/ext2fs.h	/^	__u32				stride;	\/* for mke2fs *\/$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::super	libmke2fs/ext2fs.h	/^	struct ext2_super_block	* 	super;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_super_block	access:public
struct_ext2_filsys::umask	libmke2fs/ext2fs.h	/^	__u32				umask;$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::write_bitmaps	libmke2fs/ext2fs.h	/^	errcode_t (*write_bitmaps)(ext2_filsys fs);$/;"	m	struct:struct_ext2_filsys	access:public
struct_ext2_filsys::write_inode	libmke2fs/ext2fs.h	/^	errcode_t (*write_inode)(ext2_filsys fs, ext2_ino_t ino,$/;"	m	struct:struct_ext2_filsys	access:public
sub_device_id	libmdadm/super-ddf.c	/^		be16 sub_device_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
sub_vendor_id	libmdadm/super-ddf.c	/^		be16 sub_vendor_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
subarray	libmdadm/Monitor.c	/^	struct state *subarray;\/* for a container it is a link to first subarray$/;"	m	struct:state	typeref:struct:state::state	file:	access:public
subarray	libmdadm/mdadm.h	/^	char	*subarray;$/;"	m	struct:context	access:public
subarray	libmdadm/super-intel.c	/^	int subarray;$/;"	m	struct:imsm_update_takeover	file:	access:public
subarray_set_num	libmdadm/Grow.c	/^static int subarray_set_num(char *container, struct mdinfo *sra, char *name, int n)$/;"	f	file:	signature:(char *container, struct mdinfo *sra, char *name, int n)
subdev	libmdadm/super-intel.c	/^	int subdev;$/;"	m	struct:imsm_update_reshape_migration	file:	access:public
subdev	libmdadm/super-intel.c	/^	int subdev;$/;"	m	struct:imsm_update_size_change	file:	access:public
super	libmke2fs/ext2fs.h	/^	struct ext2_super_block	* 	super;$/;"	m	struct:struct_ext2_filsys	typeref:struct:struct_ext2_filsys::ext2_super_block	access:public
super0	libmdadm/super0.c	/^struct superswitch super0 = {$/;"	v	typeref:struct:superswitch
super0_swap_endian	libmdadm/super0.c	/^static void super0_swap_endian(struct mdp_superblock_s *sb)$/;"	f	file:	signature:(struct mdp_superblock_s *sb)
super1	libmdadm/super1.c	/^struct superswitch super1 = {$/;"	v	typeref:struct:superswitch
super1_make_v0	libmdadm/mdadm.h	/^void *super1_make_v0(struct supertype *st, struct mdinfo *info, mdp_super_t *sb0);$/;"	p	signature:(struct supertype *st, struct mdinfo *info, mdp_super_t *sb0)
super1_make_v0	libmdadm/super1.c	/^void *super1_make_v0(struct supertype *st, struct mdinfo *info, mdp_super_t *sb0)$/;"	f	signature:(struct supertype *st, struct mdinfo *info, mdp_super_t *sb0)
super_by_fd	libmdadm/mdadm.h	/^extern struct supertype *super_by_fd(int fd, char **subarray);$/;"	p	signature:(int fd, char **subarray)
super_by_fd	libmdadm/util.c	/^struct supertype *super_by_fd(int fd, char **subarrayp)$/;"	f	signature:(int fd, char **subarrayp)
super_ddf	libmdadm/super-ddf.c	/^struct superswitch super_ddf = {$/;"	v	typeref:struct:superswitch
super_imsm	libmdadm/super-intel.c	/^struct superswitch super_imsm = {$/;"	v	typeref:struct:superswitch
super_minor	libmdadm/mdadm.h	/^	int super_minor;$/;"	m	struct:mddev_ident	access:public
super_offset	libmdadm/super1.c	/^	__u64	super_offset;	\/* sector start of this superblock *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
super_only	libmke2fs/mke2fs.c	/^static int	super_only;$/;"	v	file:
super_only	libmke2fs/mke2fs.h	/^	int super_only;$/;"	m	struct:e2fs_cfg	access:public
superlist	libmdadm/util.c	/^struct superswitch *superlist[] =$/;"	v	typeref:struct:superswitch
superswitch	libmdadm/mdadm.h	/^extern struct superswitch {$/;"	s
superswitch::activate_spare	libmdadm/mdadm.h	/^	struct mdinfo *(*activate_spare)(struct active_array *a,$/;"	m	struct:superswitch	typeref:struct:superswitch::activate_spare	access:public
superswitch::add_internal_bitmap	libmdadm/mdadm.h	/^	int (*add_internal_bitmap)(struct supertype *st, int *chunkp,$/;"	m	struct:superswitch	access:public
superswitch::add_to_super	libmdadm/mdadm.h	/^	int (*add_to_super)(struct supertype *st, mdu_disk_info_t *dinfo,$/;"	m	struct:superswitch	access:public
superswitch::avail_size	libmdadm/mdadm.h	/^	__u64 (*avail_size)(struct supertype *st, __u64 size,$/;"	m	struct:superswitch	access:public
superswitch::brief_detail_super	libmdadm/mdadm.h	/^	void (*brief_detail_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::brief_examine_subarrays	libmdadm/mdadm.h	/^	void (*brief_examine_subarrays)(struct supertype *st, int verbose);$/;"	m	struct:superswitch	access:public
superswitch::brief_examine_super	libmdadm/mdadm.h	/^	void (*brief_examine_super)(struct supertype *st, int verbose);$/;"	m	struct:superswitch	access:public
superswitch::compare_super	libmdadm/mdadm.h	/^	int (*compare_super)(struct supertype *st, struct supertype *tst);$/;"	m	struct:superswitch	access:public
superswitch::container_content	libmdadm/mdadm.h	/^	struct mdinfo *(*container_content)(struct supertype *st, char *subarray);$/;"	m	struct:superswitch	typeref:struct:superswitch::container_content	access:public
superswitch::copy_metadata	libmdadm/mdadm.h	/^	int (*copy_metadata)(struct supertype *st, int from, int to);$/;"	m	struct:superswitch	access:public
superswitch::default_geometry	libmdadm/mdadm.h	/^	void (*default_geometry)(struct supertype *st, int *level, int *layout, int *chunk); \/* optional *\/$/;"	m	struct:superswitch	access:public
superswitch::detail_platform	libmdadm/mdadm.h	/^	int (*detail_platform)(int verbose, int enumerate_only, char *controller_path);$/;"	m	struct:superswitch	access:public
superswitch::detail_super	libmdadm/mdadm.h	/^	void (*detail_super)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
superswitch::examine_badblocks	libmdadm/mdadm.h	/^	int (*examine_badblocks)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
superswitch::examine_super	libmdadm/mdadm.h	/^	void (*examine_super)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
superswitch::examine_super_result	libmdadm/mdadm.h	/^	void (*examine_super_result)(struct supertype *st, char *homehost, struct examine_result *resultlist);$/;"	m	struct:superswitch	access:public
superswitch::export_detail_platform	libmdadm/mdadm.h	/^	int (*export_detail_platform)(int verbose, char *controller_path);$/;"	m	struct:superswitch	access:public
superswitch::export_detail_super	libmdadm/mdadm.h	/^	void (*export_detail_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::export_examine_super	libmdadm/mdadm.h	/^	void (*export_examine_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::external	libmdadm/mdadm.h	/^	int external;$/;"	m	struct:superswitch	access:public
superswitch::free_super	libmdadm/mdadm.h	/^	void (*free_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::get_disk_controller_domain	libmdadm/mdadm.h	/^	const char *(*get_disk_controller_domain)(const char *path);$/;"	m	struct:superswitch	access:public
superswitch::getinfo_super	libmdadm/mdadm.h	/^	void (*getinfo_super)(struct supertype *st, struct mdinfo *info, char *map);$/;"	m	struct:superswitch	access:public
superswitch::getinfo_super_disks	libmdadm/mdadm.h	/^	struct mdinfo *(*getinfo_super_disks)(struct supertype *st);$/;"	m	struct:superswitch	typeref:struct:superswitch::getinfo_super_disks	access:public
superswitch::init_super	libmdadm/mdadm.h	/^	int (*init_super)(struct supertype *st, mdu_array_info_t *info,$/;"	m	struct:superswitch	access:public
superswitch::kill_subarray	libmdadm/mdadm.h	/^	int (*kill_subarray)(struct supertype *st); \/* optional *\/$/;"	m	struct:superswitch	access:public
superswitch::load_container	libmdadm/mdadm.h	/^	int (*load_container)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
superswitch::load_super	libmdadm/mdadm.h	/^	int (*load_super)(struct supertype *st, int fd, char *devname);$/;"	m	struct:superswitch	access:public
superswitch::locate_bitmap	libmdadm/mdadm.h	/^	void (*locate_bitmap)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
superswitch::manage_reshape	libmdadm/mdadm.h	/^	int (*manage_reshape)( \/* optional *\/$/;"	m	struct:superswitch	access:public
superswitch::match_home	libmdadm/mdadm.h	/^	int (*match_home)(struct supertype *st, char *homehost);$/;"	m	struct:superswitch	access:public
superswitch::match_metadata_desc	libmdadm/mdadm.h	/^	struct supertype * (*match_metadata_desc)(char *arg);$/;"	m	struct:superswitch	typeref:struct:superswitch::match_metadata_desc	access:public
superswitch::min_acceptable_spare_size	libmdadm/mdadm.h	/^	unsigned long long (*min_acceptable_spare_size)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::name	libmdadm/mdadm.h	/^	const char *name; \/* canonical metadata name *\/$/;"	m	struct:superswitch	access:public
superswitch::open_new	libmdadm/mdadm.h	/^	int (*open_new)(struct supertype *c, struct active_array *a,$/;"	m	struct:superswitch	access:public
superswitch::prepare_update	libmdadm/mdadm.h	/^	int (*prepare_update)(struct supertype *st,$/;"	m	struct:superswitch	access:public
superswitch::process_update	libmdadm/mdadm.h	/^	void (*process_update)(struct supertype *st,$/;"	m	struct:superswitch	access:public
superswitch::recover_backup	libmdadm/mdadm.h	/^	int (*recover_backup)(struct supertype *st, struct mdinfo *info);$/;"	m	struct:superswitch	access:public
superswitch::remove_from_super	libmdadm/mdadm.h	/^	int (*remove_from_super)(struct supertype *st, mdu_disk_info_t *dinfo);$/;"	m	struct:superswitch	access:public
superswitch::reshape_super	libmdadm/mdadm.h	/^	int (*reshape_super)(struct supertype *st,$/;"	m	struct:superswitch	access:public
superswitch::set_array_state	libmdadm/mdadm.h	/^	int (*set_array_state)(struct active_array *a, int consistent);$/;"	m	struct:superswitch	access:public
superswitch::set_disk	libmdadm/mdadm.h	/^	void (*set_disk)(struct active_array *a, int n, int state);$/;"	m	struct:superswitch	access:public
superswitch::store_super	libmdadm/mdadm.h	/^	int (*store_super)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
superswitch::swapuuid	libmdadm/mdadm.h	/^	int swapuuid; \/* true if uuid is bigending rather than hostendian *\/$/;"	m	struct:superswitch	access:public
superswitch::sync_metadata	libmdadm/mdadm.h	/^	void (*sync_metadata)(struct supertype *st);$/;"	m	struct:superswitch	access:public
superswitch::update_subarray	libmdadm/mdadm.h	/^	int (*update_subarray)(struct supertype *st, char *subarray,$/;"	m	struct:superswitch	access:public
superswitch::update_super	libmdadm/mdadm.h	/^	int (*update_super)(struct supertype *st, struct mdinfo *info,$/;"	m	struct:superswitch	access:public
superswitch::uuid_from_super	libmdadm/mdadm.h	/^	void (*uuid_from_super)(struct supertype *st, int uuid[4]);$/;"	m	struct:superswitch	access:public
superswitch::validate_container	libmdadm/mdadm.h	/^	int (*validate_container)(struct mdinfo *info);$/;"	m	struct:superswitch	access:public
superswitch::validate_geometry	libmdadm/mdadm.h	/^	int (*validate_geometry)(struct supertype *st, int level, int layout,$/;"	m	struct:superswitch	access:public
superswitch::write_bitmap	libmdadm/mdadm.h	/^	int (*write_bitmap)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
superswitch::write_init_super	libmdadm/mdadm.h	/^	int (*write_init_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
supertype	libmdadm/mdadm.h	/^	struct supertype *supertype;$/;"	m	struct:createinfo	typeref:struct:createinfo::supertype	access:public
supertype	libmdadm/mdadm.h	/^struct supertype {$/;"	s
supertype::arrays	libmdadm/mdadm.h	/^	struct active_array *arrays;$/;"	m	struct:supertype	typeref:struct:supertype::active_array	access:public
supertype::container_devnm	libmdadm/mdadm.h	/^	char container_devnm[32];    \/* devnm of container *\/$/;"	m	struct:supertype	access:public
supertype::data_offset	libmdadm/mdadm.h	/^	unsigned long long data_offset; \/* used by v1.x only *\/$/;"	m	struct:supertype	access:public
supertype::devcnt	libmdadm/mdadm.h	/^	int devcnt;$/;"	m	struct:supertype	access:public
supertype::devnm	libmdadm/mdadm.h	/^	char devnm[32]; \/* e.g. md0.  This appears in metadata_version:$/;"	m	struct:supertype	access:public
supertype::devs	libmdadm/mdadm.h	/^	struct mdinfo *devs;$/;"	m	struct:supertype	typeref:struct:supertype::mdinfo	access:public
supertype::devsize	libmdadm/mdadm.h	/^	unsigned long long devsize;$/;"	m	struct:supertype	access:public
supertype::ignore_hw_compat	libmdadm/mdadm.h	/^	int ignore_hw_compat; \/* used to inform metadata handlers that it should ignore$/;"	m	struct:supertype	access:public
supertype::info	libmdadm/mdadm.h	/^	void *info;$/;"	m	struct:supertype	access:public
supertype::max_devs	libmdadm/mdadm.h	/^	int max_devs;$/;"	m	struct:supertype	access:public
supertype::minor_version	libmdadm/mdadm.h	/^	int minor_version;$/;"	m	struct:supertype	access:public
supertype::other	libmdadm/mdadm.h	/^	void *other; \/* Hack used to convert v0.90 to v1.0 *\/$/;"	m	struct:supertype	access:public
supertype::retry_soon	libmdadm/mdadm.h	/^	int retry_soon;$/;"	m	struct:supertype	access:public
supertype::sb	libmdadm/mdadm.h	/^	void *sb;$/;"	m	struct:supertype	access:public
supertype::sock	libmdadm/mdadm.h	/^	int sock; \/* listen to external programs *\/$/;"	m	struct:supertype	access:public
supertype::ss	libmdadm/mdadm.h	/^	struct superswitch *ss;$/;"	m	struct:supertype	typeref:struct:supertype::superswitch	access:public
supertype::update_tail	libmdadm/mdadm.h	/^	struct metadata_update **update_tail;$/;"	m	struct:supertype	typeref:struct:supertype::metadata_update	access:public
supertype::updates	libmdadm/mdadm.h	/^	struct metadata_update *updates;$/;"	m	struct:supertype	typeref:struct:supertype::metadata_update	access:public
suspended	libmdadm/mdmon.h	/^enum array_state { clear, inactive, suspended, readonly, read_auto,$/;"	e	enum:array_state
swapl	libmdadm/bitmap.c	/^__u32 swapl(__u32 l)$/;"	f	signature:(__u32 l)
swapuuid	libmdadm/mdadm.h	/^	int swapuuid; \/* true if uuid is bigending rather than hostendian *\/$/;"	m	struct:superswitch	access:public
symlinks	libmdadm/mdadm.h	/^	int	symlinks;$/;"	m	struct:createinfo	access:public
sync_action	libmdadm/mdmon.h	/^enum sync_action { idle, reshape, resync, recover, check, repair, bad_action };$/;"	g
sync_actions	libmdadm/monitor.c	/^static char *sync_actions[] = {$/;"	v	file:
sync_completed_fd	libmdadm/mdmon.h	/^	int sync_completed_fd; \/* for checkpoint notification events *\/$/;"	m	struct:active_array	access:public
sync_kludge	libmke2fs/mke2fs.c	/^static int sync_kludge;	\/* Set using the MKE2FS_SYNC env. option *\/$/;"	v	file:
sync_metadata	libmdadm/Grow.c	/^static void sync_metadata(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
sync_metadata	libmdadm/mdadm.h	/^	void (*sync_metadata)(struct supertype *st);$/;"	m	struct:superswitch	access:public
sync_size	libmdadm/bitmap.h	/^	__u64 sync_size;    \/* 40  the size of the md device's sync range(3) *\/$/;"	m	struct:bitmap_super_s	access:public
syncchunk	libmdadm/bitmap.h	/^	unsigned long syncchunk;$/;"	m	struct:bitmap	access:public
syntax_err_cb	libmke2fs/profile.c	/^static profile_syntax_err_cb_t	syntax_err_cb;$/;"	v	file:
syntax_err_report	libmke2fs/mke2fs.c	/^static void syntax_err_report(const char *filename, long err, int line_num)$/;"	f	file:	signature:(const char *filename, long err, int line_num)
syntax_err_report	libmke2fs/profile.c	/^void syntax_err_report(const char *filename, long err, int line_num)$/;"	f	signature:(const char *filename, long err, int line_num)
sys_dev	libmdadm/platform-intel.h	/^struct sys_dev {$/;"	s
sys_dev::dev_id	libmdadm/platform-intel.h	/^	__u16  dev_id;$/;"	m	struct:sys_dev	access:public
sys_dev::next	libmdadm/platform-intel.h	/^	struct sys_dev *next;$/;"	m	struct:sys_dev	typeref:struct:sys_dev::sys_dev	access:public
sys_dev::path	libmdadm/platform-intel.h	/^	char *path;$/;"	m	struct:sys_dev	access:public
sys_dev::pci_id	libmdadm/platform-intel.h	/^	char *pci_id;$/;"	m	struct:sys_dev	access:public
sys_dev::type	libmdadm/platform-intel.h	/^	enum sys_dev_type type;$/;"	m	struct:sys_dev	typeref:enum:sys_dev::sys_dev_type	access:public
sys_dev_type	libmdadm/platform-intel.h	/^enum sys_dev_type {$/;"	g
sys_name	libmdadm/mdadm.h	/^	char		sys_name[20];$/;"	m	struct:mdinfo	access:public
sys_page_size	libmke2fs/mke2fs.c	/^static int sys_page_size = 4096;$/;"	v	file:
sysfs_add_disk	libmdadm/mdadm.h	/^extern int sysfs_add_disk(struct mdinfo *sra, struct mdinfo *sd, int resume);$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *sd, int resume)
sysfs_add_disk	libmdadm/sysfs.c	/^int sysfs_add_disk(struct mdinfo *sra, struct mdinfo *sd, int resume)$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *sd, int resume)
sysfs_attr_match	libmdadm/mdadm.h	/^extern int sysfs_attr_match(const char *attr, const char *str);$/;"	p	signature:(const char *attr, const char *str)
sysfs_attr_match	libmdadm/sysfs.c	/^int sysfs_attr_match(const char *attr, const char *str)$/;"	f	signature:(const char *attr, const char *str)
sysfs_attribute_available	libmdadm/mdadm.h	/^extern int sysfs_attribute_available(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name)
sysfs_attribute_available	libmdadm/sysfs.c	/^int sysfs_attribute_available(struct mdinfo *sra, struct mdinfo *dev, char *name)$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name)
sysfs_disk_to_scsi_id	libmdadm/mdadm.h	/^extern int sysfs_disk_to_scsi_id(int fd, __u32 *id);$/;"	p	signature:(int fd, __u32 *id)
sysfs_disk_to_scsi_id	libmdadm/sysfs.c	/^int sysfs_disk_to_scsi_id(int fd, __u32 *id)$/;"	f	signature:(int fd, __u32 *id)
sysfs_fd_get_ll	libmdadm/mdadm.h	/^extern int sysfs_fd_get_ll(int fd, unsigned long long *val);$/;"	p	signature:(int fd, unsigned long long *val)
sysfs_fd_get_ll	libmdadm/sysfs.c	/^int sysfs_fd_get_ll(int fd, unsigned long long *val)$/;"	f	signature:(int fd, unsigned long long *val)
sysfs_fd_get_str	libmdadm/mdadm.h	/^extern int sysfs_fd_get_str(int fd, char *val, int size);$/;"	p	signature:(int fd, char *val, int size)
sysfs_fd_get_str	libmdadm/sysfs.c	/^int sysfs_fd_get_str(int fd, char *val, int size)$/;"	f	signature:(int fd, char *val, int size)
sysfs_fd_get_two	libmdadm/mdadm.h	/^extern int sysfs_fd_get_two(int fd, unsigned long long *v1, unsigned long long *v2);$/;"	p	signature:(int fd, unsigned long long *v1, unsigned long long *v2)
sysfs_fd_get_two	libmdadm/sysfs.c	/^int sysfs_fd_get_two(int fd, unsigned long long *v1, unsigned long long *v2)$/;"	f	signature:(int fd, unsigned long long *v1, unsigned long long *v2)
sysfs_free	libmdadm/mdadm.h	/^extern void sysfs_free(struct mdinfo *sra);$/;"	p	signature:(struct mdinfo *sra)
sysfs_free	libmdadm/sysfs.c	/^void sysfs_free(struct mdinfo *sra)$/;"	f	signature:(struct mdinfo *sra)
sysfs_freeze_array	libmdadm/mdadm.h	/^extern int sysfs_freeze_array(struct mdinfo *sra);$/;"	p	signature:(struct mdinfo *sra)
sysfs_freeze_array	libmdadm/sysfs.c	/^int sysfs_freeze_array(struct mdinfo *sra)$/;"	f	signature:(struct mdinfo *sra)
sysfs_get_fd	libmdadm/mdadm.h	/^extern int sysfs_get_fd(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name)
sysfs_get_fd	libmdadm/sysfs.c	/^int sysfs_get_fd(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name)
sysfs_get_ll	libmdadm/mdadm.h	/^extern int sysfs_get_ll(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long *val)
sysfs_get_ll	libmdadm/sysfs.c	/^int sysfs_get_ll(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long *val)
sysfs_get_str	libmdadm/mdadm.h	/^extern int sysfs_get_str(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, char *val, int size)
sysfs_get_str	libmdadm/sysfs.c	/^int sysfs_get_str(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, char *val, int size)
sysfs_get_two	libmdadm/mdadm.h	/^extern int sysfs_get_two(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long *v1, unsigned long long *v2)
sysfs_get_two	libmdadm/sysfs.c	/^int sysfs_get_two(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long *v1, unsigned long long *v2)
sysfs_init	libmdadm/mdadm.h	/^extern void sysfs_init(struct mdinfo *mdi, int fd, char *devnm);$/;"	p	signature:(struct mdinfo *mdi, int fd, char *devnm)
sysfs_init	libmdadm/sysfs.c	/^void sysfs_init(struct mdinfo *mdi, int fd, char *devnm)$/;"	f	signature:(struct mdinfo *mdi, int fd, char *devnm)
sysfs_match_word	libmdadm/mdadm.h	/^extern int sysfs_match_word(const char *word, char **list);$/;"	p	signature:(const char *word, char **list)
sysfs_match_word	libmdadm/sysfs.c	/^int sysfs_match_word(const char *word, char **list)$/;"	f	signature:(const char *word, char **list)
sysfs_open	libmdadm/mdadm.h	/^extern int sysfs_open(char *devnm, char *devname, char *attr);$/;"	p	signature:(char *devnm, char *devname, char *attr)
sysfs_open	libmdadm/sysfs.c	/^int sysfs_open(char *devnm, char *devname, char *attr)$/;"	f	signature:(char *devnm, char *devname, char *attr)
sysfs_read	libmdadm/mdadm.h	/^extern struct mdinfo *sysfs_read(int fd, char *devnm, unsigned long options);$/;"	p	signature:(int fd, char *devnm, unsigned long options)
sysfs_read	libmdadm/sysfs.c	/^struct mdinfo *sysfs_read(int fd, char *devnm, unsigned long options)$/;"	f	signature:(int fd, char *devnm, unsigned long options)
sysfs_read_flags	libmdadm/mdadm.h	/^enum sysfs_read_flags {$/;"	g
sysfs_set_array	libmdadm/mdadm.h	/^extern int sysfs_set_array(struct mdinfo *info, int vers);$/;"	p	signature:(struct mdinfo *info, int vers)
sysfs_set_array	libmdadm/sysfs.c	/^int sysfs_set_array(struct mdinfo *info, int vers)$/;"	f	signature:(struct mdinfo *info, int vers)
sysfs_set_num	libmdadm/mdadm.h	/^extern int sysfs_set_num(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long val)
sysfs_set_num	libmdadm/sysfs.c	/^int sysfs_set_num(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, unsigned long long val)
sysfs_set_num_signed	libmdadm/mdadm.h	/^extern int sysfs_set_num_signed(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, long long val)
sysfs_set_num_signed	libmdadm/sysfs.c	/^int sysfs_set_num_signed(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, long long val)
sysfs_set_safemode	libmdadm/mdadm.h	/^extern int sysfs_set_safemode(struct mdinfo *sra, unsigned long ms);$/;"	p	signature:(struct mdinfo *sra, unsigned long ms)
sysfs_set_safemode	libmdadm/sysfs.c	/^int sysfs_set_safemode(struct mdinfo *sra, unsigned long ms)$/;"	f	signature:(struct mdinfo *sra, unsigned long ms)
sysfs_set_str	libmdadm/mdadm.h	/^extern int sysfs_set_str(struct mdinfo *sra, struct mdinfo *dev,$/;"	p	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, char *val)
sysfs_set_str	libmdadm/sysfs.c	/^int sysfs_set_str(struct mdinfo *sra, struct mdinfo *dev,$/;"	f	signature:(struct mdinfo *sra, struct mdinfo *dev, char *name, char *val)
sysfs_uevent	libmdadm/mdadm.h	/^extern int sysfs_uevent(struct mdinfo *sra, char *event);$/;"	p	signature:(struct mdinfo *sra, char *event)
sysfs_uevent	libmdadm/sysfs.c	/^int sysfs_uevent(struct mdinfo *sra, char *event)$/;"	f	signature:(struct mdinfo *sra, char *event)
sysfs_unique_holder	libmdadm/mdadm.h	/^extern int sysfs_unique_holder(char *devnm, long rdev);$/;"	p	signature:(char *devnm, long rdev)
sysfs_unique_holder	libmdadm/sysfs.c	/^int sysfs_unique_holder(char *devnm, long rdev)$/;"	f	signature:(char *devnm, long rdev)
sysfs_wait	libmdadm/mdadm.h	/^extern int sysfs_wait(int fd, int *msec);$/;"	p	signature:(int fd, int *msec)
sysfs_wait	libmdadm/sysfs.c	/^int sysfs_wait(int fd, int *msec)$/;"	f	signature:(int fd, int *msec)
system_rom_resource	libmdadm/probe_roms.c	/^static struct resource system_rom_resource = {$/;"	v	typeref:struct:resource	file:
table	libmke2fs/prof_err.c	/^    const struct error_table * table;$/;"	m	struct:et_list	typeref:struct:et_list::error_table	file:	access:public
table_ver_major	libmdadm/platform-intel.h	/^	__u8 table_ver_major; \/* Currently 2 (can change with future revs) *\/$/;"	m	struct:imsm_orom	access:public
table_ver_minor	libmdadm/platform-intel.h	/^	__u8 table_ver_minor; \/* Currently 2 (can change with future revs) *\/$/;"	m	struct:imsm_orom	access:public
tables_ready	libmdadm/restripe.c	/^int tables_ready = 0;$/;"	v
takeover_direction	libmdadm/super-intel.c	/^enum takeover_direction {$/;"	g	file:
tds	libmdadm/platform-intel.h	/^	__u16 tds; \/* Total Disks Supported *\/$/;"	m	struct:imsm_orom	access:public
test	libmdadm/mdadm.h	/^	int	test;$/;"	m	struct:context	access:public
test_disk	libmke2fs/mke2fs.c	/^static void test_disk(ext2_filsys fs, badblocks_list *bb_list)$/;"	f	file:	signature:(ext2_filsys fs, badblocks_list *bb_list)
test_fs	libmke2fs/mke2fs.h	/^	int test_fs;$/;"	m	struct:extended_opt	access:public
test_partition	libmdadm/mdadm.h	/^extern int test_partition(int fd);$/;"	p	signature:(int fd)
test_partition	libmdadm/util.c	/^int test_partition(int fd)$/;"	f	signature:(int fd)
test_partition_from_id	libmdadm/mdadm.h	/^extern int test_partition_from_id(dev_t id);$/;"	p	signature:(dev_t id)
test_partition_from_id	libmdadm/util.c	/^int test_partition_from_id(dev_t id)$/;"	f	signature:(dev_t id)
test_stripes	libmdadm/restripe.c	/^int test_stripes(int *source, unsigned long long *offsets,$/;"	f	signature:(int *source, unsigned long long *offsets, int raid_disks, int chunk_size, int level, int layout, unsigned long long start, unsigned long long length)
text	libmke2fs/prof_err.c	/^static const char * const text[] = {$/;"	v	file:
text_version	libmdadm/mdadm.h	/^	char			text_version[50];$/;"	m	struct:mdinfo	access:public
this_disk	libmdadm/md_p.h	/^	mdp_disk_t this_disk;$/;"	m	struct:mdp_superblock_s	access:public
tid	libmdadm/super-intel.c	/^	__u8  tid;$/;"	m	struct:imsm_dev	file:	access:public
timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:ddf_header	file:	access:public
timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:spare_assign	file:	access:public
timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:vd_config	file:	access:public
timestamp	libmke2fs/profile.c	/^	time_t		timestamp; \/* time tree was last updated from file *\/$/;"	m	struct:_prf_file_t	file:	access:public
to_remove	libmdadm/mdmon.h	/^	int to_remove;$/;"	m	struct:active_array	access:public
to_subarray	libmdadm/mdadm.h	/^static inline char *to_subarray(struct mdstat_ent *ent, char *container)$/;"	f	signature:(struct mdstat_ent *ent, char *container)
tokenize	unitest/TestingLoop.cpp	/^static void tokenize(char* target, vector<string>& tokens)$/;"	f	file:	signature:(char* target, vector<string>& tokens)
total	libmdadm/sha1.h	/^  sha1_uint32 total[2];$/;"	m	struct:sha1_ctx	access:public
total_bits	libmdadm/bitmap.c	/^	unsigned long long total_bits;$/;"	m	struct:bitmap_info_s	file:	access:public
total_blocks	libmdadm/super-intel.c	/^static unsigned long long total_blocks(struct imsm_disk *disk)$/;"	f	file:	signature:(struct imsm_disk *disk)
total_blocks_hi	libmdadm/super-intel.c	/^	__u32 total_blocks_hi;		 \/* 0xF4 - 0xF5 total blocks hi *\/$/;"	m	struct:imsm_disk	file:	access:public
total_blocks_lo	libmdadm/super-intel.c	/^	__u32 total_blocks_lo;		 \/* 0xE8 - 0xEB total blocks lo *\/$/;"	m	struct:imsm_disk	file:	access:public
try_rule	libmdadm/policy.c	/^static int try_rule(char *w, char *name, struct rule **rp)$/;"	f	file:	signature:(char *w, char *name, struct rule **rp)
try_spare	libmdadm/Incremental.c	/^static int try_spare(char *devname, int *dfdp, struct dev_policy *pol,$/;"	f	file:	signature:(char *devname, int *dfdp, struct dev_policy *pol, struct map_ent *target, struct supertype *st, int verbose)
try_spare	libmdadm/Incremental.c	/^static int try_spare(char *devname, int *dfdp, struct dev_policy *pol,$/;"	p	file:	signature:(char *devname, int *dfdp, struct dev_policy *pol, struct map_ent *target, struct supertype *st, int verbose)
try_spare_migration	libmdadm/Monitor.c	/^static void try_spare_migration(struct state *statelist, struct alert_info *info)$/;"	f	file:	signature:(struct state *statelist, struct alert_info *info)
try_spare_migration	libmdadm/Monitor.c	/^static void try_spare_migration(struct state *statelist, struct alert_info *info);$/;"	p	file:	signature:(struct state *statelist, struct alert_info *info)
type	libmdadm/mdadm.h	/^	char *type;	\/* rule_policy or rule_part *\/$/;"	m	struct:pol_rule	access:public
type	libmdadm/platform-intel.h	/^	enum sys_dev_type type;$/;"	m	struct:sys_dev	typeref:enum:sys_dev::sys_dev_type	access:public
type	libmdadm/super-ddf.c	/^		be16	type;$/;"	m	struct:phys_disk::phys_disk_entry	file:	access:public
type	libmdadm/super-ddf.c	/^		be16	type;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
type	libmdadm/super-ddf.c	/^	__u8	type;$/;"	m	struct:ddf_header	file:	access:public
type	libmdadm/super-ddf.c	/^	__u8	type;$/;"	m	struct:spare_assign	file:	access:public
type	libmdadm/super-ddf.c	/^	} type;$/;"	m	struct:ddf_controller_data	typeref:struct:ddf_controller_data::controller_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_activate_spare	typeref:enum:imsm_update_activate_spare::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_add_remove_disk	typeref:enum:imsm_update_add_remove_disk::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_create_array	typeref:enum:imsm_update_create_array::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_general_migration_checkpoint	typeref:enum:imsm_update_general_migration_checkpoint::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_kill_array	typeref:enum:imsm_update_kill_array::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_rename_array	typeref:enum:imsm_update_rename_array::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_reshape	typeref:enum:imsm_update_reshape::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_reshape_migration	typeref:enum:imsm_update_reshape_migration::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_size_change	typeref:enum:imsm_update_size_change::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum imsm_update_type type;$/;"	m	struct:imsm_update_takeover	typeref:enum:imsm_update_takeover::imsm_update_type	file:	access:public
type	libmdadm/super-intel.c	/^	enum sys_dev_type type;$/;"	m	struct:intel_hba	typeref:enum:intel_hba::sys_dev_type	file:	access:public
type_disk	libmdadm/policy.c	/^char type_disk[] = "disk";$/;"	v
type_guid	libmdadm/part.h	/^	unsigned char type_guid[16];$/;"	m	struct:GPT_part_entry	access:public
type_part	libmdadm/policy.c	/^char type_part[] = "part";$/;"	v
u4	libmdadm/crc32.c	/^           typedef unsigned short u4;$/;"	t	file:
u4	libmdadm/crc32.c	/^         typedef unsigned long u4;$/;"	t	file:
u4	libmdadm/crc32.c	/^       typedef unsigned int u4;$/;"	t	file:
uChkSum	libmdadm/mdadm_other.h	/^	unsigned uChkSum;$/;"	m	struct:examine_result	access:public
uDevRole	libmdadm/mdadm_other.h	/^	unsigned uDevRole;$/;"	m	struct:examine_result	access:public
uExpectedChkSum	libmdadm/mdadm_other.h	/^	unsigned uExpectedChkSum;$/;"	m	struct:examine_result	access:public
uRaidDiskNum	libmdadm/mdadm_other.h	/^	unsigned uRaidDiskNum;$/;"	m	struct:examine_result	access:public
uRaidLevel	libmdadm/mdadm_other.h	/^	unsigned uRaidLevel;$/;"	m	struct:examine_result	access:public
udev_template_start	libmdadm/policy.c	/^char udev_template_start[] =$/;"	v
uid	libmdadm/mdadm.h	/^	int	uid;$/;"	m	struct:createinfo	access:public
ullArraySize	libmdadm/mdadm_other.h	/^	unsigned long long ullArraySize;$/;"	m	struct:array_detail	access:public
ullReshapeProgress	libmdadm/mdadm_other.h	/^	unsigned long long ullReshapeProgress;$/;"	m	struct:array_detail	access:public
ullUsedSize	libmdadm/mdadm_other.h	/^	unsigned long long ullUsedSize;$/;"	m	struct:array_detail	access:public
umask	libmke2fs/ext2fs.h	/^	__u32				umask;$/;"	m	struct:struct_ext2_filsys	access:public
unblock_monitor	libmdadm/msg.c	/^void unblock_monitor(char *container, const int unfreeze)$/;"	f	signature:(char *container, const int unfreeze)
unblock_monitor	libmdadm/msg.h	/^extern void unblock_monitor(char *container, const int unfreeze);$/;"	p	signature:(char *container, const int unfreeze)
unblock_subarray	libmdadm/msg.c	/^int unblock_subarray(struct mdinfo *sra, const int unfreeze)$/;"	f	signature:(struct mdinfo *sra, const int unfreeze)
unblock_subarray	libmdadm/msg.h	/^extern int unblock_subarray(struct mdinfo *sra, const int unfreeze);$/;"	p	signature:(struct mdinfo *sra, const int unfreeze)
unfreeze	libmdadm/Grow.c	/^static void unfreeze(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
unfreeze_container	libmdadm/Grow.c	/^static void unfreeze_container(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
unit	libmdadm/super-ddf.c	/^		be16	unit;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
upd_serial	libmke2fs/profile.c	/^	int		upd_serial; \/* incremented when data changes *\/$/;"	m	struct:_prf_file_t	file:	access:public
update	libmdadm/mdadm.h	/^	char	*update;$/;"	m	struct:context	access:public
update_activate_spare	libmdadm/super-intel.c	/^	update_activate_spare,$/;"	e	enum:imsm_update_type	file:
update_add_remove_disk	libmdadm/super-intel.c	/^	update_add_remove_disk,$/;"	e	enum:imsm_update_type	file:
update_cache_size	libmdadm/Grow.c	/^static void update_cache_size(char *container, struct mdinfo *sra,$/;"	f	file:	signature:(char *container, struct mdinfo *sra, struct mdinfo *info, int disks, unsigned long long blocks)
update_create_array	libmdadm/super-intel.c	/^	update_create_array,$/;"	e	enum:imsm_update_type	file:
update_general_migration_checkpoint	libmdadm/super-intel.c	/^	update_general_migration_checkpoint,$/;"	e	enum:imsm_update_type	file:
update_kill_array	libmdadm/super-intel.c	/^	update_kill_array,$/;"	e	enum:imsm_update_type	file:
update_queue	libmdadm/managemon.c	/^struct metadata_update *update_queue = NULL;$/;"	v	typeref:struct:metadata_update
update_queue_handled	libmdadm/managemon.c	/^struct metadata_update *update_queue_handled = NULL;$/;"	v	typeref:struct:metadata_update
update_queue_pending	libmdadm/managemon.c	/^struct metadata_update *update_queue_pending = NULL;$/;"	v	typeref:struct:metadata_update
update_recovery_start	libmdadm/super-intel.c	/^static void update_recovery_start(struct intel_super *super,$/;"	f	file:	signature:(struct intel_super *super, struct imsm_dev *dev, struct mdinfo *array)
update_rename_array	libmdadm/super-intel.c	/^	update_rename_array,$/;"	e	enum:imsm_update_type	file:
update_reshape_container_disks	libmdadm/super-intel.c	/^	update_reshape_container_disks,$/;"	e	enum:imsm_update_type	file:
update_reshape_migration	libmdadm/super-intel.c	/^	update_reshape_migration,$/;"	e	enum:imsm_update_type	file:
update_size_change	libmdadm/super-intel.c	/^	update_size_change,$/;"	e	enum:imsm_update_type	file:
update_subarray	libmdadm/mdadm.h	/^	int (*update_subarray)(struct supertype *st, char *subarray,$/;"	m	struct:superswitch	access:public
update_subarray_imsm	libmdadm/super-intel.c	/^static int update_subarray_imsm(struct supertype *st, char *subarray,$/;"	f	file:	signature:(struct supertype *st, char *subarray, char *update, struct mddev_ident *ident)
update_super	libmdadm/mdadm.h	/^	int (*update_super)(struct supertype *st, struct mdinfo *info,$/;"	m	struct:superswitch	access:public
update_super0	libmdadm/super0.c	/^static int update_super0(struct supertype *st, struct mdinfo *info,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *update, char *devname, int verbose, int uuid_set, char *homehost)
update_super1	libmdadm/super1.c	/^static int update_super1(struct supertype *st, struct mdinfo *info,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *update, char *devname, int verbose, int uuid_set, char *homehost)
update_super_ddf	libmdadm/super-ddf.c	/^static int update_super_ddf(struct supertype *st, struct mdinfo *info,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *update, char *devname, int verbose, int uuid_set, char *homehost)
update_super_imsm	libmdadm/super-intel.c	/^static int update_super_imsm(struct supertype *st, struct mdinfo *info,$/;"	f	file:	signature:(struct supertype *st, struct mdinfo *info, char *update, char *devname, int verbose, int uuid_set, char *homehost)
update_tail	libmdadm/mdadm.h	/^	struct metadata_update **update_tail;$/;"	m	struct:supertype	typeref:struct:supertype::metadata_update	access:public
update_takeover	libmdadm/super-intel.c	/^	update_takeover,$/;"	e	enum:imsm_update_type	file:
updates	libmdadm/mdadm.h	/^	struct metadata_update *updates;$/;"	m	struct:supertype	typeref:struct:supertype::metadata_update	access:public
updates_pending	libmdadm/super-ddf.c	/^	int			updates_pending;$/;"	m	struct:ddf_super	file:	access:public
updates_pending	libmdadm/super-intel.c	/^	int updates_pending; \/* count of pending updates for mdmon *\/$/;"	m	struct:intel_super	file:	access:public
uptodate	libmdadm/Assemble.c	/^	int uptodate; \/* set once we decide that this device is as$/;"	m	struct:devs	file:	access:public
usage_types	libmke2fs/mke2fs.h	/^	char usage_types[256];$/;"	m	struct:e2fs_cfg	access:public
use_udev	libmdadm/lib.c	/^int use_udev(void)$/;"	f	signature:(void)
use_udev	libmdadm/mdadm.h	/^extern int use_udev(void);$/;"	p	signature:(void)
used	libmdadm/mdadm.h	/^	int used;		\/* set when used *\/$/;"	m	struct:mddev_dev	access:public
used	libmdadm/super-intel.c	/^	int   used;$/;"	m	struct:md_list	file:	access:public
used_pdes	libmdadm/super-ddf.c	/^	be16	used_pdes;	\/* This is a counter, not a max - the list$/;"	m	struct:phys_disk	file:	access:public
utime	libmdadm/Monitor.c	/^	long utime;$/;"	m	struct:state	file:	access:public
utime	libmdadm/md_p.h	/^	__u32 utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:mdp_superblock_s	access:public
utime	libmdadm/md_u.h	/^	int utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:mdu_array_info_s	access:public
utime	libmdadm/super1.c	/^	__u64	utime;		\/* 40 bits second, 24 btes microseconds *\/$/;"	m	struct:mdp_superblock_1	file:	access:public
uuid	libmdadm/bitmap.h	/^	__u8  uuid[16];     \/*  8  128 bit uuid - must match md device uuid *\/$/;"	m	struct:bitmap_super_s	access:public
uuid	libmdadm/mdadm.h	/^	int			uuid[4];$/;"	m	struct:mdinfo	access:public
uuid	libmdadm/mdadm.h	/^	int	uuid[4];$/;"	m	struct:map_ent	access:public
uuid	libmdadm/mdadm.h	/^	int	uuid[4];$/;"	m	struct:mddev_ident	access:public
uuid	libmdadm/mdadm_other.h	/^	int uuid[4];$/;"	m	struct:array_detail	access:public
uuid_from_ddf_guid	libmdadm/super-ddf.c	/^static void uuid_from_ddf_guid(const char *guid, int uuid[4])$/;"	f	file:	signature:(const char *guid, int uuid[4])
uuid_from_ddf_guid	libmdadm/super-ddf.c	/^static void uuid_from_ddf_guid(const char *guid, int uuid[4]);$/;"	p	file:	signature:(const char *guid, int uuid[4])
uuid_from_super	libmdadm/mdadm.h	/^	void (*uuid_from_super)(struct supertype *st, int uuid[4]);$/;"	m	struct:superswitch	access:public
uuid_from_super	libmdadm/mdadm.h	/^extern void uuid_from_super(int uuid[4], mdp_super_t *super);$/;"	p	signature:(int uuid[4], mdp_super_t *super)
uuid_from_super0	libmdadm/super0.c	/^static void uuid_from_super0(struct supertype *st, int uuid[4])$/;"	f	file:	signature:(struct supertype *st, int uuid[4])
uuid_from_super1	libmdadm/super1.c	/^static void uuid_from_super1(struct supertype *st, int uuid[4])$/;"	f	file:	signature:(struct supertype *st, int uuid[4])
uuid_from_super_ddf	libmdadm/super-ddf.c	/^static void uuid_from_super_ddf(struct supertype *st, int uuid[4])$/;"	f	file:	signature:(struct supertype *st, int uuid[4])
uuid_from_super_ddf	libmdadm/super-ddf.c	/^static void uuid_from_super_ddf(struct supertype *st, int uuid[4]);$/;"	p	file:	signature:(struct supertype *st, int uuid[4])
uuid_from_super_imsm	libmdadm/super-intel.c	/^static void uuid_from_super_imsm(struct supertype *st, int uuid[4])$/;"	f	file:	signature:(struct supertype *st, int uuid[4])
uuid_of_ddf_subarray	libmdadm/super-ddf.c	/^static void uuid_of_ddf_subarray(const struct ddf_super *ddf,$/;"	f	file:	signature:(const struct ddf_super *ddf, unsigned int vcnum, int uuid[4])
uuid_set	libmdadm/mdadm.h	/^	int	uuid_set;$/;"	m	struct:mddev_ident	access:public
uuid_zero	libmdadm/util.c	/^const int uuid_zero[4] = { 0, 0, 0, 0 };$/;"	v
v0	libmdadm/super-ddf.c	/^	__u8	v0[32];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
v1	libmdadm/super-ddf.c	/^	__u8	v1[32];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
v2	libmdadm/super-ddf.c	/^	__u8	v2[16];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
v3	libmdadm/super-ddf.c	/^	__u8	v3[16];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
valid_time	libmdadm/platform-intel.c	/^static time_t valid_time = 0;$/;"	v	file:
validate	libmdadm/Grow.c	/^static void validate(int afd, int bfd, unsigned long long offset)$/;"	f	file:	signature:(int afd, int bfd, unsigned long long offset)
validate_container	libmdadm/mdadm.h	/^	int (*validate_container)(struct mdinfo *info);$/;"	m	struct:superswitch	access:public
validate_container_imsm	libmdadm/super-intel.c	/^int validate_container_imsm(struct mdinfo *info)$/;"	f	signature:(struct mdinfo *info)
validate_geometry	libmdadm/mdadm.h	/^	int (*validate_geometry)(struct supertype *st, int level, int layout,$/;"	m	struct:superswitch	access:public
validate_geometry	libmdadm/super-gpt.c	/^static int validate_geometry(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *subdev, unsigned long long *freesize, int verbose)
validate_geometry	libmdadm/super-mbr.c	/^static int validate_geometry(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *subdev, unsigned long long *freesize, int verbose)
validate_geometry0	libmdadm/super0.c	/^static int validate_geometry0(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *subdev, unsigned long long *freesize, int verbose)
validate_geometry1	libmdadm/super1.c	/^static int validate_geometry1(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *subdev, unsigned long long *freesize, int verbose)
validate_geometry_ddf	libmdadm/super-ddf.c	/^static int validate_geometry_ddf(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_ddf_bvd	libmdadm/super-ddf.c	/^static int validate_geometry_ddf_bvd(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_ddf_bvd	libmdadm/super-ddf.c	/^static int validate_geometry_ddf_bvd(struct supertype *st,$/;"	p	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_ddf_container	libmdadm/super-ddf.c	/^validate_geometry_ddf_container(struct supertype *st,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_ddf_container	libmdadm/super-ddf.c	/^validate_geometry_ddf_container(struct supertype *st,$/;"	p	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_imsm	libmdadm/super-intel.c	/^static int validate_geometry_imsm(struct supertype *st, int level, int layout,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_imsm_container	libmdadm/super-intel.c	/^static int validate_geometry_imsm_container(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_geometry_imsm_orom	libmdadm/super-intel.c	/^validate_geometry_imsm_orom(struct intel_super *super, int level, int layout,$/;"	f	file:	signature:(struct intel_super *super, int level, int layout, int raiddisks, int *chunk, unsigned long long size, int verbose)
validate_geometry_imsm_volume	libmdadm/super-intel.c	/^static int validate_geometry_imsm_volume(struct supertype *st, int level,$/;"	f	file:	signature:(struct supertype *st, int level, int layout, int raiddisks, int *chunk, unsigned long long size, unsigned long long data_offset, char *dev, unsigned long long *freesize, int verbose)
validate_members	libmdadm/super-intel.c	/^validate_members(struct intel_super *super, struct intel_disk *disk_list,$/;"	f	file:	signature:(struct intel_super *super, struct intel_disk *disk_list, const int owner)
value	libmdadm/mdadm.h	/^		char *value;$/;"	m	struct:pol_rule::rule	access:public
value	libmdadm/mdadm.h	/^	const char *value;$/;"	m	struct:dev_policy	access:public
value	libmke2fs/profile.c	/^	char *value;$/;"	m	struct:profile_node	file:	access:public
vcl	libmdadm/super-ddf.c	/^	struct vcl {$/;"	s	struct:ddf_super	file:	access:public
vcnum	libmdadm/super-ddf.c	/^				unsigned int	vcnum; \/* index into ->virt *\/$/;"	m	struct:ddf_super::vcl::__anon6::__anon7	file:	access:public
vd_config	libmdadm/super-ddf.c	/^struct vd_config {$/;"	s	file:
vd_config::array_blocks	libmdadm/super-ddf.c	/^	be64	array_blocks;	\/* blocks in array *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::bg_rate	libmdadm/super-ddf.c	/^	__u8	bg_rate;$/;"	m	struct:vd_config	file:	access:public
vd_config::blocks	libmdadm/super-ddf.c	/^	be64	blocks;		\/* blocks per component could be different$/;"	m	struct:vd_config	file:	access:public
vd_config::cache_pol	libmdadm/super-ddf.c	/^	__u8	cache_pol[8];$/;"	m	struct:vd_config	file:	access:public
vd_config::chunk_shift	libmdadm/super-ddf.c	/^	__u8	chunk_shift;	\/* 0 == 512, 1==1024 etc *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:vd_config	file:	access:public
vd_config::guid	libmdadm/super-ddf.c	/^	char	guid[DDF_GUID_LEN];$/;"	m	struct:vd_config	file:	access:public
vd_config::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_VD_CONF_MAGIC *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::pad0	libmdadm/super-ddf.c	/^	__u8	pad0[24];$/;"	m	struct:vd_config	file:	access:public
vd_config::pad1	libmdadm/super-ddf.c	/^	__u8	pad1[8];$/;"	m	struct:vd_config	file:	access:public
vd_config::pad2	libmdadm/super-ddf.c	/^	__u8	pad2[3];$/;"	m	struct:vd_config	file:	access:public
vd_config::pad3	libmdadm/super-ddf.c	/^	__u8	pad3[52];$/;"	m	struct:vd_config	file:	access:public
vd_config::pad4	libmdadm/super-ddf.c	/^	__u8	pad4[192];$/;"	m	struct:vd_config	file:	access:public
vd_config::phys_refnum	libmdadm/super-ddf.c	/^	be32	phys_refnum[0];	\/* refnum of each disk in sequence *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::prim_elmnt_count	libmdadm/super-ddf.c	/^	be16	prim_elmnt_count;$/;"	m	struct:vd_config	file:	access:public
vd_config::prl	libmdadm/super-ddf.c	/^	__u8	prl;$/;"	m	struct:vd_config	file:	access:public
vd_config::rlq	libmdadm/super-ddf.c	/^	__u8	rlq;$/;"	m	struct:vd_config	file:	access:public
vd_config::sec_elmnt_count	libmdadm/super-ddf.c	/^	__u8	sec_elmnt_count;$/;"	m	struct:vd_config	file:	access:public
vd_config::sec_elmnt_seq	libmdadm/super-ddf.c	/^	__u8	sec_elmnt_seq;$/;"	m	struct:vd_config	file:	access:public
vd_config::seqnum	libmdadm/super-ddf.c	/^	be32	seqnum;$/;"	m	struct:vd_config	file:	access:public
vd_config::spare_refs	libmdadm/super-ddf.c	/^	be32	spare_refs[8];	\/* This is used to detect missing spares.$/;"	m	struct:vd_config	file:	access:public
vd_config::srl	libmdadm/super-ddf.c	/^	__u8	srl;$/;"	m	struct:vd_config	file:	access:public
vd_config::timestamp	libmdadm/super-ddf.c	/^	be32	timestamp;$/;"	m	struct:vd_config	file:	access:public
vd_config::v0	libmdadm/super-ddf.c	/^	__u8	v0[32];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::v1	libmdadm/super-ddf.c	/^	__u8	v1[32];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::v2	libmdadm/super-ddf.c	/^	__u8	v2[16];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::v3	libmdadm/super-ddf.c	/^	__u8	v3[16];	\/* reserved- 0xff *\/$/;"	m	struct:vd_config	file:	access:public
vd_config::vendor	libmdadm/super-ddf.c	/^	__u8	vendor[32];$/;"	m	struct:vd_config	file:	access:public
vdsize	libmdadm/super-ddf.c	/^	int			pdsize, vdsize;$/;"	m	struct:ddf_super	file:	access:public
vendor	libmdadm/super-ddf.c	/^	__u8	vendor[32];$/;"	m	struct:disk_data	file:	access:public
vendor	libmdadm/super-ddf.c	/^	__u8	vendor[32];$/;"	m	struct:vd_config	file:	access:public
vendorID	libmdadm/platform-intel.c	/^	__u16 vendorID;$/;"	m	struct:pciExpDataStructFormat	file:	access:public
vendor_data	libmdadm/super-ddf.c	/^	__u8	vendor_data[448];$/;"	m	struct:ddf_controller_data	file:	access:public
vendor_id	libmdadm/super-ddf.c	/^		be16 vendor_id;$/;"	m	struct:ddf_controller_data::controller_type	file:	access:public
vendor_length	libmdadm/super-ddf.c	/^	be32	vendor_length;$/;"	m	struct:ddf_header	file:	access:public
vendor_offset	libmdadm/super-ddf.c	/^	be32	vendor_offset;$/;"	m	struct:ddf_header	file:	access:public
vendors_with_variable_volume_UUID	libmdadm/super-ddf.c	/^static const char *vendors_with_variable_volume_UUID[] = {$/;"	v	file:
ver	libmdadm/platform-intel.c	/^	__u8  ver[4];$/;"	m	struct:pciExpDataStructFormat	file:	access:public
verbose	libmdadm/mdadm.h	/^	int	verbose;$/;"	m	struct:context	access:public
verbose	libmke2fs/mke2fs.c	/^static int	verbose;$/;"	v	file:
verbose	libmke2fs/mke2fs.h	/^	int verbose;$/;"	m	struct:e2fs_cfg	access:public
verify_errors	libmdadm/super-intel.c	/^	__u16 verify_errors;	\/* number of mismatches *\/$/;"	m	struct:imsm_vol	file:	access:public
verify_reshape_position	libmdadm/Grow.c	/^static int verify_reshape_position(struct mdinfo *info, int level)$/;"	f	file:	signature:(struct mdinfo *info, int level)
version	libmdadm/bitmap.h	/^	__u32 version;      \/*  4  the bitmap major for now, could change... *\/$/;"	m	struct:bitmap_super_s	access:public
version_to_superswitch	libmdadm/mdadm.h	/^extern struct superswitch *version_to_superswitch(char *vers);$/;"	p	signature:(char *vers)
version_to_superswitch	libmdadm/util.c	/^struct superswitch *version_to_superswitch(char *vers)$/;"	f	signature:(char *vers)
video_rom_resource	libmdadm/probe_roms.c	/^static struct resource video_rom_resource = {$/;"	v	typeref:struct:resource	file:
virt	libmdadm/super-ddf.c	/^	struct virtual_disk	*virt;$/;"	m	struct:ddf_super	typeref:struct:ddf_super::virtual_disk	file:	access:public
virt_section_length	libmdadm/super-ddf.c	/^	be32	virt_section_length;$/;"	m	struct:ddf_header	file:	access:public
virt_section_offset	libmdadm/super-ddf.c	/^	be32	virt_section_offset;$/;"	m	struct:ddf_header	file:	access:public
virtual_disk	libmdadm/super-ddf.c	/^struct virtual_disk {$/;"	s	file:
virtual_disk::crc	libmdadm/super-ddf.c	/^	be32	crc;$/;"	m	struct:virtual_disk	file:	access:public
virtual_disk::entries	libmdadm/super-ddf.c	/^	} entries[0];$/;"	m	struct:virtual_disk	typeref:struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::magic	libmdadm/super-ddf.c	/^	be32	magic;		\/* DDF_VIRT_RECORDS_MAGIC *\/$/;"	m	struct:virtual_disk	file:	access:public
virtual_disk::max_vdes	libmdadm/super-ddf.c	/^	be16	max_vdes;$/;"	m	struct:virtual_disk	file:	access:public
virtual_disk::pad	libmdadm/super-ddf.c	/^	__u8	pad[52];$/;"	m	struct:virtual_disk	file:	access:public
virtual_disk::populated_vdes	libmdadm/super-ddf.c	/^	be16	populated_vdes;$/;"	m	struct:virtual_disk	file:	access:public
virtual_disk::virtual_entry	libmdadm/super-ddf.c	/^	struct virtual_entry {$/;"	s	struct:virtual_disk	file:	access:public
virtual_disk::virtual_entry::guid	libmdadm/super-ddf.c	/^		char	guid[DDF_GUID_LEN];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::guid_crc	libmdadm/super-ddf.c	/^		be16	guid_crc;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::init_state	libmdadm/super-ddf.c	/^		__u8	init_state;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::name	libmdadm/super-ddf.c	/^		char	name[16];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::pad0	libmdadm/super-ddf.c	/^		__u16	pad0;	\/* 0xffff *\/$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::pad1	libmdadm/super-ddf.c	/^		__u8	pad1[14];$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::state	libmdadm/super-ddf.c	/^		__u8	state;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::type	libmdadm/super-ddf.c	/^		be16	type;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_disk::virtual_entry::unit	libmdadm/super-ddf.c	/^		be16	unit;$/;"	m	struct:virtual_disk::virtual_entry	file:	access:public
virtual_entry	libmdadm/super-ddf.c	/^	struct virtual_entry {$/;"	s	struct:virtual_disk	file:	access:public
vlist	libmdadm/super-ddf.c	/^		struct vcl *vlist[0]; \/* max_part in size *\/$/;"	m	struct:ddf_super::dl	typeref:struct:ddf_super::dl::vcl	file:	access:public
vol	libmdadm/super-intel.c	/^	struct imsm_vol vol;$/;"	m	struct:imsm_dev	typeref:struct:imsm_dev::imsm_vol	file:	access:public
volname	libmdadm/util.c	/^	char volname[BLKPG_VOLNAMELTH];	\/* volume label *\/$/;"	m	struct:blkpg_partition	file:	access:public
volume	libmdadm/super-intel.c	/^	__u8  volume[MAX_RAID_SERIAL_LEN];$/;"	m	struct:imsm_dev	file:	access:public
volume_id_is_reliable	libmdadm/super-ddf.c	/^static int volume_id_is_reliable(const struct ddf_super *ddf)$/;"	f	file:	signature:(const struct ddf_super *ddf)
volume_label	libmke2fs/mke2fs.c	/^static char *volume_label;$/;"	v	file:
volume_label	libmke2fs/mke2fs.h	/^	char volume_label[16];$/;"	m	struct:e2fs_cfg	access:public
vpa	libmdadm/platform-intel.h	/^	__u8 vpa; \/* # Volumes Per Array supported *\/$/;"	m	struct:imsm_orom	access:public
vphba	libmdadm/platform-intel.h	/^	__u8 vphba; \/* # Volumes Per Host Bus Adapter supported *\/$/;"	m	struct:imsm_orom	access:public
wait_and_act	libmdadm/monitor.c	/^static int wait_and_act(struct supertype *container, int nowait)$/;"	f	file:	signature:(struct supertype *container, int nowait)
wait_for	libmdadm/mdadm.h	/^void wait_for(char *dev, int fd);$/;"	p	signature:(char *dev, int fd)
wait_for	libmdadm/util.c	/^void wait_for(char *dev, int fd)$/;"	f	signature:(char *dev, int fd)
wait_for_reshape_imsm	libmdadm/super-intel.c	/^int wait_for_reshape_imsm(struct mdinfo *sra, int ndata)$/;"	f	signature:(struct mdinfo *sra, int ndata)
wait_reply	libmdadm/msg.c	/^int wait_reply(int fd, int tmo)$/;"	f	signature:(int fd, int tmo)
wait_reply	libmdadm/msg.h	/^extern int wait_reply(int fd, int tmo);$/;"	p	signature:(int fd, int tmo)
wait_reshape	libmdadm/Grow.c	/^static void wait_reshape(struct mdinfo *sra)$/;"	f	file:	signature:(struct mdinfo *sra)
wakeup_monitor	libmdadm/managemon.c	/^static void wakeup_monitor(void)$/;"	f	file:	signature:(void)
working	libmdadm/Monitor.c	/^	int active, working, failed, spare, raid;$/;"	m	struct:state	file:	access:public
working_disks	libmdadm/md_p.h	/^	__u32 working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:mdp_superblock_s	access:public
working_disks	libmdadm/md_u.h	/^	int working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:mdu_array_info_s	access:public
workspace_lba	libmdadm/super-ddf.c	/^				be64 workspace_lba; \/* sectors *\/$/;"	m	struct:ddf_super::dl::__anon8::__anon9	file:	access:public
workspace_lba	libmdadm/super-ddf.c	/^	be64	workspace_lba;$/;"	m	struct:ddf_header	file:	access:public
workspace_len	libmdadm/super-ddf.c	/^	be32	workspace_len;	\/* sectors for vendor space -$/;"	m	struct:ddf_header	file:	access:public
write_attr	libmdadm/monitor.c	/^static int write_attr(char *attr, int fd)$/;"	f	file:	signature:(char *attr, int fd)
write_behind	libmdadm/bitmap.h	/^	__u32 write_behind; \/* 60  number of outstanding write-behind writes *\/$/;"	m	struct:bitmap_super_s	access:public
write_behind	libmdadm/mdadm.h	/^	int	write_behind;$/;"	m	struct:shape	access:public
write_bitmap	libmdadm/mdadm.h	/^	int (*write_bitmap)(struct supertype *st, int fd);$/;"	m	struct:superswitch	access:public
write_bitmap0	libmdadm/super0.c	/^static int write_bitmap0(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
write_bitmap1	libmdadm/super1.c	/^static int write_bitmap1(struct supertype *st, int fd)$/;"	f	file:	signature:(struct supertype *st, int fd)
write_bitmaps	libmke2fs/ext2fs.h	/^	errcode_t (*write_bitmaps)(ext2_filsys fs);$/;"	m	struct:struct_ext2_filsys	access:public
write_daemon	libmdadm/bitmap.h	/^	mdk_thread_t *write_daemon;$/;"	m	struct:bitmap	access:public
write_done	libmdadm/bitmap.h	/^	struct semaphore write_done;$/;"	m	struct:bitmap	typeref:struct:bitmap::semaphore	access:public
write_imsm_migr_rec	libmdadm/super-intel.c	/^static int write_imsm_migr_rec(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
write_init_super	libmdadm/mdadm.h	/^	int (*write_init_super)(struct supertype *st);$/;"	m	struct:superswitch	access:public
write_init_super0	libmdadm/super0.c	/^static int write_init_super0(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
write_init_super1	libmdadm/super1.c	/^static int write_init_super1(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
write_init_super_ddf	libmdadm/super-ddf.c	/^static int write_init_super_ddf(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
write_init_super_imsm	libmdadm/super-intel.c	/^static int write_init_super_imsm(struct supertype *st)$/;"	f	file:	signature:(struct supertype *st)
write_inode	libmke2fs/ext2fs.h	/^	errcode_t (*write_inode)(ext2_filsys fs, ext2_ino_t ino,$/;"	m	struct:struct_ext2_filsys	access:public
write_inode_tables	libmke2fs/mke2fs.c	/^static int write_inode_tables(ext2_filsys fs, int lazy_flag, int itable_zeroed, struct mke2fs_handle* handle)$/;"	f	file:	signature:(ext2_filsys fs, int lazy_flag, int itable_zeroed, struct mke2fs_handle* handle)
write_lock	libmdadm/bitmap.h	/^	spinlock_t write_lock;$/;"	m	struct:bitmap	access:public
write_pages	libmdadm/bitmap.h	/^	struct list_head write_pages;$/;"	m	struct:bitmap	typeref:struct:bitmap::list_head	access:public
write_pending	libmdadm/mdmon.h	/^		   clean, active, write_pending, active_idle, bad_word};$/;"	e	enum:array_state
write_pool	libmdadm/bitmap.h	/^	mempool_t *write_pool;$/;"	m	struct:bitmap	access:public
write_ready	libmdadm/bitmap.h	/^	struct semaphore write_ready;$/;"	m	struct:bitmap	typeref:struct:bitmap::semaphore	access:public
write_rule	libmdadm/policy.c	/^int write_rule(struct rule *rule, int fd, int force_part)$/;"	f	signature:(struct rule *rule, int fd, int force_part)
write_super_imsm	libmdadm/super-intel.c	/^static int write_super_imsm(struct supertype *st, int doclose)$/;"	f	file:	signature:(struct supertype *st, int doclose)
write_super_imsm_spares	libmdadm/super-intel.c	/^static int write_super_imsm_spares(struct intel_super *super, int doclose)$/;"	f	file:	signature:(struct intel_super *super, int doclose)
write_table	libmdadm/crc32.c	/^   local void write_table OF((FILE *, const unsigned long FAR *));$/;"	p	file:	signature:(FILE *, const unsigned long FAR *)
write_table	libmdadm/crc32.c	/^local void write_table(out, table)$/;"	f
write_wait	libmdadm/bitmap.h	/^	wait_queue_head_t write_wait;$/;"	m	struct:bitmap	access:public
writeback_daemon	libmdadm/bitmap.h	/^	mdk_thread_t *writeback_daemon;$/;"	m	struct:bitmap	access:public
writemostly	libmdadm/mdadm.h	/^	char writemostly;	\/* 1 for 'set writemostly', 2 for 'clear writemostly' *\/$/;"	m	struct:mddev_dev	access:public
writes_pending	libmdadm/bitmap.h	/^	unsigned long writes_pending;$/;"	m	struct:bitmap	access:public
xasprintf	libmdadm/mdadm.h	/^static inline int xasprintf(char **strp, const char *fmt, ...) {$/;"	f	signature:(char **strp, const char *fmt, ...)
xcalloc	libmdadm/dlink.c	/^void *xcalloc(size_t num, size_t size);$/;"	p	file:	signature:(size_t num, size_t size)
xcalloc	libmdadm/mdadm.h	/^void *xcalloc(size_t num, size_t size);$/;"	p	signature:(size_t num, size_t size)
xcalloc	libmdadm/xmalloc.c	/^void *xcalloc(size_t num, size_t size)$/;"	f	signature:(size_t num, size_t size)
xmalloc	libmdadm/mdadm.h	/^void *xmalloc(size_t len);$/;"	p	signature:(size_t len)
xmalloc	libmdadm/xmalloc.c	/^void *xmalloc(size_t len)$/;"	f	signature:(size_t len)
xor_blocks	libmdadm/restripe.c	/^void xor_blocks(char *target, char **sources, int disks, int size)$/;"	f	signature:(char *target, char **sources, int disks, int size)
xrealloc	libmdadm/mdadm.h	/^void *xrealloc(void *ptr, size_t len);$/;"	p	signature:(void *ptr, size_t len)
xrealloc	libmdadm/xmalloc.c	/^void *xrealloc(void *ptr, size_t len)$/;"	f	signature:(void *ptr, size_t len)
xstrdup	libmdadm/mdadm.h	/^char *xstrdup(const char *str);$/;"	p	signature:(const char *str)
xstrdup	libmdadm/xmalloc.c	/^char *xstrdup(const char *str)$/;"	f	signature:(const char *str)
zap_sector	libmke2fs/mke2fs.c	/^static int zap_sector(ext2_filsys fs, int sect, int nsect)$/;"	f	file:	signature:(ext2_filsys fs, int sect, int nsect)
zero	libmdadm/restripe.c	/^uint8_t *zero;$/;"	v
zero_size	libmdadm/restripe.c	/^int zero_size;$/;"	v
~CriticalSection	test_utils.h	/^	~CriticalSection() { m_iLock = 0; }$/;"	f	class:CriticalSection	access:public	signature:()
~CriticalSectionLock	test_utils.h	/^	~CriticalSectionLock() {$/;"	f	class:CriticalSectionLock	access:public	signature:()
~FilesystemManager	FilesystemManager.cpp	/^FilesystemManager::~FilesystemManager()$/;"	f	class:FilesystemManager	signature:()
~FilesystemManager	FilesystemManager.h	/^	virtual ~FilesystemManager();$/;"	p	class:FilesystemManager	access:public	signature:()
~MiscDiskInfo	RAIDManager.h	/^	~MiscDiskInfo()$/;"	f	struct:MiscDiskInfo	access:public	signature:()
~RAIDDiskInfo	RAIDManager.h	/^	~RAIDDiskInfo() {}$/;"	f	struct:RAIDDiskInfo	access:public	signature:()
~RAIDInfo	RAIDManager.h	/^	~RAIDInfo() {$/;"	f	struct:RAIDInfo	access:public	signature:()
~RAIDManager	RAIDManager.cpp	/^RAIDManager::~RAIDManager()$/;"	f	class:RAIDManager	signature:()
~RAIDManager	RAIDManager.h	/^	~RAIDManager();$/;"	p	class:RAIDManager	access:public	signature:()
